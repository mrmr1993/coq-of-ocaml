Require [ OCaml.List ]

3
Value
  (non_rec, @.,
    [
      ((l1, [ ], [ ], Type (list, Type (Z))),
        Constructor ((3, Effect ([ ], .)), []))
    ])

4
Value
  (non_rec, @.,
    [
      ((l2, [ ], [ ], Type (list, Type (Z))),
        Constructor
          ((4, Effect ([ ], .)), cons,
            Constant ((4, Effect ([ ], .)), Int(1)),
            Constructor
              ((4, Effect ([ ], .)), cons,
                Constant ((4, Effect ([ ], .)), Int(2)),
                Constructor
                  ((4, Effect ([ ], .)), cons,
                    Constant ((4, Effect ([ ], .)), Int(3)),
                    Constructor
                      ((4, Effect ([ ], .)), cons,
                        Constant
                          ((4, Effect ([ ], .)), Int(4)),
                        Constructor ((4, Effect ([ ], .)), []))))))
    ])

5
Value
  (non_rec, @.,
    [
      ((l3, [ ], [ ], Type (list, (Type (Z) * Type (string)))),
        Constructor
          ((5, Effect ([ ], .)), cons,
            Tuple
              ((5, Effect ([ ], .)),
                Constant ((5, Effect ([ ], .)), Int(1)),
                Constant ((5, Effect ([ ], .)), String("one"))),
            Constructor
              ((5, Effect ([ ], .)), cons,
                Tuple
                  ((5, Effect ([ ], .)),
                    Constant ((5, Effect ([ ], .)), Int(2)),
                    Constant ((5, Effect ([ ], .)), String("two"))),
                Constructor ((5, Effect ([ ], .)), []))))
    ])

7
Value
  (non_rec, @.,
    [
      ((s1, [ ], [ ], Type (Z)),
        Apply
          ((7, Effect ([ ], .)),
            Variable ((7, Effect ([ ], . -> .)), OCaml.List.length),
            [ Variable ((7, Effect ([ ], .)), l1) ]))
    ])

8
Value
  (non_rec, @.,
    [
      ((s2, [ ], [ ], Type (Z)),
        Apply
          ((8, Effect ([ ], .)),
            Variable ((8, Effect ([ ], . -> .)), OCaml.List.length),
            [ Variable ((8, Effect ([ ], .)), l2) ]))
    ])

9
Value
  (non_rec, @.,
    [
      ((h, [ A ], [ (x, A) ], Monad ([ Type (OCaml.Failure) ], Type (Z))),
        Match
          ((?, Effect ([ Type (OCaml.Failure) ], .)),
            Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((9,
                    Effect
                      ([
                        Type
                          (OCaml.Failure)
                      ],
                        .)),
                    Variable
                      ((9,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.Failure)
                              ]->
                              .)),
                        OCaml.List.hd),
                    [
                      Variable
                        ((9,
                          Effect
                            ([
                            ],
                              .)),
                          l2)
                    ]))
            ]))
    ])

10
Value
  (non_rec, @.,
    [
      ((t, [ A ], [ (x, A) ],
        Monad ([ Type (OCaml.Failure) ], Type (list, Type (Z)))),
        Match
          ((?, Effect ([ Type (OCaml.Failure) ], .)),
            Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((10,
                    Effect
                      ([
                        Type
                          (OCaml.Failure)
                      ],
                        .)),
                    Variable
                      ((10,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.Failure)
                              ]->
                              .)),
                        OCaml.List.tl),
                    [
                      Variable
                        ((10,
                          Effect
                            ([
                            ],
                              .)),
                          l2)
                    ]))
            ]))
    ])

11
Value
  (non_rec, @.,
    [
      ((x, [ A ], [ (x, A) ],
        Monad
          ([ Type (OCaml.Failure); Type (OCaml.Invalid_argument) ], Type (Z))),
        Match
          ((?,
            Effect
              ([ Type (OCaml.Failure); Type (OCaml.Invalid_argument) ],
                .)), Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((11,
                    Effect
                      ([
                        Type
                          (OCaml.Failure);
                        Type
                          (OCaml.Invalid_argument)
                      ],
                        .)),
                    Variable
                      ((11,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                -[
                                  Type
                                    (OCaml.Failure);
                                  Type
                                    (OCaml.Invalid_argument)
                                ]->
                                .)),
                        OCaml.List.nth),
                    [
                      Variable
                        ((11,
                          Effect
                            ([
                            ],
                              .)),
                          l2);
                      Constant
                        ((11,
                          Effect
                            ([
                            ],
                              .)),
                          Int(1))
                    ]))
            ]))
    ])

12
Value
  (non_rec, @.,
    [
      ((rl, [ ], [ ], Type (list, Type (Z))),
        Apply
          ((12, Effect ([ ], .)),
            Variable ((12, Effect ([ ], . -> .)), OCaml.List.rev),
            [ Variable ((12, Effect ([ ], .)), l2) ]))
    ])

13
Value
  (non_rec, @.,
    [
      ((ll, [ ], [ ], Type (list, Type (Z))),
        Apply
          ((13, Effect ([ ], .)),
            Variable ((13, Effect ([ ], . -> . -> .)), OCaml.List.append),
            [
              Variable ((13, Effect ([ ], .)), l2);
              Variable ((13, Effect ([ ], .)), l2)
            ]))
    ])

14
Value
  (non_rec, @.,
    [
      ((rll, [ ], [ ], Type (list, Type (Z))),
        Apply
          ((14, Effect ([ ], .)),
            Variable
              ((14, Effect ([ ], . -> . -> .)), OCaml.List.rev_append),
            [
              Variable ((14, Effect ([ ], .)), l2);
              Variable ((14, Effect ([ ], .)), l2)
            ]))
    ])

15
Value
  (non_rec, @.,
    [
      ((lc, [ ], [ ], Type (list, Type (Z))),
        Apply
          ((15, Effect ([ ], .)),
            Variable ((15, Effect ([ ], . -> .)), OCaml.List.concat),
            [
              Constructor
                ((15, Effect ([ ], .)), cons,
                  Variable
                    ((15,
                      Effect
                        ([
                        ],
                          .)),
                      l1),
                  Constructor
                    ((15,
                      Effect
                        ([
                        ],
                          .)),
                      cons,
                      Variable
                        ((15,
                          Effect
                            ([
                            ],
                              .)),
                          l2),
                      Constructor
                        ((15,
                          Effect
                            ([
                            ],
                              .)),
                          cons,
                          Variable
                            ((15,
                              Effect
                                ([
                                ],
                                  .)),
                              l1),
                          Constructor
                            ((15,
                              Effect
                                ([
                                ],
                                  .)),
                              cons,
                              Variable
                                ((15,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  l2),
                              Constructor
                                ((15,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  [])))))
            ]))
    ])

16
Value
  (non_rec, @.,
    [
      ((lf, [ ], [ ], Type (list, Type (Z))),
        Apply
          ((16, Effect ([ ], .)),
            Variable ((16, Effect ([ ], . -> .)), OCaml.List.flatten),
            [
              Constructor
                ((16, Effect ([ ], .)), cons,
                  Variable
                    ((16,
                      Effect
                        ([
                        ],
                          .)),
                      l1),
                  Constructor
                    ((16,
                      Effect
                        ([
                        ],
                          .)),
                      cons,
                      Variable
                        ((16,
                          Effect
                            ([
                            ],
                              .)),
                          l2),
                      Constructor
                        ((16,
                          Effect
                            ([
                            ],
                              .)),
                          cons,
                          Variable
                            ((16,
                              Effect
                                ([
                                ],
                                  .)),
                              l1),
                          Constructor
                            ((16,
                              Effect
                                ([
                                ],
                                  .)),
                              cons,
                              Variable
                                ((16,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  l2),
                              Constructor
                                ((16,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  [])))))
            ]))
    ])

21
Value
  (non_rec, @.,
    [
      ((m, [ ], [ ], Type (list, Type (Z))),
        Apply
          ((21, Effect ([ ], .)),
            Variable ((21, Effect ([ ], . -> . -> .)), OCaml.List.map),
            [
              Function
                ((21, Effect ([ ], . -> .)), x,
                  Apply
                    ((21,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((21,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          Z.add),
                      [
                        Variable
                          ((21,
                            Effect
                              ([
                              ],
                                .)),
                            x);
                        Constant
                          ((21,
                            Effect
                              ([
                              ],
                                .)),
                            Int(1))
                      ]));
              Variable ((21, Effect ([ ], .)), l2)
            ]))
    ])

22
Value
  (non_rec, @.,
    [
      ((mi, [ ], [ ], Type (list, Type (Z))),
        Apply
          ((22, Effect ([ ], .)),
            Variable ((22, Effect ([ ], . -> . -> .)), OCaml.List.mapi),
            [
              Function
                ((22, Effect ([ ], . -> . -> .)), i,
                  Function
                    ((22,
                      Effect
                        ([
                        ],
                          .
                            ->
                            .)),
                      x,
                      Apply
                        ((22,
                          Effect
                            ([
                            ],
                              .)),
                          Variable
                            ((22,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .
                                      ->
                                      .)),
                              Z.add),
                          [
                            Variable
                              ((22,
                                Effect
                                  ([
                                  ],
                                    .)),
                                x);
                            Variable
                              ((22,
                                Effect
                                  ([
                                  ],
                                    .)),
                                i)
                          ])));
              Variable ((22, Effect ([ ], .)), l2)
            ]))
    ])

23
Value
  (non_rec, @.,
    [
      ((rm, [ ], [ ], Type (list, Type (Z))),
        Apply
          ((23, Effect ([ ], .)),
            Variable ((23, Effect ([ ], . -> . -> .)), OCaml.List.rev_map),
            [
              Function
                ((23, Effect ([ ], . -> .)), x,
                  Apply
                    ((23,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((23,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          Z.add),
                      [
                        Variable
                          ((23,
                            Effect
                              ([
                              ],
                                .)),
                            x);
                        Constant
                          ((23,
                            Effect
                              ([
                              ],
                                .)),
                            Int(1))
                      ]));
              Variable ((23, Effect ([ ], .)), l2)
            ]))
    ])

24
Value
  (non_rec, @.,
    [
      ((fl, [ ], [ ], Type (Z)),
        Apply
          ((24, Effect ([ ], .)),
            Variable
              ((24, Effect ([ ], . -> . -> . -> .)),
                OCaml.List.fold_left),
            [
              Function
                ((24, Effect ([ ], . -> . -> .)), s,
                  Function
                    ((24,
                      Effect
                        ([
                        ],
                          .
                            ->
                            .)),
                      x,
                      Apply
                        ((24,
                          Effect
                            ([
                            ],
                              .)),
                          Variable
                            ((24,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .
                                      ->
                                      .)),
                              Z.add),
                          [
                            Variable
                              ((24,
                                Effect
                                  ([
                                  ],
                                    .)),
                                s);
                            Variable
                              ((24,
                                Effect
                                  ([
                                  ],
                                    .)),
                                x)
                          ])));
              Constant ((24, Effect ([ ], .)), Int(0));
              Variable ((24, Effect ([ ], .)), l2)
            ]))
    ])

25
Value
  (non_rec, @.,
    [
      ((fr, [ ], [ ], Type (Z)),
        Apply
          ((25, Effect ([ ], .)),
            Variable
              ((25, Effect ([ ], . -> . -> . -> .)),
                OCaml.List.fold_right),
            [
              Function
                ((25, Effect ([ ], . -> . -> .)), x,
                  Function
                    ((25,
                      Effect
                        ([
                        ],
                          .
                            ->
                            .)),
                      s,
                      Apply
                        ((25,
                          Effect
                            ([
                            ],
                              .)),
                          Variable
                            ((25,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .
                                      ->
                                      .)),
                              Z.add),
                          [
                            Variable
                              ((25,
                                Effect
                                  ([
                                  ],
                                    .)),
                                s);
                            Variable
                              ((25,
                                Effect
                                  ([
                                  ],
                                    .)),
                                x)
                          ])));
              Variable ((25, Effect ([ ], .)), l2);
              Constant ((25, Effect ([ ], .)), Int(0))
            ]))
    ])

29
Value
  (non_rec, @.,
    [
      ((m2, [ A ], [ (x_1, A) ],
        Monad ([ Type (OCaml.Invalid_argument) ], Type (list, Type (Z)))),
        Match
          ((?, Effect ([ Type (OCaml.Invalid_argument) ], .)),
            Variable ((?, Effect ([ ], .)), x_1),
            [
              (Any,
                Apply
                  ((29,
                    Effect
                      ([
                        Type
                          (OCaml.Invalid_argument)
                      ],
                        .)),
                    Variable
                      ((29,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                ->
                                .
                                  -[
                                    Type
                                      (OCaml.Invalid_argument)
                                  ]->
                                  .)),
                        OCaml.List.map2),
                    [
                      Function
                        ((29,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          x,
                          Function
                            ((29,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .)),
                              y,
                              Apply
                                ((29,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Variable
                                    ((29,
                                      Effect
                                        ([
                                        ],
                                          .
                                            ->
                                            .
                                              ->
                                              .)),
                                      Z.add),
                                  [
                                    Variable
                                      ((29,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        x);
                                    Variable
                                      ((29,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        y)
                                  ])));
                      Variable
                        ((29,
                          Effect
                            ([
                            ],
                              .)),
                          l2);
                      Variable
                        ((29,
                          Effect
                            ([
                            ],
                              .)),
                          l2)
                    ]))
            ]))
    ])

30
Value
  (non_rec, @.,
    [
      ((rm2, [ A ], [ (x_1, A) ],
        Monad ([ Type (OCaml.Invalid_argument) ], Type (list, Type (Z)))),
        Match
          ((?, Effect ([ Type (OCaml.Invalid_argument) ], .)),
            Variable ((?, Effect ([ ], .)), x_1),
            [
              (Any,
                Apply
                  ((30,
                    Effect
                      ([
                        Type
                          (OCaml.Invalid_argument)
                      ],
                        .)),
                    Variable
                      ((30,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                ->
                                .
                                  -[
                                    Type
                                      (OCaml.Invalid_argument)
                                  ]->
                                  .)),
                        OCaml.List.rev_map2),
                    [
                      Function
                        ((30,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          x,
                          Function
                            ((30,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .)),
                              y,
                              Apply
                                ((30,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Variable
                                    ((30,
                                      Effect
                                        ([
                                        ],
                                          .
                                            ->
                                            .
                                              ->
                                              .)),
                                      Z.add),
                                  [
                                    Variable
                                      ((30,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        x);
                                    Variable
                                      ((30,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        y)
                                  ])));
                      Variable
                        ((30,
                          Effect
                            ([
                            ],
                              .)),
                          l2);
                      Variable
                        ((30,
                          Effect
                            ([
                            ],
                              .)),
                          l2)
                    ]))
            ]))
    ])

31
Value
  (non_rec, @.,
    [
      ((fl2, [ A ], [ (x_1, A) ],
        Monad ([ Type (OCaml.Invalid_argument) ], Type (Z))),
        Match
          ((?, Effect ([ Type (OCaml.Invalid_argument) ], .)),
            Variable ((?, Effect ([ ], .)), x_1),
            [
              (Any,
                Apply
                  ((31,
                    Effect
                      ([
                        Type
                          (OCaml.Invalid_argument)
                      ],
                        .)),
                    Variable
                      ((31,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                ->
                                .
                                  ->
                                  .
                                    -[
                                      Type
                                        (OCaml.Invalid_argument)
                                    ]->
                                    .)),
                        OCaml.List.fold_left2),
                    [
                      Function
                        ((31,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .
                                    ->
                                    .)),
                          s,
                          Function
                            ((31,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .
                                      ->
                                      .)),
                              x,
                              Function
                                ((31,
                                  Effect
                                    ([
                                    ],
                                      .
                                        ->
                                        .)),
                                  y,
                                  Apply
                                    ((31,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Variable
                                        ((31,
                                          Effect
                                            ([
                                            ],
                                              .
                                                ->
                                                .
                                                  ->
                                                  .)),
                                          Z.add),
                                      [
                                        Apply
                                          ((31,
                                            Effect
                                              ([
                                              ],
                                                .)),
                                            Variable
                                              ((31,
                                                Effect
                                                  ([
                                                  ],
                                                    .
                                                      ->
                                                      .
                                                        ->
                                                        .)),
                                                Z.add),
                                            [
                                              Variable
                                                ((31,
                                                  Effect
                                                    ([
                                                    ],
                                                      .)),
                                                  s);
                                              Variable
                                                ((31,
                                                  Effect
                                                    ([
                                                    ],
                                                      .)),
                                                  x)
                                            ]);
                                        Variable
                                          ((31,
                                            Effect
                                              ([
                                              ],
                                                .)),
                                            y)
                                      ]))));
                      Constant
                        ((31,
                          Effect
                            ([
                            ],
                              .)),
                          Int(0));
                      Variable
                        ((31,
                          Effect
                            ([
                            ],
                              .)),
                          l2);
                      Variable
                        ((31,
                          Effect
                            ([
                            ],
                              .)),
                          l2)
                    ]))
            ]))
    ])

32
Value
  (non_rec, @.,
    [
      ((fr2, [ A ], [ (x_1, A) ],
        Monad ([ Type (OCaml.Invalid_argument) ], Type (Z))),
        Match
          ((?, Effect ([ Type (OCaml.Invalid_argument) ], .)),
            Variable ((?, Effect ([ ], .)), x_1),
            [
              (Any,
                Apply
                  ((32,
                    Effect
                      ([
                        Type
                          (OCaml.Invalid_argument)
                      ],
                        .)),
                    Variable
                      ((32,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                ->
                                .
                                  ->
                                  .
                                    -[
                                      Type
                                        (OCaml.Invalid_argument)
                                    ]->
                                    .)),
                        OCaml.List.fold_right2),
                    [
                      Function
                        ((32,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .
                                    ->
                                    .)),
                          s,
                          Function
                            ((32,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .
                                      ->
                                      .)),
                              x,
                              Function
                                ((32,
                                  Effect
                                    ([
                                    ],
                                      .
                                        ->
                                        .)),
                                  y,
                                  Apply
                                    ((32,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Variable
                                        ((32,
                                          Effect
                                            ([
                                            ],
                                              .
                                                ->
                                                .
                                                  ->
                                                  .)),
                                          Z.add),
                                      [
                                        Apply
                                          ((32,
                                            Effect
                                              ([
                                              ],
                                                .)),
                                            Variable
                                              ((32,
                                                Effect
                                                  ([
                                                  ],
                                                    .
                                                      ->
                                                      .
                                                        ->
                                                        .)),
                                                Z.add),
                                            [
                                              Variable
                                                ((32,
                                                  Effect
                                                    ([
                                                    ],
                                                      .)),
                                                  s);
                                              Variable
                                                ((32,
                                                  Effect
                                                    ([
                                                    ],
                                                      .)),
                                                  x)
                                            ]);
                                        Variable
                                          ((32,
                                            Effect
                                              ([
                                              ],
                                                .)),
                                            y)
                                      ]))));
                      Variable
                        ((32,
                          Effect
                            ([
                            ],
                              .)),
                          l2);
                      Variable
                        ((32,
                          Effect
                            ([
                            ],
                              .)),
                          l2);
                      Constant
                        ((32,
                          Effect
                            ([
                            ],
                              .)),
                          Int(0))
                    ]))
            ]))
    ])

35
Value
  (non_rec, @.,
    [
      ((all, [ ], [ ], Type (bool)),
        Apply
          ((35, Effect ([ ], .)),
            Variable ((35, Effect ([ ], . -> . -> .)), OCaml.List.for_all),
            [
              Function
                ((35, Effect ([ ], . -> .)), x,
                  Apply
                    ((35,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((35,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          equiv_decb),
                      [
                        Variable
                          ((35,
                            Effect
                              ([
                              ],
                                .)),
                            x);
                        Constant
                          ((35,
                            Effect
                              ([
                              ],
                                .)),
                            Int(2))
                      ]));
              Variable ((35, Effect ([ ], .)), l2)
            ]))
    ])

36
Value
  (non_rec, @.,
    [
      ((ex, [ ], [ ], Type (bool)),
        Apply
          ((36, Effect ([ ], .)),
            Variable ((36, Effect ([ ], . -> . -> .)), OCaml.List._exists),
            [
              Function
                ((36, Effect ([ ], . -> .)), x,
                  Apply
                    ((36,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((36,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          equiv_decb),
                      [
                        Variable
                          ((36,
                            Effect
                              ([
                              ],
                                .)),
                            x);
                        Constant
                          ((36,
                            Effect
                              ([
                              ],
                                .)),
                            Int(2))
                      ]));
              Variable ((36, Effect ([ ], .)), l2)
            ]))
    ])

37
Value
  (non_rec, @.,
    [
      ((all2, [ A ], [ (x_1, A) ],
        Monad ([ Type (OCaml.Invalid_argument) ], Type (bool))),
        Match
          ((?, Effect ([ Type (OCaml.Invalid_argument) ], .)),
            Variable ((?, Effect ([ ], .)), x_1),
            [
              (Any,
                Apply
                  ((37,
                    Effect
                      ([
                        Type
                          (OCaml.Invalid_argument)
                      ],
                        .)),
                    Variable
                      ((37,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                ->
                                .
                                  -[
                                    Type
                                      (OCaml.Invalid_argument)
                                  ]->
                                  .)),
                        OCaml.List.for_all2),
                    [
                      Function
                        ((37,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          x,
                          Function
                            ((37,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .)),
                              y,
                              Apply
                                ((37,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Variable
                                    ((37,
                                      Effect
                                        ([
                                        ],
                                          .
                                            ->
                                            .
                                              ->
                                              .)),
                                      equiv_decb),
                                  [
                                    Variable
                                      ((37,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        x);
                                    Variable
                                      ((37,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        y)
                                  ])));
                      Variable
                        ((37,
                          Effect
                            ([
                            ],
                              .)),
                          l2);
                      Variable
                        ((37,
                          Effect
                            ([
                            ],
                              .)),
                          l2)
                    ]))
            ]))
    ])

38
Value
  (non_rec, @.,
    [
      ((ex2, [ A ], [ (x_1, A) ],
        Monad ([ Type (OCaml.Invalid_argument) ], Type (bool))),
        Match
          ((?, Effect ([ Type (OCaml.Invalid_argument) ], .)),
            Variable ((?, Effect ([ ], .)), x_1),
            [
              (Any,
                Apply
                  ((38,
                    Effect
                      ([
                        Type
                          (OCaml.Invalid_argument)
                      ],
                        .)),
                    Variable
                      ((38,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                ->
                                .
                                  -[
                                    Type
                                      (OCaml.Invalid_argument)
                                  ]->
                                  .)),
                        OCaml.List._exists2),
                    [
                      Function
                        ((38,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          x,
                          Function
                            ((38,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .)),
                              y,
                              Apply
                                ((38,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Variable
                                    ((38,
                                      Effect
                                        ([
                                        ],
                                          .
                                            ->
                                            .
                                              ->
                                              .)),
                                      equiv_decb),
                                  [
                                    Variable
                                      ((38,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        x);
                                    Variable
                                      ((38,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        y)
                                  ])));
                      Variable
                        ((38,
                          Effect
                            ([
                            ],
                              .)),
                          l2);
                      Variable
                        ((38,
                          Effect
                            ([
                            ],
                              .)),
                          l2)
                    ]))
            ]))
    ])

39
Value
  (non_rec, @.,
    [
      ((me, [ ], [ ], Type (bool)),
        Apply
          ((39, Effect ([ ], .)),
            Variable ((39, Effect ([ ], . -> . -> .)), OCaml.List.mem),
            [
              Constant ((39, Effect ([ ], .)), Int(2));
              Variable ((39, Effect ([ ], .)), l2)
            ]))
    ])

43
Value
  (non_rec, @.,
    [
      ((fin, [ A ], [ (x_1, A) ], Monad ([ Type (OCaml.Not_found) ], Type (Z))),
        Match
          ((?, Effect ([ Type (OCaml.Not_found) ], .)),
            Variable ((?, Effect ([ ], .)), x_1),
            [
              (Any,
                Apply
                  ((43,
                    Effect
                      ([
                        Type
                          (OCaml.Not_found)
                      ],
                        .)),
                    Variable
                      ((43,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                -[
                                  Type
                                    (OCaml.Not_found)
                                ]->
                                .)),
                        OCaml.List.find),
                    [
                      Function
                        ((43,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .)),
                          x,
                          Apply
                            ((43,
                              Effect
                                ([
                                ],
                                  .)),
                              Variable
                                ((43,
                                  Effect
                                    ([
                                    ],
                                      .
                                        ->
                                        .
                                          ->
                                          .)),
                                  equiv_decb),
                              [
                                Variable
                                  ((43,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    x);
                                Constant
                                  ((43,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    Int(1))
                              ]));
                      Variable
                        ((43,
                          Effect
                            ([
                            ],
                              .)),
                          l2)
                    ]))
            ]))
    ])

44
Value
  (non_rec, @.,
    [
      ((fil, [ ], [ ], Type (list, Type (Z))),
        Apply
          ((44, Effect ([ ], .)),
            Variable ((44, Effect ([ ], . -> . -> .)), OCaml.List.filter),
            [
              Function
                ((44, Effect ([ ], . -> .)), x,
                  Apply
                    ((44,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((44,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          OCaml.Pervasives.ge),
                      [
                        Variable
                          ((44,
                            Effect
                              ([
                              ],
                                .)),
                            x);
                        Constant
                          ((44,
                            Effect
                              ([
                              ],
                                .)),
                            Int(2))
                      ]));
              Variable ((44, Effect ([ ], .)), l2)
            ]))
    ])

45
Value
  (non_rec, @.,
    [
      ((fina, [ ], [ ], Type (list, Type (Z))),
        Apply
          ((45, Effect ([ ], .)),
            Variable
              ((45, Effect ([ ], . -> . -> .)), OCaml.List.find_all),
            [
              Function
                ((45, Effect ([ ], . -> .)), x,
                  Apply
                    ((45,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((45,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          OCaml.Pervasives.ge),
                      [
                        Variable
                          ((45,
                            Effect
                              ([
                              ],
                                .)),
                            x);
                        Constant
                          ((45,
                            Effect
                              ([
                              ],
                                .)),
                            Int(2))
                      ]));
              Variable ((45, Effect ([ ], .)), l2)
            ]))
    ])

46
Value
  (non_rec, @.,
    [
      ((par, [ ], [ ], (Type (list, Type (Z)) * Type (list, Type (Z)))),
        Apply
          ((46, Effect ([ ], .)),
            Variable
              ((46, Effect ([ ], . -> . -> .)), OCaml.List.partition),
            [
              Function
                ((46, Effect ([ ], . -> .)), x,
                  Apply
                    ((46,
                      Effect
                        ([
                        ],
                          .)),
                      Variable
                        ((46,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          OCaml.Pervasives.gt),
                      [
                        Variable
                          ((46,
                            Effect
                              ([
                              ],
                                .)),
                            x);
                        Constant
                          ((46,
                            Effect
                              ([
                              ],
                                .)),
                            Int(2))
                      ]));
              Variable ((46, Effect ([ ], .)), l2)
            ]))
    ])

49
Value
  (non_rec, @.,
    [
      ((asso, [ A ], [ (x_1, A) ],
        Monad ([ Type (OCaml.Not_found) ], Type (string))),
        Match
          ((?, Effect ([ Type (OCaml.Not_found) ], .)),
            Variable ((?, Effect ([ ], .)), x_1),
            [
              (Any,
                Apply
                  ((49,
                    Effect
                      ([
                        Type
                          (OCaml.Not_found)
                      ],
                        .)),
                    Variable
                      ((49,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                -[
                                  Type
                                    (OCaml.Not_found)
                                ]->
                                .)),
                        OCaml.List.assoc),
                    [
                      Constant
                        ((49,
                          Effect
                            ([
                            ],
                              .)),
                          Int(2));
                      Variable
                        ((49,
                          Effect
                            ([
                            ],
                              .)),
                          l3)
                    ]))
            ]))
    ])

51
Value
  (non_rec, @.,
    [
      ((masso, [ A ], [ (x_1, A) ], Type (bool)),
        Match
          ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), x_1),
            [
              (Any,
                Apply
                  ((51, Effect ([ ], .)),
                    Variable
                      ((51,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                ->
                                .)),
                        OCaml.List.mem_assoc),
                    [
                      Constant
                        ((51,
                          Effect
                            ([
                            ],
                              .)),
                          Int(2));
                      Variable
                        ((51,
                          Effect
                            ([
                            ],
                              .)),
                          l3)
                    ]))
            ]))
    ])

53
Value
  (non_rec, @.,
    [
      ((rasso, [ A ], [ (x_1, A) ], Type (list, (Type (Z) * Type (string)))),
        Match
          ((?, Effect ([ ], .)), Variable ((?, Effect ([ ], .)), x_1),
            [
              (Any,
                Apply
                  ((53, Effect ([ ], .)),
                    Variable
                      ((53,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                ->
                                .)),
                        OCaml.List.remove_assoc),
                    [
                      Constant
                        ((53,
                          Effect
                            ([
                            ],
                              .)),
                          Int(2));
                      Variable
                        ((53,
                          Effect
                            ([
                            ],
                              .)),
                          l3)
                    ]))
            ]))
    ])

57
Value
  (non_rec, @.,
    [
      ((sp, [ ], [ ], (Type (list, Type (Z)) * Type (list, Type (string)))),
        Apply
          ((57, Effect ([ ], .)),
            Variable ((57, Effect ([ ], . -> .)), OCaml.List.split),
            [ Variable ((57, Effect ([ ], .)), l3) ]))
    ])

58
Value
  (non_rec, @.,
    [
      ((com, [ A ], [ (x_1, A) ],
        Monad
          ([ Type (OCaml.Invalid_argument) ],
            Type (list, (Type (Z) * Type (Z))))),
        Match
          ((?, Effect ([ Type (OCaml.Invalid_argument) ], .)),
            Variable ((?, Effect ([ ], .)), x_1),
            [
              (Any,
                Apply
                  ((58,
                    Effect
                      ([
                        Type
                          (OCaml.Invalid_argument)
                      ],
                        .)),
                    Variable
                      ((58,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                -[
                                  Type
                                    (OCaml.Invalid_argument)
                                ]->
                                .)),
                        OCaml.List.combine),
                    [
                      Variable
                        ((58,
                          Effect
                            ([
                            ],
                              .)),
                          l2);
                      Variable
                        ((58,
                          Effect
                            ([
                            ],
                              .)),
                          l2)
                    ]))
            ]))
    ])

61
Value
  (non_rec, @.,
    [
      ((so, [ A ], [ (x_1, A) ],
        Monad
          ([ Type (Counter); Type (NonTermination) ], Type (list, Type (Z)))),
        Match
          ((?, Effect ([ Type (Counter); Type (NonTermination) ], .)),
            Variable ((?, Effect ([ ], .)), x_1),
            [
              (Any,
                Apply
                  ((61,
                    Effect
                      ([
                        Type
                          (Counter);
                        Type
                          (NonTermination)
                      ],
                        .)),
                    Variable
                      ((61,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                -[
                                  Type
                                    (Counter);
                                  Type
                                    (NonTermination)
                                ]->
                                .)),
                        OCaml.List.sort),
                    [
                      Function
                        ((61,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          x,
                          Function
                            ((61,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .)),
                              y,
                              Apply
                                ((61,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Variable
                                    ((61,
                                      Effect
                                        ([
                                        ],
                                          .
                                            ->
                                            .
                                              ->
                                              .)),
                                      Z.sub),
                                  [
                                    Variable
                                      ((61,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        y);
                                    Variable
                                      ((61,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        x)
                                  ])));
                      Variable
                        ((61,
                          Effect
                            ([
                            ],
                              .)),
                          l2)
                    ]))
            ]))
    ])

62
Value
  (non_rec, @.,
    [
      ((sso, [ A ], [ (x_1, A) ],
        Monad
          ([ Type (Counter); Type (NonTermination) ], Type (list, Type (Z)))),
        Match
          ((?, Effect ([ Type (Counter); Type (NonTermination) ], .)),
            Variable ((?, Effect ([ ], .)), x_1),
            [
              (Any,
                Apply
                  ((62,
                    Effect
                      ([
                        Type
                          (Counter);
                        Type
                          (NonTermination)
                      ],
                        .)),
                    Variable
                      ((62,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                -[
                                  Type
                                    (Counter);
                                  Type
                                    (NonTermination)
                                ]->
                                .)),
                        OCaml.List.stable_sort),
                    [
                      Function
                        ((62,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          x,
                          Function
                            ((62,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .)),
                              y,
                              Apply
                                ((62,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Variable
                                    ((62,
                                      Effect
                                        ([
                                        ],
                                          .
                                            ->
                                            .
                                              ->
                                              .)),
                                      Z.sub),
                                  [
                                    Variable
                                      ((62,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        y);
                                    Variable
                                      ((62,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        x)
                                  ])));
                      Variable
                        ((62,
                          Effect
                            ([
                            ],
                              .)),
                          l2)
                    ]))
            ]))
    ])

63
Value
  (non_rec, @.,
    [
      ((fso, [ A ], [ (x_1, A) ],
        Monad
          ([ Type (Counter); Type (NonTermination) ], Type (list, Type (Z)))),
        Match
          ((?, Effect ([ Type (Counter); Type (NonTermination) ], .)),
            Variable ((?, Effect ([ ], .)), x_1),
            [
              (Any,
                Apply
                  ((63,
                    Effect
                      ([
                        Type
                          (Counter);
                        Type
                          (NonTermination)
                      ],
                        .)),
                    Variable
                      ((63,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                -[
                                  Type
                                    (Counter);
                                  Type
                                    (NonTermination)
                                ]->
                                .)),
                        OCaml.List.fast_sort),
                    [
                      Function
                        ((63,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  ->
                                  .)),
                          x,
                          Function
                            ((63,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .)),
                              y,
                              Apply
                                ((63,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Variable
                                    ((63,
                                      Effect
                                        ([
                                        ],
                                          .
                                            ->
                                            .
                                              ->
                                              .)),
                                      Z.sub),
                                  [
                                    Variable
                                      ((63,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        y);
                                    Variable
                                      ((63,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        x)
                                  ])));
                      Variable
                        ((63,
                          Effect
                            ([
                            ],
                              .)),
                          l2)
                    ]))
            ]))
    ])

64
Value
  (non_rec, @.,
    [
      ((mer, [ ], [ ], Type (list, Type (Z))),
        Apply
          ((64, Effect ([ ], .)),
            Variable
              ((64, Effect ([ ], . -> . -> . -> .)), OCaml.List.merge),
            [
              Function
                ((64, Effect ([ ], . -> . -> .)), x,
                  Function
                    ((64,
                      Effect
                        ([
                        ],
                          .
                            ->
                            .)),
                      y,
                      Apply
                        ((64,
                          Effect
                            ([
                            ],
                              .)),
                          Variable
                            ((64,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .
                                      ->
                                      .)),
                              Z.sub),
                          [
                            Variable
                              ((64,
                                Effect
                                  ([
                                  ],
                                    .)),
                                y);
                            Variable
                              ((64,
                                Effect
                                  ([
                                  ],
                                    .)),
                                x)
                          ])));
              Variable ((64, Effect ([ ], .)), l2);
              Constructor
                ((64, Effect ([ ], .)), cons,
                  Constant
                    ((64,
                      Effect
                        ([
                        ],
                          .)),
                      Int(2)),
                  Constructor
                    ((64,
                      Effect
                        ([
                        ],
                          .)),
                      cons,
                      Constant
                        ((64,
                          Effect
                            ([
                            ],
                              .)),
                          Int(-1)),
                      Constructor
                        ((64,
                          Effect
                            ([
                            ],
                              .)),
                          cons,
                          Constant
                            ((64,
                              Effect
                                ([
                                ],
                                  .)),
                              Int(5)),
                          Constructor
                            ((64,
                              Effect
                                ([
                                ],
                                  .)),
                              []))))
            ]))
    ])
