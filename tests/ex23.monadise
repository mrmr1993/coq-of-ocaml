4 Value (non_rec, @., [ ((n, [ ], [ ], Type (Z)), Constant (4, Int(12))) ])

5
Value (non_rec, @., [ ((c1, [ ], [ ], Type (ascii)), Constant (5, Char("a"))) ])

6
Value
  (non_rec, @., [ ((c2, [ ], [ ], Type (ascii)), Constant (6, Char("\\n"))) ])

7
Value
  (non_rec, @., [ ((c3, [ ], [ ], Type (ascii)), Constant (7, Char("\\t"))) ])

8
Value
  (non_rec, @., [ ((c4, [ ], [ ], Type (ascii)), Constant (8, Char("\""))) ])

9
Value
  (non_rec, @.,
    [ ((s, [ ], [ ], Type (string)), Constant (9, String("hi\n\t:)\""))) ])

11
Value (non_rec, @., [ ((b1, [ ], [ ], Type (bool)), Constructor (11, false)) ])

12
Value (non_rec, @., [ ((b2, [ ], [ ], Type (bool)), Constructor (12, true)) ])

13 Value (non_rec, @., [ ((u, [ ], [ ], Type (unit)), Constructor (13, tt)) ])

16
Value
  (non_rec, @., [ ((l1, [ A ], [ ], Type (list, A)), Constructor (16, [])) ])

17
Value
  (non_rec, @.,
    [
      ((l2, [ ], [ ], Type (list, Type (Z))),
        Constructor
          (17, cons, Constant (17, Int(0)),
            Constructor
              (17, cons, Constant (17, Int(1)),
                Constructor
                  (17, cons, Constant (17, Int(2)),
                    Constructor
                      (17, cons, Constant (17, Int(3)),
                        Constructor (17, []))))))
    ])

18
Value
  (non_rec, @.,
    [
      ((o, [ ], [ ], Type (option, Type (Z))),
        IfThenElse
          (18, Variable (18, b1), Constructor (18, None),
            Constructor (18, Some, Variable (18, n))))
    ])

26
Value
  (non_rec, @.,
    [
      ((e_match, [ A; B ], [ (x, A) ], Monad ([ OCaml.Match_failure ], B)),
        Match
          (?, Variable (?, x),
            [
              (Any,
                Apply
                  (26,
                    Variable
                      (26,
                        OCaml.raise_Match_failure),
                    [
                      Tuple
                        (?,
                          Tuple
                            (26,
                              Constant
                                (26,
                                  String("error")),
                              Constant
                                (26,
                                  Int(1)),
                              Constant
                                (26,
                                  Int(2))))
                    ]))
            ]))
    ])

27
Value
  (non_rec, @.,
    [
      ((e_assert, [ A; B ], [ (x, A) ], Monad ([ OCaml.Assert_failure ], B)),
        Match
          (?, Variable (?, x),
            [
              (Any,
                Apply
                  (27,
                    Variable
                      (27,
                        OCaml.raise_Assert_failure),
                    [
                      Tuple
                        (?,
                          Tuple
                            (27,
                              Constant
                                (27,
                                  String("error")),
                              Constant
                                (27,
                                  Int(1)),
                              Constant
                                (27,
                                  Int(2))))
                    ]))
            ]))
    ])

28
Value
  (non_rec, @.,
    [
      ((e_invalid, [ A; B ], [ (x, A) ], Monad ([ OCaml.Invalid_argument ], B)),
        Match
          (?, Variable (?, x),
            [
              (Any,
                Apply
                  (28,
                    Variable
                      (28,
                        OCaml.raise_Invalid_argument),
                    [
                      Tuple
                        (?,
                          Constant
                            (28,
                              String("error")))
                    ]))
            ]))
    ])

29
Value
  (non_rec, @.,
    [
      ((e_failure, [ A; B ], [ (x, A) ], Monad ([ OCaml.Failure ], B)),
        Match
          (?, Variable (?, x),
            [
              (Any,
                Apply
                  (29,
                    Variable
                      (29,
                        OCaml.raise_Failure),
                    [
                      Tuple
                        (?,
                          Constant
                            (29,
                              String("error")))
                    ]))
            ]))
    ])

30
Value
  (non_rec, @.,
    [
      ((e_not_found, [ A; B ], [ (x, A) ], Monad ([ OCaml.Not_found ], B)),
        Match
          (?, Variable (?, x),
            [
              (Any,
                Apply
                  (30,
                    Variable
                      (30,
                        OCaml.raise_Not_found),
                    [
                      Tuple
                        (?)
                    ]))
            ]))
    ])

31
Value
  (non_rec, @.,
    [
      ((e_out_of_mem, [ A; B ], [ (x, A) ], Monad ([ OCaml.Out_of_memory ], B)),
        Match
          (?, Variable (?, x),
            [
              (Any,
                Apply
                  (31,
                    Variable
                      (31,
                        OCaml.raise_Out_of_memory),
                    [
                      Tuple
                        (?)
                    ]))
            ]))
    ])

32
Value
  (non_rec, @.,
    [
      ((e_overflow, [ A; B ], [ (x, A) ], Monad ([ OCaml.Stack_overflow ], B)),
        Match
          (?, Variable (?, x),
            [
              (Any,
                Apply
                  (32,
                    Variable
                      (32,
                        OCaml.raise_Stack_overflow),
                    [
                      Tuple
                        (?)
                    ]))
            ]))
    ])

33
Value
  (non_rec, @.,
    [
      ((e_sys_err, [ A; B ], [ (x, A) ], Monad ([ OCaml.Sys_error ], B)),
        Match
          (?, Variable (?, x),
            [
              (Any,
                Apply
                  (33,
                    Variable
                      (33,
                        OCaml.raise_Sys_error),
                    [
                      Tuple
                        (?,
                          Constant
                            (33,
                              String("error")))
                    ]))
            ]))
    ])

34
Value
  (non_rec, @.,
    [
      ((e_EOF, [ A; B ], [ (x, A) ], Monad ([ OCaml.End_of_file ], B)),
        Match
          (?, Variable (?, x),
            [
              (Any,
                Apply
                  (34,
                    Variable
                      (34,
                        OCaml.raise_End_of_file),
                    [
                      Tuple
                        (?)
                    ]))
            ]))
    ])

35
Value
  (non_rec, @.,
    [
      ((e_div, [ A; B ], [ (x, A) ], Monad ([ OCaml.Division_by_zero ], B)),
        Match
          (?, Variable (?, x),
            [
              (Any,
                Apply
                  (35,
                    Variable
                      (35,
                        OCaml.raise_Division_by_zero),
                    [
                      Tuple
                        (?)
                    ]))
            ]))
    ])

36
Value
  (non_rec, @.,
    [
      ((e_sys_blocked, [ A; B ], [ (x, A) ], Monad ([ OCaml.Sys_blocked_io ], B)),
        Match
          (?, Variable (?, x),
            [
              (Any,
                Apply
                  (36,
                    Variable
                      (36,
                        OCaml.raise_Sys_blocked_io),
                    [
                      Tuple
                        (?)
                    ]))
            ]))
    ])

37
Value
  (non_rec, @.,
    [
      ((e_rec_module, [ A; B ], [ (x, A) ],
        Monad ([ OCaml.Undefined_recursive_module ], B)),
        Match
          (?, Variable (?, x),
            [
              (Any,
                Apply
                  (37,
                    Variable
                      (37,
                        OCaml.raise_Undefined_recursive_module),
                    [
                      Tuple
                        (?,
                          Tuple
                            (37,
                              Constant
                                (37,
                                  String("error")),
                              Constant
                                (37,
                                  Int(1)),
                              Constant
                                (37,
                                  Int(2))))
                    ]))
            ]))
    ])
