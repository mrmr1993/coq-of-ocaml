Require [ OCaml.List ]

3
Value
  (non_rec, @., [ ((l1, [ ], [ ], Type (list, Type (Z))), Constructor (3, [])) ])

4
Value
  (non_rec, @.,
    [
      ((l2, [ ], [ ], Type (list, Type (Z))),
        Constructor
          (4, cons, Constant (4, Int(1)),
            Constructor
              (4, cons, Constant (4, Int(2)),
                Constructor
                  (4, cons, Constant (4, Int(3)),
                    Constructor
                      (4, cons, Constant (4, Int(4)),
                        Constructor (4, []))))))
    ])

5
Value
  (non_rec, @.,
    [
      ((l3, [ ], [ ], Type (list, (Type (Z) * Type (string)))),
        Constructor
          (5, cons,
            Tuple (5, Constant (5, Int(1)), Constant (5, String("one"))),
            Constructor
              (5, cons,
                Tuple
                  (5, Constant (5, Int(2)),
                    Constant (5, String("two"))),
                Constructor (5, []))))
    ])

7
Value
  (non_rec, @.,
    [
      ((s1, [ ], [ ], Type (Z)),
        Apply (7, Variable (7, OCaml.List.length), [ Variable (7, l1) ]))
    ])

8
Value
  (non_rec, @.,
    [
      ((s2, [ ], [ ], Type (Z)),
        Apply (8, Variable (8, OCaml.List.length), [ Variable (8, l2) ]))
    ])

9
Value
  (non_rec, @.,
    [
      ((h, [ A ], [ (x, A) ], Monad ([ Type (OCaml.Failure) ], Type (Z))),
        Match
          (9, Variable (?, x),
            [
              (Any,
                Apply
                  (9,
                    Variable
                      (9,
                        OCaml.List.hd),
                    [
                      Variable
                        (9,
                          l2)
                    ]))
            ]))
    ])

10
Value
  (non_rec, @.,
    [
      ((t, [ A ], [ (x, A) ],
        Monad ([ Type (OCaml.Failure) ], Type (list, Type (Z)))),
        Match
          (10, Variable (?, x),
            [
              (Any,
                Apply
                  (10,
                    Variable
                      (10,
                        OCaml.List.tl),
                    [
                      Variable
                        (10,
                          l2)
                    ]))
            ]))
    ])

11
Value
  (non_rec, @.,
    [
      ((x, [ A ], [ (x, A) ],
        Monad
          ([ Type (OCaml.Failure); Type (OCaml.Invalid_argument) ], Type (Z))),
        Match
          (11, Variable (?, x),
            [
              (Any,
                Apply
                  (11,
                    Variable
                      (11,
                        OCaml.List.nth),
                    [
                      Variable
                        (11,
                          l2);
                      Constant
                        (11,
                          Int(1))
                    ]))
            ]))
    ])

12
Value
  (non_rec, @.,
    [
      ((rl, [ ], [ ], Type (list, Type (Z))),
        Apply (12, Variable (12, OCaml.List.rev), [ Variable (12, l2) ]))
    ])

13
Value
  (non_rec, @.,
    [
      ((ll, [ ], [ ], Type (list, Type (Z))),
        Apply
          (13, Variable (13, OCaml.List.append),
            [ Variable (13, l2); Variable (13, l2) ]))
    ])

14
Value
  (non_rec, @.,
    [
      ((rll, [ ], [ ], Type (list, Type (Z))),
        Apply
          (14, Variable (14, OCaml.List.rev_append),
            [ Variable (14, l2); Variable (14, l2) ]))
    ])

15
Value
  (non_rec, @.,
    [
      ((lc, [ ], [ ], Type (list, Type (Z))),
        Apply
          (15, Variable (15, OCaml.List.concat),
            [
              Constructor
                (15, cons, Variable (15, l1),
                  Constructor
                    (15,
                      cons,
                      Variable
                        (15,
                          l2),
                      Constructor
                        (15,
                          cons,
                          Variable
                            (15,
                              l1),
                          Constructor
                            (15,
                              cons,
                              Variable
                                (15,
                                  l2),
                              Constructor
                                (15,
                                  [])))))
            ]))
    ])

16
Value
  (non_rec, @.,
    [
      ((lf, [ ], [ ], Type (list, Type (Z))),
        Apply
          (16, Variable (16, OCaml.List.flatten),
            [
              Constructor
                (16, cons, Variable (16, l1),
                  Constructor
                    (16,
                      cons,
                      Variable
                        (16,
                          l2),
                      Constructor
                        (16,
                          cons,
                          Variable
                            (16,
                              l1),
                          Constructor
                            (16,
                              cons,
                              Variable
                                (16,
                                  l2),
                              Constructor
                                (16,
                                  [])))))
            ]))
    ])

21
Value
  (non_rec, @.,
    [
      ((m, [ ], [ ], Type (list, Type (Z))),
        Apply
          (21, Variable (21, OCaml.List.map),
            [
              Function
                (21, x,
                  Apply
                    (21,
                      Variable
                        (21,
                          Z.add),
                      [
                        Variable
                          (21,
                            x);
                        Constant
                          (21,
                            Int(1))
                      ]));
              Variable (21, l2)
            ]))
    ])

22
Value
  (non_rec, @.,
    [
      ((mi, [ ], [ ], Type (list, Type (Z))),
        Apply
          (22, Variable (22, OCaml.List.mapi),
            [
              Function
                (22, i,
                  Function
                    (22,
                      x,
                      Apply
                        (22,
                          Variable
                            (22,
                              Z.add),
                          [
                            Variable
                              (22,
                                x);
                            Variable
                              (22,
                                i)
                          ])));
              Variable (22, l2)
            ]))
    ])

23
Value
  (non_rec, @.,
    [
      ((rm, [ ], [ ], Type (list, Type (Z))),
        Apply
          (23, Variable (23, OCaml.List.rev_map),
            [
              Function
                (23, x,
                  Apply
                    (23,
                      Variable
                        (23,
                          Z.add),
                      [
                        Variable
                          (23,
                            x);
                        Constant
                          (23,
                            Int(1))
                      ]));
              Variable (23, l2)
            ]))
    ])

24
Value
  (non_rec, @.,
    [
      ((fl, [ ], [ ], Type (Z)),
        Apply
          (24, Variable (24, OCaml.List.fold_left),
            [
              Function
                (24, s,
                  Function
                    (24,
                      x,
                      Apply
                        (24,
                          Variable
                            (24,
                              Z.add),
                          [
                            Variable
                              (24,
                                s);
                            Variable
                              (24,
                                x)
                          ])));
              Constant (24, Int(0));
              Variable (24, l2)
            ]))
    ])

25
Value
  (non_rec, @.,
    [
      ((fr, [ ], [ ], Type (Z)),
        Apply
          (25, Variable (25, OCaml.List.fold_right),
            [
              Function
                (25, x,
                  Function
                    (25,
                      s,
                      Apply
                        (25,
                          Variable
                            (25,
                              Z.add),
                          [
                            Variable
                              (25,
                                s);
                            Variable
                              (25,
                                x)
                          ])));
              Variable (25, l2);
              Constant (25, Int(0))
            ]))
    ])

29
Value
  (non_rec, @.,
    [
      ((m2, [ A ], [ (x_1, A) ],
        Monad ([ Type (OCaml.Invalid_argument) ], Type (list, Type (Z)))),
        Match
          (29, Variable (?, x_1),
            [
              (Any,
                Apply
                  (29,
                    Variable
                      (29,
                        OCaml.List.map2),
                    [
                      Function
                        (29,
                          x,
                          Function
                            (29,
                              y,
                              Apply
                                (29,
                                  Variable
                                    (29,
                                      Z.add),
                                  [
                                    Variable
                                      (29,
                                        x);
                                    Variable
                                      (29,
                                        y)
                                  ])));
                      Variable
                        (29,
                          l2);
                      Variable
                        (29,
                          l2)
                    ]))
            ]))
    ])

30
Value
  (non_rec, @.,
    [
      ((rm2, [ A ], [ (x_1, A) ],
        Monad ([ Type (OCaml.Invalid_argument) ], Type (list, Type (Z)))),
        Match
          (30, Variable (?, x_1),
            [
              (Any,
                Apply
                  (30,
                    Variable
                      (30,
                        OCaml.List.rev_map2),
                    [
                      Function
                        (30,
                          x,
                          Function
                            (30,
                              y,
                              Apply
                                (30,
                                  Variable
                                    (30,
                                      Z.add),
                                  [
                                    Variable
                                      (30,
                                        x);
                                    Variable
                                      (30,
                                        y)
                                  ])));
                      Variable
                        (30,
                          l2);
                      Variable
                        (30,
                          l2)
                    ]))
            ]))
    ])

31
Value
  (non_rec, @.,
    [
      ((fl2, [ A ], [ (x_1, A) ],
        Monad ([ Type (OCaml.Invalid_argument) ], Type (Z))),
        Match
          (31, Variable (?, x_1),
            [
              (Any,
                Apply
                  (31,
                    Variable
                      (31,
                        OCaml.List.fold_left2),
                    [
                      Function
                        (31,
                          s,
                          Function
                            (31,
                              x,
                              Function
                                (31,
                                  y,
                                  Apply
                                    (31,
                                      Variable
                                        (31,
                                          Z.add),
                                      [
                                        Apply
                                          (31,
                                            Variable
                                              (31,
                                                Z.add),
                                            [
                                              Variable
                                                (31,
                                                  s);
                                              Variable
                                                (31,
                                                  x)
                                            ]);
                                        Variable
                                          (31,
                                            y)
                                      ]))));
                      Constant
                        (31,
                          Int(0));
                      Variable
                        (31,
                          l2);
                      Variable
                        (31,
                          l2)
                    ]))
            ]))
    ])

32
Value
  (non_rec, @.,
    [
      ((fr2, [ A ], [ (x_1, A) ],
        Monad ([ Type (OCaml.Invalid_argument) ], Type (Z))),
        Match
          (32, Variable (?, x_1),
            [
              (Any,
                Apply
                  (32,
                    Variable
                      (32,
                        OCaml.List.fold_right2),
                    [
                      Function
                        (32,
                          s,
                          Function
                            (32,
                              x,
                              Function
                                (32,
                                  y,
                                  Apply
                                    (32,
                                      Variable
                                        (32,
                                          Z.add),
                                      [
                                        Apply
                                          (32,
                                            Variable
                                              (32,
                                                Z.add),
                                            [
                                              Variable
                                                (32,
                                                  s);
                                              Variable
                                                (32,
                                                  x)
                                            ]);
                                        Variable
                                          (32,
                                            y)
                                      ]))));
                      Variable
                        (32,
                          l2);
                      Variable
                        (32,
                          l2);
                      Constant
                        (32,
                          Int(0))
                    ]))
            ]))
    ])

35
Value
  (non_rec, @.,
    [
      ((all, [ ], [ ], Type (bool)),
        Apply
          (35, Variable (35, OCaml.List.for_all),
            [
              Function
                (35, x,
                  Apply
                    (35,
                      Variable
                        (35,
                          equiv_decb),
                      [
                        Variable
                          (35,
                            x);
                        Constant
                          (35,
                            Int(2))
                      ]));
              Variable (35, l2)
            ]))
    ])

36
Value
  (non_rec, @.,
    [
      ((ex, [ ], [ ], Type (bool)),
        Apply
          (36, Variable (36, OCaml.List._exists),
            [
              Function
                (36, x,
                  Apply
                    (36,
                      Variable
                        (36,
                          equiv_decb),
                      [
                        Variable
                          (36,
                            x);
                        Constant
                          (36,
                            Int(2))
                      ]));
              Variable (36, l2)
            ]))
    ])

37
Value
  (non_rec, @.,
    [
      ((all2, [ A ], [ (x_1, A) ],
        Monad ([ Type (OCaml.Invalid_argument) ], Type (bool))),
        Match
          (37, Variable (?, x_1),
            [
              (Any,
                Apply
                  (37,
                    Variable
                      (37,
                        OCaml.List.for_all2),
                    [
                      Function
                        (37,
                          x,
                          Function
                            (37,
                              y,
                              Apply
                                (37,
                                  Variable
                                    (37,
                                      equiv_decb),
                                  [
                                    Variable
                                      (37,
                                        x);
                                    Variable
                                      (37,
                                        y)
                                  ])));
                      Variable
                        (37,
                          l2);
                      Variable
                        (37,
                          l2)
                    ]))
            ]))
    ])

38
Value
  (non_rec, @.,
    [
      ((ex2, [ A ], [ (x_1, A) ],
        Monad ([ Type (OCaml.Invalid_argument) ], Type (bool))),
        Match
          (38, Variable (?, x_1),
            [
              (Any,
                Apply
                  (38,
                    Variable
                      (38,
                        OCaml.List._exists2),
                    [
                      Function
                        (38,
                          x,
                          Function
                            (38,
                              y,
                              Apply
                                (38,
                                  Variable
                                    (38,
                                      equiv_decb),
                                  [
                                    Variable
                                      (38,
                                        x);
                                    Variable
                                      (38,
                                        y)
                                  ])));
                      Variable
                        (38,
                          l2);
                      Variable
                        (38,
                          l2)
                    ]))
            ]))
    ])

39
Value
  (non_rec, @.,
    [
      ((me, [ ], [ ], Type (bool)),
        Apply
          (39, Variable (39, OCaml.List.mem),
            [ Constant (39, Int(2)); Variable (39, l2) ]))
    ])

43
Value
  (non_rec, @.,
    [
      ((fin, [ A ], [ (x_1, A) ], Monad ([ Type (OCaml.Not_found) ], Type (Z))),
        Match
          (43, Variable (?, x_1),
            [
              (Any,
                Apply
                  (43,
                    Variable
                      (43,
                        OCaml.List.find),
                    [
                      Function
                        (43,
                          x,
                          Apply
                            (43,
                              Variable
                                (43,
                                  equiv_decb),
                              [
                                Variable
                                  (43,
                                    x);
                                Constant
                                  (43,
                                    Int(1))
                              ]));
                      Variable
                        (43,
                          l2)
                    ]))
            ]))
    ])

44
Value
  (non_rec, @.,
    [
      ((fil, [ ], [ ], Type (list, Type (Z))),
        Apply
          (44, Variable (44, OCaml.List.filter),
            [
              Function
                (44, x,
                  Apply
                    (44,
                      Variable
                        (44,
                          OCaml.Pervasives.ge),
                      [
                        Variable
                          (44,
                            x);
                        Constant
                          (44,
                            Int(2))
                      ]));
              Variable (44, l2)
            ]))
    ])

45
Value
  (non_rec, @.,
    [
      ((fina, [ ], [ ], Type (list, Type (Z))),
        Apply
          (45, Variable (45, OCaml.List.find_all),
            [
              Function
                (45, x,
                  Apply
                    (45,
                      Variable
                        (45,
                          OCaml.Pervasives.ge),
                      [
                        Variable
                          (45,
                            x);
                        Constant
                          (45,
                            Int(2))
                      ]));
              Variable (45, l2)
            ]))
    ])

46
Value
  (non_rec, @.,
    [
      ((par, [ ], [ ], (Type (list, Type (Z)) * Type (list, Type (Z)))),
        Apply
          (46, Variable (46, OCaml.List.partition),
            [
              Function
                (46, x,
                  Apply
                    (46,
                      Variable
                        (46,
                          OCaml.Pervasives.gt),
                      [
                        Variable
                          (46,
                            x);
                        Constant
                          (46,
                            Int(2))
                      ]));
              Variable (46, l2)
            ]))
    ])

49
Value
  (non_rec, @.,
    [
      ((asso, [ A ], [ (x_1, A) ],
        Monad ([ Type (OCaml.Not_found) ], Type (string))),
        Match
          (49, Variable (?, x_1),
            [
              (Any,
                Apply
                  (49,
                    Variable
                      (49,
                        OCaml.List.assoc),
                    [
                      Constant
                        (49,
                          Int(2));
                      Variable
                        (49,
                          l3)
                    ]))
            ]))
    ])

51
Value
  (non_rec, @.,
    [
      ((masso, [ A ], [ (x_1, A) ], Type (bool)),
        Match
          (51, Variable (?, x_1),
            [
              (Any,
                Apply
                  (51,
                    Variable
                      (51,
                        OCaml.List.mem_assoc),
                    [
                      Constant
                        (51,
                          Int(2));
                      Variable
                        (51,
                          l3)
                    ]))
            ]))
    ])

53
Value
  (non_rec, @.,
    [
      ((rasso, [ A ], [ (x_1, A) ], Type (list, (Type (Z) * Type (string)))),
        Match
          (53, Variable (?, x_1),
            [
              (Any,
                Apply
                  (53,
                    Variable
                      (53,
                        OCaml.List.remove_assoc),
                    [
                      Constant
                        (53,
                          Int(2));
                      Variable
                        (53,
                          l3)
                    ]))
            ]))
    ])

57
Value
  (non_rec, @.,
    [
      ((sp, [ ], [ ], (Type (list, Type (Z)) * Type (list, Type (string)))),
        Apply (57, Variable (57, OCaml.List.split), [ Variable (57, l3) ]))
    ])

58
Value
  (non_rec, @.,
    [
      ((com, [ A ], [ (x_1, A) ],
        Monad
          ([ Type (OCaml.Invalid_argument) ],
            Type (list, (Type (Z) * Type (Z))))),
        Match
          (58, Variable (?, x_1),
            [
              (Any,
                Apply
                  (58,
                    Variable
                      (58,
                        OCaml.List.combine),
                    [
                      Variable
                        (58,
                          l2);
                      Variable
                        (58,
                          l2)
                    ]))
            ]))
    ])

61
Value
  (non_rec, @.,
    [
      ((so, [ A ], [ (x_1, A) ],
        Monad
          ([ Type (Counter); Type (NonTermination) ], Type (list, Type (Z)))),
        Match
          (61, Variable (?, x_1),
            [
              (Any,
                Apply
                  (61,
                    Variable
                      (61,
                        OCaml.List.sort),
                    [
                      Function
                        (61,
                          x,
                          Function
                            (61,
                              y,
                              Apply
                                (61,
                                  Variable
                                    (61,
                                      Z.sub),
                                  [
                                    Variable
                                      (61,
                                        y);
                                    Variable
                                      (61,
                                        x)
                                  ])));
                      Variable
                        (61,
                          l2)
                    ]))
            ]))
    ])

62
Value
  (non_rec, @.,
    [
      ((sso, [ A ], [ (x_1, A) ],
        Monad
          ([ Type (Counter); Type (NonTermination) ], Type (list, Type (Z)))),
        Match
          (62, Variable (?, x_1),
            [
              (Any,
                Apply
                  (62,
                    Variable
                      (62,
                        OCaml.List.stable_sort),
                    [
                      Function
                        (62,
                          x,
                          Function
                            (62,
                              y,
                              Apply
                                (62,
                                  Variable
                                    (62,
                                      Z.sub),
                                  [
                                    Variable
                                      (62,
                                        y);
                                    Variable
                                      (62,
                                        x)
                                  ])));
                      Variable
                        (62,
                          l2)
                    ]))
            ]))
    ])

63
Value
  (non_rec, @.,
    [
      ((fso, [ A ], [ (x_1, A) ],
        Monad
          ([ Type (Counter); Type (NonTermination) ], Type (list, Type (Z)))),
        Match
          (63, Variable (?, x_1),
            [
              (Any,
                Apply
                  (63,
                    Variable
                      (63,
                        OCaml.List.fast_sort),
                    [
                      Function
                        (63,
                          x,
                          Function
                            (63,
                              y,
                              Apply
                                (63,
                                  Variable
                                    (63,
                                      Z.sub),
                                  [
                                    Variable
                                      (63,
                                        y);
                                    Variable
                                      (63,
                                        x)
                                  ])));
                      Variable
                        (63,
                          l2)
                    ]))
            ]))
    ])

64
Value
  (non_rec, @.,
    [
      ((mer, [ ], [ ], Type (list, Type (Z))),
        Apply
          (64, Variable (64, OCaml.List.merge),
            [
              Function
                (64, x,
                  Function
                    (64,
                      y,
                      Apply
                        (64,
                          Variable
                            (64,
                              Z.sub),
                          [
                            Variable
                              (64,
                                y);
                            Variable
                              (64,
                                x)
                          ])));
              Variable (64, l2);
              Constructor
                (64, cons, Constant (64, Int(2)),
                  Constructor
                    (64,
                      cons,
                      Constant
                        (64,
                          Int(-1)),
                      Constructor
                        (64,
                          cons,
                          Constant
                            (64,
                              Int(5)),
                          Constructor
                            (64,
                              []))))
            ]))
    ])
