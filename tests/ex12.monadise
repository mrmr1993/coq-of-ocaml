3
Inductive tree:
  ([ ], [ (Leaf, [ ]); (Node, [ Type (tree); Type (Z); Type (tree) ]) ])

7
Value
  (rec, @.,
    [
      ((find_rec, [ ],
        [ (counter, Type (nat)); (x, Type (Z)); (t, Type (tree)) ],
        Monad ([ Type (NonTermination) ], Type (bool))),
        Match
          (?, Variable (?, counter),
            [
              (Constructor (O),
                Apply
                  (?,
                    Variable
                      (?,
                        not_terminated),
                    [
                      Tuple
                        (?)
                    ]));
              (Constructor (S, counter),
                Match
                  (8, Variable (8, t),
                    [
                      (Constructor
                        (Leaf),
                        Return
                          (?,
                            Constructor
                              (9,
                                false)));
                      (Constructor
                        (Node,
                          t1,
                          x',
                          t2),
                        IfThenElse
                          (11,
                            Apply
                              (11,
                                Variable
                                  (11,
                                    OCaml.Pervasives.lt),
                                [
                                  Variable
                                    (11,
                                      x);
                                  Variable
                                    (11,
                                      x')
                                ]),
                            Apply
                              (12,
                                Apply
                                  (?,
                                    Variable
                                      (?,
                                        find_rec),
                                    [
                                      Variable
                                        (?,
                                          counter)
                                    ]),
                                [
                                  Variable
                                    (12,
                                      x);
                                  Variable
                                    (12,
                                      t1)
                                ]),
                            IfThenElse
                              (13,
                                Apply
                                  (13,
                                    Variable
                                      (13,
                                        OCaml.Pervasives.lt),
                                    [
                                      Variable
                                        (13,
                                          x');
                                      Variable
                                        (13,
                                          x)
                                    ]),
                                Apply
                                  (14,
                                    Apply
                                      (?,
                                        Variable
                                          (?,
                                            find_rec),
                                        [
                                          Variable
                                            (?,
                                              counter)
                                        ]),
                                    [
                                      Variable
                                        (14,
                                          x);
                                      Variable
                                        (14,
                                          t2)
                                    ]),
                                Return
                                  (?,
                                    Constructor
                                      (16,
                                        true)))))
                    ]))
            ]))
    ])

7
Value
  (non_rec, @.,
    [
      ((find, [ ], [ (x, Type (Z)); (t, Type (tree)) ],
        Monad ([ Type (Counter); Type (NonTermination) ], Type (bool))),
        Bind
          (?,
            Lift
              (?, [ Type (Counter) ],
                [ Type (Counter); Type (NonTermination) ],
                Apply (?, Variable (?, read_counter), [ Tuple (?) ])),
            Some x_1,
            Lift
              (?, [ Type (NonTermination) ],
                [ Type (Counter); Type (NonTermination) ],
                Apply
                  (?, Variable (?, find_rec),
                    [
                      Variable (?, x_1);
                      Variable (?, x);
                      Variable (?, t)
                    ]))))
    ])
