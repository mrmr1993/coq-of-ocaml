3 Exception (Fail, fail, (Type (string)))

5
Value
  (non_rec, @.,
    [
      ((div, [ ], [ (n, Type (Z)) ],
        Monad ([ Type (OCaml.exception, Type (fail)) ], Type (Z))),
        IfThenElse
          ((6, Effect ([ Type (OCaml.exception, Type (fail)) ], .)),
            Apply
              ((6, Effect ([ ], .)),
                Variable ((6, Effect ([ ], . -> . -> .)), equiv_decb),
                [
                  Variable ((6, Effect ([ ], .)), n);
                  Constant ((6, Effect ([ ], .)), Int(0))
                ]),
            Apply
              ((7, Effect ([ Type (OCaml.exception, Type (fail)) ], .)),
                Variable
                  ((7,
                    Effect
                      ([ ],
                        .
                          -[
                            Type
                              (OCaml.exception,
                                Type
                                  (fail))
                          ]-> .)), OCaml.Pervasives.raise),
                [
                  Constructor
                    ((7, Effect ([ ], .)),
                      Fail,
                      Tuple
                        ((?,
                          Effect
                            ([
                            ],
                              .)),
                          Constant
                            ((7,
                              Effect
                                ([
                                ],
                                  .)),
                              String("n is null"))))
                ]),
            Apply
              ((9, Effect ([ ], .)),
                Variable ((9, Effect ([ ], . -> . -> .)), Z.div),
                [
                  Constant ((9, Effect ([ ], .)), Int(256));
                  Variable ((9, Effect ([ ], .)), n)
                ])))
    ])
