Require [ OCaml.List ]

3
Value
  (non_rec, @.,
    [
      ((get_local_ref, [ ], [ (tt (= tt_1), Type (unit)) ], Type (Z)),
        LetVar 4 x =
          Apply
            (4, Variable (4, OCaml.Pervasives.ref),
              [ Constant (4, Int(12)) ]) in
        Apply (5, Variable (5, OCaml.Effect.State.read), [ Variable (5, x) ]))
    ])

7
Value
  (non_rec, @.,
    [
      ((set_local_ref, [ ], [ (tt (= tt_1), Type (unit)) ], Type (Z)),
        LetVar 8 x =
          Apply
            (8, Variable (8, OCaml.Pervasives.ref),
              [ Constant (8, Int(12)) ]) in
        Sequence
          (9,
            Apply
              (9, Variable (9, OCaml.Effect.State.write),
                [ Variable (9, x); Constant (9, Int(15)) ]),
            Apply
              (10, Variable (10, OCaml.Effect.State.read),
                [ Variable (10, x) ])))
    ])

12
Value
  (non_rec, @.,
    [
      ((add_multiple_by_refs, [ ],
        [ (a, Type (Z)); (b, Type (Z)); (c, Type (Z)); (d, Type (Z)) ],
        Type (Z)),
        LetVar 13 x =
          Apply
            (13, Variable (13, OCaml.Pervasives.ref), [ Variable (13, a) ])
          in
        Sequence
          (14,
            Apply
              (14, Variable (14, OCaml.Effect.State.write),
                [
                  Variable (14, x);
                  Apply
                    (14,
                      Variable
                        (14,
                          Z.add),
                      [
                        Apply
                          (14,
                            Variable
                              (14,
                                OCaml.Effect.State.read),
                            [
                              Variable
                                (14,
                                  x)
                            ]);
                        Variable
                          (14,
                            b)
                      ])
                ]),
            LetVar 15 y =
              Apply
                (15, Variable (15, OCaml.Pervasives.ref),
                  [ Variable (15, c) ]) in
            Sequence
              (16,
                Apply
                  (16, Variable (16, OCaml.Effect.State.write),
                    [
                      Variable (16, y);
                      Apply
                        (16,
                          Variable
                            (16,
                              Z.add),
                          [
                            Apply
                              (16,
                                Variable
                                  (16,
                                    OCaml.Effect.State.read),
                                [
                                  Variable
                                    (16,
                                      y)
                                ]);
                            Variable
                              (16,
                                d)
                          ])
                    ]),
                LetVar 17 z =
                  Apply
                    (17, Variable (17, OCaml.Pervasives.ref),
                      [
                        Apply
                          (17,
                            Variable
                              (17,
                                Z.add),
                            [
                              Apply
                                (17,
                                  Variable
                                    (17,
                                      OCaml.Effect.State.read),
                                  [
                                    Variable
                                      (17,
                                        x)
                                  ]);
                              Apply
                                (17,
                                  Variable
                                    (17,
                                      OCaml.Effect.State.read),
                                  [
                                    Variable
                                      (17,
                                        y)
                                  ])
                            ])
                      ]) in
                Apply
                  (18, Variable (18, OCaml.Effect.State.read),
                    [ Variable (18, z) ]))))
    ])

20
Value
  (non_rec, @.,
    [
      ((set_ref, [ ], [ (x, Type (OCaml.Effect.State.t, Type (Z))) ],
        Type (unit)),
        Apply
          (21, Variable (21, OCaml.Effect.State.write),
            [ Variable (21, x); Constant (21, Int(15)) ]))
    ])

23
Value
  (non_rec, @.,
    [
      ((get_ref, [ ], [ (x, Type (OCaml.Effect.State.t, Type (Z))) ], Type (Z)),
        Apply
          (24, Variable (24, OCaml.Effect.State.read), [ Variable (24, x) ]))
    ])

26
Value
  (non_rec, @.,
    [
      ((update_ref, [ ], [ (x, Type (OCaml.Effect.State.t, Type (Z))) ],
        Type (unit)),
        Apply
          (27, Variable (27, OCaml.Effect.State.write),
            [
              Variable (27, x);
              Apply
                (27, Variable (27, Z.add),
                  [
                    Apply
                      (27,
                        Variable
                          (27,
                            OCaml.Effect.State.read),
                        [
                          Variable
                            (27,
                              x)
                        ]);
                    Constant
                      (27,
                        Int(5))
                  ])
            ]))
    ])

29
Value
  (non_rec, @.,
    [
      ((new_ref, [ ], [ (x, Type (unit)) ],
        Type (OCaml.Effect.State.t, Type (Z))),
        Apply
          (30, Variable (30, OCaml.Pervasives.ref),
            [ Constant (30, Int(15)) ]))
    ])

32 Reference (r, r_state, Type (Z), Constant (32, Int(18)))

34
Value
  (non_rec, @.,
    [
      ((set_r, [ ], [ (x, Type (unit)) ], Type (unit)),
        Apply (34, Variable (34, set_ref), [ Variable (34, r) ]))
    ])

36
Value
  (non_rec, @.,
    [
      ((get_r, [ ], [ (x, Type (unit)) ], Type (Z)),
        Apply (36, Variable (36, get_ref), [ Variable (36, r) ]))
    ])

38
Value
  (non_rec, @.,
    [
      ((r_add_15, [ ], [ (x, Type (unit)) ], Type (Z)),
        LetVar 39 i =
          Apply (39, Variable (39, get_r), [ Constructor (39, tt) ]) in
        Sequence
          (40, Apply (40, Variable (40, set_r), [ Constructor (40, tt) ]),
            LetVar 41 j =
              Apply (41, Variable (41, get_r), [ Constructor (41, tt) ])
              in
            Sequence
              (42,
                Apply
                  (42, Variable (42, OCaml.Effect.State.write),
                    [
                      Variable (42, r);
                      Apply
                        (42,
                          Variable
                            (42,
                              Z.add),
                          [
                            Variable
                              (42,
                                i);
                            Variable
                              (42,
                                j)
                          ])
                    ]),
                Apply
                  (43, Variable (43, OCaml.Effect.State.read),
                    [ Variable (43, r) ]))))
    ])

45
Value
  (non_rec, @.,
    [
      ((mixed_type, [ ], [ (x, Type (unit)) ],
        (Type (bool) * Type (string) * Type (Z))),
        LetVar 46 b =
          Apply
            (46, Variable (46, OCaml.Pervasives.ref),
              [ Constructor (46, true) ]) in
        LetVar 47 str =
          Apply
            (47, Variable (47, OCaml.Pervasives.ref),
              [ Constant (47, String("")) ]) in
        LetFun 48
          (non_rec, @.,
            [
              ((update, [ ], [ (x_1, Type (unit)) ], Type (unit)),
                Match
                  (?, Variable (?, x_1),
                    [
                      (Constructor
                        (tt),
                        Sequence
                          (49,
                            Apply
                              (49,
                                Variable
                                  (49,
                                    OCaml.Effect.State.write),
                                [
                                  Variable
                                    (49,
                                      b);
                                  Apply
                                    (49,
                                      Variable
                                        (49,
                                          OCaml.Effect.State.read),
                                      [
                                        Variable
                                          (49,
                                            b)
                                      ])
                                ]),
                            Apply
                              (50,
                                Variable
                                  (50,
                                    OCaml.Effect.State.write),
                                [
                                  Variable
                                    (50,
                                      str);
                                  Apply
                                    (50,
                                      Variable
                                        (50,
                                          String.append),
                                      [
                                        Constant
                                          (50,
                                            String("toggle "));
                                        Apply
                                          (50,
                                            Variable
                                              (50,
                                                OCaml.Effect.State.read),
                                            [
                                              Variable
                                                (50,
                                                  str)
                                            ])
                                      ])
                                ])))
                    ]))
            ]) in
        Sequence
          (51, Apply (51, Variable (51, update), [ Constructor (51, tt) ]),
            Sequence
              (52,
                Apply
                  (52, Variable (52, update),
                    [ Constructor (52, tt) ]),
                Sequence
                  (53,
                    Apply
                      (53, Variable (53, update),
                        [ Constructor (53, tt) ]),
                    Tuple
                      (54,
                        Apply
                          (54,
                            Variable
                              (54,
                                OCaml.Effect.State.read),
                            [ Variable (54, b) ]),
                        Apply
                          (54,
                            Variable
                              (54,
                                OCaml.Effect.State.read),
                            [ Variable (54, str) ]),
                        Apply
                          (54,
                            Variable
                              (54,
                                OCaml.Effect.State.read),
                            [ Variable (54, r) ]))))))
    ])

56
Value
  (non_rec, @.,
    [
      ((partials_test, [ ], [ (x, Type (unit)) ],
        Type (OCaml.Effect.State.t, Type (Z))),
        Match
          (?, Variable (?, x),
            [
              (Constructor (tt),
                LetFun 57
                  (non_rec, @.,
                    [
                      ((f1,
                        [
                        ],
                        [
                          (x,
                            Type
                              (OCaml.Effect.State.t,
                                Type
                                  (Z)));
                          (y,
                            Type
                              (Z))
                        ],
                        Type
                          (OCaml.Effect.State.t,
                            Type
                              (Z))),
                        Sequence
                          (58,
                            Apply
                              (58,
                                Variable
                                  (58,
                                    OCaml.Effect.State.write),
                                [
                                  Variable
                                    (58,
                                      x);
                                  Variable
                                    (58,
                                      y)
                                ]),
                            Variable
                              (59,
                                x)))
                    ])
                  in
                LetVar 60 f1_test =
                  Apply
                    (60,
                      Variable
                        (60,
                          f1),
                      [
                        Variable
                          (60,
                            r)
                      ])
                  in
                LetVar 61 f1_test =
                  Apply
                    (61,
                      Variable
                        (61,
                          f1_test),
                      [
                        Constant
                          (61,
                            Int(15))
                      ])
                  in
                LetFun 62
                  (non_rec, @.,
                    [
                      ((f2,
                        [
                        ],
                        [
                          (l1,
                            Type
                              (OCaml.Effect.State.t,
                                Type
                                  (list,
                                    Type
                                      (Z))));
                          (l2,
                            Type
                              (list,
                                Type
                                  (string)))
                        ],
                        Type
                          (OCaml.Effect.State.t,
                            Type
                              (Z))),
                        Apply
                          (63,
                            Variable
                              (63,
                                OCaml.Pervasives.ref),
                            [
                              Apply
                                (63,
                                  Variable
                                    (63,
                                      Z.add),
                                  [
                                    Apply
                                      (63,
                                        Variable
                                          (63,
                                            OCaml.List.length),
                                        [
                                          Apply
                                            (63,
                                              Variable
                                                (63,
                                                  OCaml.Effect.State.read),
                                              [
                                                Variable
                                                  (63,
                                                    l1)
                                              ])
                                        ]);
                                    Apply
                                      (63,
                                        Variable
                                          (63,
                                            OCaml.List.length),
                                        [
                                          Variable
                                            (63,
                                              l2)
                                        ])
                                  ])
                            ]))
                    ])
                  in
                LetVar 64 f2_test =
                  Apply
                    (64,
                      Variable
                        (64,
                          f2),
                      [
                        Apply
                          (64,
                            Variable
                              (64,
                                OCaml.Pervasives.ref),
                            [
                              Constructor
                                (64,
                                  cons,
                                  Constant
                                    (64,
                                      Int(1)),
                                  Constructor
                                    (64,
                                      cons,
                                      Constant
                                        (64,
                                          Int(2)),
                                      Constructor
                                        (64,
                                          cons,
                                          Constant
                                            (64,
                                              Int(3)),
                                          Constructor
                                            (64,
                                              []))))
                            ])
                      ])
                  in
                LetVar 65 f2_test =
                  Apply
                    (65,
                      Variable
                        (65,
                          f2_test),
                      [
                        Constructor
                          (65,
                            cons,
                            Constant
                              (65,
                                String("hi")),
                            Constructor
                              (65,
                                cons,
                                Constant
                                  (65,
                                    String("hey")),
                                Constructor
                                  (65,
                                    [])))
                      ])
                  in
                Apply
                  (66,
                    Variable
                      (66,
                        f1),
                    [
                      Variable
                        (66,
                          f2_test);
                      Apply
                        (66,
                          Variable
                            (66,
                              OCaml.Effect.State.read),
                          [
                            Variable
                              (66,
                                f1_test)
                          ])
                    ]))
            ]))
    ])

68
Value
  (non_rec, @.,
    [
      ((multiple_returns_test, [ ], [ (x, Type (unit)) ],
        (Type (Z) * Type (OCaml.Effect.State.t, Type (Z)))),
        Match
          (?, Variable (?, x),
            [
              (Constructor (tt),
                LetFun 69
                  (non_rec, @.,
                    [
                      ((f,
                        [
                        ],
                        [
                          (x,
                            Type
                              (OCaml.Effect.State.t,
                                Type
                                  (Z)));
                          (y,
                            Type
                              (Z))
                        ],
                        (Type
                          (Z)
                          ->
                          (Type
                            (OCaml.Effect.State.t,
                              Type
                                (Z))
                            ->
                            Type
                              (OCaml.Effect.State.t,
                                Type
                                  (Z))))),
                        Sequence
                          (70,
                            Apply
                              (70,
                                Variable
                                  (70,
                                    OCaml.Effect.State.write),
                                [
                                  Variable
                                    (70,
                                      x);
                                  Variable
                                    (70,
                                      y)
                                ]),
                            Function
                              (71,
                                z,
                                Sequence
                                  (71,
                                    Apply
                                      (72,
                                        Variable
                                          (72,
                                            OCaml.Effect.State.write),
                                        [
                                          Variable
                                            (72,
                                              x);
                                          Apply
                                            (72,
                                              Variable
                                                (72,
                                                  Z.add),
                                              [
                                                Apply
                                                  (72,
                                                    Variable
                                                      (72,
                                                        OCaml.Effect.State.read),
                                                    [
                                                      Variable
                                                        (72,
                                                          x)
                                                    ]);
                                                Variable
                                                  (72,
                                                    z)
                                              ])
                                        ]),
                                    Function
                                      (73,
                                        w,
                                        LetVar
                                          73
                                          tmp
                                          =
                                          Apply
                                            (74,
                                              Variable
                                                (74,
                                                  OCaml.Effect.State.read),
                                              [
                                                Variable
                                                  (74,
                                                    w)
                                              ])
                                          in
                                        Sequence
                                          (75,
                                            Apply
                                              (75,
                                                Variable
                                                  (75,
                                                    OCaml.Effect.State.write),
                                                [
                                                  Variable
                                                    (75,
                                                      w);
                                                  Apply
                                                    (75,
                                                      Variable
                                                        (75,
                                                          Z.mul),
                                                      [
                                                        Constant
                                                          (75,
                                                            Int(2));
                                                        Apply
                                                          (75,
                                                            Variable
                                                              (75,
                                                                OCaml.Effect.State.read),
                                                            [
                                                              Variable
                                                                (75,
                                                                  x)
                                                            ])
                                                      ])
                                                ]),
                                            Sequence
                                              (76,
                                                Apply
                                                  (76,
                                                    Variable
                                                      (76,
                                                        OCaml.Effect.State.write),
                                                    [
                                                      Variable
                                                        (76,
                                                          x);
                                                      Variable
                                                        (76,
                                                          tmp)
                                                    ]),
                                                Variable
                                                  (77,
                                                    x))))))))
                    ])
                  in
                LetVar 80 s =
                  Apply
                    (80,
                      Variable
                        (80,
                          OCaml.Pervasives.ref),
                      [
                        Constant
                          (80,
                            Int(110))
                      ])
                  in
                LetVar 81 f1 =
                  Apply
                    (81,
                      Variable
                        (81,
                          f),
                      [
                        Apply
                          (81,
                            Variable
                              (81,
                                OCaml.Pervasives.ref),
                            [
                              Constant
                                (81,
                                  Int(5))
                            ])
                      ])
                  in
                LetVar 82 f2 =
                  Apply
                    (82,
                      Variable
                        (82,
                          f1),
                      [
                        Constant
                          (82,
                            Int(2))
                      ])
                  in
                LetVar 83 f3 =
                  Apply
                    (83,
                      Variable
                        (83,
                          f2),
                      [
                        Constant
                          (83,
                            Int(7))
                      ])
                  in
                LetVar 84 f4 =
                  Apply
                    (84,
                      Variable
                        (84,
                          f3),
                      [
                        Variable
                          (84,
                            s)
                      ])
                  in
                Tuple
                  (85,
                    Apply
                      (85,
                        Variable
                          (85,
                            OCaml.Effect.State.read),
                        [
                          Variable
                            (85,
                              f4)
                        ]),
                    Variable
                      (85,
                        s)))
            ]))
    ])

87
Value
  (non_rec, @.,
    [
      ((type_vars_test, [ A; B ],
        [
          (x, Type (OCaml.Effect.State.t, A));
          (y, Type (OCaml.Effect.State.t, B));
          (a, A);
          (b, B)
        ], Type (unit)),
        Sequence
          (88,
            Apply
              (88, Variable (88, OCaml.Effect.State.write),
                [ Variable (88, x); Variable (88, a) ]),
            Apply
              (89, Variable (89, OCaml.Effect.State.write),
                [ Variable (89, y); Variable (89, b) ])))
    ])

91
Value
  (non_rec, @.,
    [
      ((resolves_test1, [ A ],
        [ (x, Type (OCaml.Effect.State.t, A)); (a, A); (b, A) ], Type (unit)),
        Apply
          (92, Variable (92, type_vars_test),
            [
              Variable (92, x);
              Variable (92, x);
              Variable (92, a);
              Variable (92, b)
            ]))
    ])

94
Value
  (non_rec, @.,
    [
      ((resolves_test2, [ A ],
        [
          (x, Type (OCaml.Effect.State.t, Type (Z)));
          (y, Type (OCaml.Effect.State.t, A));
          (a, Type (Z));
          (b, A)
        ], Type (unit)),
        Apply
          (95, Variable (95, type_vars_test),
            [
              Variable (95, x);
              Variable (95, y);
              Variable (95, a);
              Variable (95, b)
            ]))
    ])

97
Value
  (non_rec, @.,
    [
      ((resolves_test3, [ ],
        [
          (x, Type (OCaml.Effect.State.t, Type (Z)));
          (y, Type (OCaml.Effect.State.t, Type (Z)));
          (a, Type (Z));
          (b, Type (Z))
        ], Type (unit)),
        Apply
          (98, Variable (98, type_vars_test),
            [
              Variable (98, x);
              Variable (98, y);
              Variable (98, a);
              Variable (98, b)
            ]))
    ])
