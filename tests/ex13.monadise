3
Value
  (non_rec, @.,
    [
      ((tail, [ A ], [ (l, Type (list, A)) ],
        Monad
          ([ Type (OCaml.exception, Type (OCaml.failure)) ], Type (list, A))),
        Match
          (4, Variable (4, l),
            [
              (Constructor (cons, Any, xs),
                Return (?, Variable (5, xs)));
              (Constructor ([]),
                Apply
                  (6,
                    Variable
                      (6,
                        OCaml.Pervasives.failwith),
                    [
                      Constant
                        (6,
                          String("Cannot take the tail of an empty list."))
                    ]))
            ]))
    ])

8
Value
  (rec, @.,
    [
      ((print_list_rec, [ ],
        [ (counter, Type (nat)); (x, Type (list, Type (string))) ],
        Monad ([ Type (IO); Type (NonTermination) ], Type (unit))),
        Match
          (?, Variable (?, counter),
            [
              (Constructor (O),
                Lift
                  (?,
                    [
                      Type
                        (NonTermination)
                    ],
                    [
                      Type
                        (IO);
                      Type
                        (NonTermination)
                    ],
                    Apply
                      (?,
                        Variable
                          (?,
                            not_terminated),
                        [
                          Tuple
                            (?)
                        ])));
              (Constructor (S, counter),
                Match
                  (9, Variable (?, x),
                    [
                      (Constructor
                        ([]),
                        Return
                          (?,
                            Constructor
                              (9,
                                tt)));
                      (Constructor
                        (cons,
                          x,
                          xs),
                        Bind
                          (?,
                            Lift
                              (?,
                                [
                                  Type
                                    (IO)
                                ],
                                [
                                  Type
                                    (IO);
                                  Type
                                    (NonTermination)
                                ],
                                Apply
                                  (11,
                                    Variable
                                      (11,
                                        OCaml.Pervasives.print_string),
                                    [
                                      Variable
                                        (11,
                                          x)
                                    ])),
                            None,
                            Apply
                              (12,
                                Apply
                                  (?,
                                    Variable
                                      (?,
                                        print_list_rec),
                                    [
                                      Variable
                                        (?,
                                          counter)
                                    ]),
                                [
                                  Variable
                                    (12,
                                      xs)
                                ])))
                    ]))
            ]))
    ])

8
Value
  (non_rec, @.,
    [
      ((print_list, [ ], [ (x, Type (list, Type (string))) ],
        Monad
          ([ Type (Counter); Type (IO); Type (NonTermination) ], Type (unit))),
        Bind
          (?,
            Lift
              (?, [ Type (Counter) ],
                [ Type (Counter); Type (IO); Type (NonTermination) ],
                Apply (?, Variable (?, read_counter), [ Tuple (?) ])),
            Some x_1,
            Lift
              (?, [ Type (IO); Type (NonTermination) ],
                [ Type (Counter); Type (IO); Type (NonTermination) ],
                Apply
                  (?, Variable (?, print_list_rec),
                    [ Variable (?, x_1); Variable (?, x) ]))))
    ])

14
Value
  (non_rec, @.,
    [
      ((f, [ ], [ ],
        (Type (list, Type (string)) ->
          Monad
            ([ Type (Counter); Type (IO); Type (NonTermination) ],
              Type (unit)))), Variable (14, print_list))
    ])

16
Value
  (non_rec, @.,
    [
      ((x, [ A ], [ (z, A) ],
        Monad
          ([
            Type (Counter);
            Type (IO);
            Type (NonTermination);
            Type (OCaml.exception, Type (OCaml.failure))
          ], Type (unit))),
        Bind
          (?,
            Lift
              (?, [ Type (OCaml.exception, Type (OCaml.failure)) ],
                [
                  Type (Counter);
                  Type (IO);
                  Type (NonTermination);
                  Type (OCaml.exception, Type (OCaml.failure))
                ],
                Apply
                  (16, Variable (16, tail),
                    [
                      Constructor
                        (16,
                          cons,
                          Constant
                            (16,
                              String("Stop")),
                          Constructor
                            (16,
                              cons,
                              Constant
                                (16,
                                  String("Hello")),
                              Constructor
                                (16,
                                  cons,
                                  Constant
                                    (16,
                                      String(" ")),
                                  Constructor
                                    (16,
                                      cons,
                                      Constant
                                        (16,
                                          String("world")),
                                      Constructor
                                        (16,
                                          [])))))
                    ])), Some x,
            Lift
              (?, [ Type (Counter); Type (IO); Type (NonTermination) ],
                [
                  Type (Counter);
                  Type (IO);
                  Type (NonTermination);
                  Type (OCaml.exception, Type (OCaml.failure))
                ], Apply (16, Variable (16, f), [ Variable (?, x) ]))))
    ])
