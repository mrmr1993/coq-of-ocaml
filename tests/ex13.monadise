3
Value
  (non_rec, @.,
    [
      ((tail, [ A ], [ (l, Type (list/3, A)) ],
        Monad ([ OCaml.Failure/3 ], Type (list/3, A))),
        Match
          (4, Variable (4, l/0),
            [
              (Constructor (cons/3, Any, xs),
                Return (?, Variable (5, xs/0)));
              (Constructor ([]/3),
                Apply
                  (6,
                    Variable
                      (6,
                        OCaml.Pervasives.failwith/3),
                    [
                      Constant
                        (6,
                          String("Cannot take the tail of an empty list."))
                    ]))
            ]))
    ])

8
Value
  (rec, @.,
    [
      ((print_list_rec, [ ],
        [ (counter, Type (nat/3)); (x, Type (list/3, Type (string/3))) ],
        Monad ([ IO/3; NonTermination/3 ], Type (unit/3))),
        Match
          (?, Variable (?, counter/0),
            [
              (Constructor (O/3),
                Lift
                  (?,
                    [
                      NonTermination/3
                    ],
                    [
                      IO/3;
                      NonTermination/3
                    ],
                    Apply
                      (?,
                        Variable
                          (?,
                            not_terminated/3),
                        [
                          Tuple
                            (?)
                        ])));
              (Constructor (S/3, counter),
                Match
                  (?, Variable (?, x/0),
                    [
                      (Constructor
                        ([]/3),
                        Return
                          (?,
                            Constructor
                              (9,
                                tt/3)));
                      (Constructor
                        (cons/3,
                          x,
                          xs),
                        Bind
                          (?,
                            Lift
                              (?,
                                [
                                  IO/3
                                ],
                                [
                                  IO/3;
                                  NonTermination/3
                                ],
                                Apply
                                  (11,
                                    Variable
                                      (11,
                                        OCaml.Pervasives.print_string/3),
                                    [
                                      Variable
                                        (11,
                                          x/0)
                                    ])),
                            None,
                            Apply
                              (12,
                                Apply
                                  (?,
                                    Variable
                                      (?,
                                        print_list_rec/0),
                                    [
                                      Variable
                                        (?,
                                          counter/0)
                                    ]),
                                [
                                  Variable
                                    (12,
                                      xs/0)
                                ])))
                    ]))
            ]))
    ])

8
Value
  (non_rec, @.,
    [
      ((print_list, [ ], [ (x, Type (list/3, Type (string/3))) ],
        Monad ([ Counter/3; IO/3; NonTermination/3 ], Type (unit/3))),
        Bind
          (?,
            Lift
              (?, [ Counter/3 ], [ Counter/3; IO/3; NonTermination/3 ],
                Apply (?, Variable (?, read_counter/3), [ Tuple (?) ])),
            Some x_1,
            Lift
              (?, [ IO/3; NonTermination/3 ],
                [ Counter/3; IO/3; NonTermination/3 ],
                Apply
                  (?, Variable (?, print_list_rec/0),
                    [ Variable (?, x_1/0); Variable (?, x/0) ]))))
    ])

14
Value
  (non_rec, @.,
    [
      ((f, [ ], [ ],
        (Type (list/3, Type (string/3)) ->
          Monad ([ Counter/3; IO/3; NonTermination/3 ], Type (unit/3)))),
        Variable (14, print_list/0))
    ])

16
Value
  (non_rec, @.,
    [
      ((x, [ A ], [ (z, A) ],
        Monad
          ([ Counter/3; OCaml.Failure/3; IO/3; NonTermination/3 ],
            Type (unit/3))),
        Bind
          (?,
            Lift
              (?, [ OCaml.Failure/3 ],
                [ Counter/3; OCaml.Failure/3; IO/3; NonTermination/3 ],
                Apply
                  (16, Variable (16, tail/0),
                    [
                      Constructor
                        (16,
                          cons/3,
                          Constant
                            (16,
                              String("Stop")),
                          Constructor
                            (16,
                              cons/3,
                              Constant
                                (16,
                                  String("Hello")),
                              Constructor
                                (16,
                                  cons/3,
                                  Constant
                                    (16,
                                      String(" ")),
                                  Constructor
                                    (16,
                                      cons/3,
                                      Constant
                                        (16,
                                          String("world")),
                                      Constructor
                                        (16,
                                          []/3)))))
                    ])), Some x,
            Lift
              (?, [ Counter/3; IO/3; NonTermination/3 ],
                [ Counter/3; OCaml.Failure/3; IO/3; NonTermination/3 ],
                Apply (16, Variable (16, f/0), [ Variable (?, x/0) ]))))
    ])
