3 Module M:
  4
  Value
    (non_rec, @.,
      [
        ((f, [ A; B ], [ (x, A) ], B),
          Match
            (4, Variable (?, M/x),
              [
                (Any,
                  Apply
                    (4,
                      Variable
                        (4,
                          OCaml.Pervasives.failwith),
                      [
                        Constant
                          (4,
                            String("failure"))
                      ]))
              ]))
      ])

7 Module N:
  8
  Value
    (non_rec, @.,
      [
        ((f, [ A; B ], [ (x, A) ], B),
          Match
            (8, Variable (?, N/x),
              [
                (Any,
                  Apply
                    (8,
                      Variable
                        (8,
                          OCaml.assert),
                      [
                        Constructor
                          (8,
                            false)
                      ]))
              ]))
      ])
  
  9
  Value
    (non_rec, @.,
      [
        ((x, [ ], [ ], Type (unit)),
          Match
            (9,
              Run
                (?,
                  Type
                    (OCaml.exception,
                      Type (OCaml.assert_failure)),
                  [ ],
                  Apply
                    (9, Variable (9, N/f),
                      [ Constructor (9, tt) ])),
              [
                (Constructor (inl, x), Variable (?, N/x));
                (Constructor
                  (inr,
                    Constructor
                      (OCaml.Assert_failure,
                        Tuple
                          (Any))),
                  Constructor (9, tt))
              ]))
      ])
  
  10 Open M
  
  11
  Value
    (non_rec, @.,
      [
        ((y, [ ], [ ], Type (unit)),
          Match
            (11,
              Run
                (?,
                  Type
                    (OCaml.exception,
                      Type (OCaml.failure)), [ ],
                  Apply
                    (11, Variable (11, M.f),
                      [ Constructor (11, tt) ])),
              [
                (Constructor (inl, x (= x_1)),
                  Variable (?, N/x_1));
                (Constructor
                  (inr,
                    Constructor
                      (OCaml.Failure,
                        Tuple
                          (Any))),
                  Constructor (11, tt))
              ]))
      ])

14
Value
  (non_rec, @.,
    [
      ((b, [ ], [ ], Type (unit)),
        Match
          (14,
            Run
              (?, Type (OCaml.exception, Type (OCaml.assert_failure)),
                [ ],
                Apply
                  (14, Variable (14, N.f), [ Constructor (14, tt) ])),
            [
              (Constructor (inl, x), Variable (?, x));
              (Constructor
                (inr,
                  Constructor
                    (OCaml.Assert_failure,
                      Tuple
                        (Any))),
                Constructor (14, tt))
            ]))
    ])

15 Open N

16
Value
  (non_rec, @.,
    [
      ((b', [ ], [ ], Type (unit)),
        Match
          (16,
            Run
              (?, Type (OCaml.exception, Type (OCaml.assert_failure)),
                [ ],
                Apply
                  (16, Variable (16, N.f), [ Constructor (16, tt) ])),
            [
              (Constructor (inl, x), Variable (?, x));
              (Constructor
                (inr,
                  Constructor
                    (OCaml.Assert_failure,
                      Tuple
                        (Any))),
                Constructor (16, tt))
            ]))
    ])

18 Value (non_rec, @., [ ((x, [ ], [ ], Type (Z)), Constant (18, Int(15))) ])

20 Module A:
  21
  Value
    (non_rec, @.,
      [
        ((x, [ A; B ], [ (x, A) ], B),
          Match
            (21, Variable (?, A/x),
              [
                (Any,
                  Apply
                    (21,
                      Variable
                        (21,
                          OCaml.assert),
                      [
                        Constructor
                          (21,
                            false)
                      ]))
              ]))
      ])

24 Module B:
  25 Value (non_rec, @., [ ((a, [ ], [ ], Type (Z)), Variable (25, x)) ])
  
  26 Open A
  
  27 Value (non_rec, @., [ ((b, [ A; B ], [ ], (A -> B)), Variable (27, A/x)) ])
  
  28
  Value
    (non_rec, @.,
      [
        ((x, [ A; B ], [ (x, A) ], B),
          Match
            (28, Variable (?, B/x),
              [
                (Any,
                  Apply
                    (28,
                      Variable
                        (28,
                          OCaml.Pervasives.failwith),
                      [
                        Constant
                          (28,
                            String("failure"))
                      ]))
              ]))
      ])
  
  29 Value (non_rec, @., [ ((c, [ A; B ], [ ], (A -> B)), Variable (29, B/x)) ])

32 Module C:
  33 Value (non_rec, @., [ ((a, [ ], [ ], Type (Z)), Variable (33, x)) ])
  
  34
  Value
    (non_rec, @.,
      [
        ((x, [ A; B ], [ (x, A) ], B),
          Match
            (34, Variable (?, C/x),
              [
                (Any,
                  Apply
                    (34,
                      Variable
                        (34,
                          OCaml.Pervasives.failwith),
                      [
                        Constant
                          (34,
                            String("failure"))
                      ]))
              ]))
      ])
  
  35 Value (non_rec, @., [ ((b, [ A; B ], [ ], (A -> B)), Variable (35, C/x)) ])
  
  36 Open A
  
  37 Value (non_rec, @., [ ((c, [ A; B ], [ ], (A -> B)), Variable (37, A.x)) ])

40 Module D:
  41 Module A:
    42 Value (non_rec, @., [ ((a, [ ], [ ], Type (Z)), Constant (42, Int(2))) ])
  
  44 Value (non_rec, @., [ ((b, [ ], [ ], Type (Z)), Variable (44, x)) ])
  
  45 Open D/A
  
  46 Value (non_rec, @., [ ((c, [ ], [ ], Type (Z)), Variable (46, A/A.a)) ])
  
  47 Value (non_rec, @., [ ((d, [ ], [ ], Type (Z)), Variable (47, x)) ])
