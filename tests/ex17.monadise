3 Exception (Outside, outside, ())

5
Value
  (non_rec, @.,
    [
      ((f, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml.exception, Type (outside)) ], B)),
        Apply
          (5, Variable (5, OCaml.Pervasives.raise),
            [ Constructor (5, Outside, Tuple (?)) ]))
    ])

7 Module G:
  8 Exception (Inside, inside, (Type (Z) * Type (string)))
  
  10
  Value
    (non_rec, @.,
      [
        ((g, [ A ], [ (b, Type (bool)) ],
          Monad
            ([
              Type (OCaml.exception, Type (outside));
              Type (OCaml.exception, Type (G/inside))
            ], A)),
          IfThenElse
            (11, Variable (11, G/b),
              Lift
                (?, [ Type (OCaml.exception, Type (G/inside)) ],
                  [
                    Type
                      (OCaml.exception,
                        Type
                          (outside));
                    Type
                      (OCaml.exception,
                        Type
                          (G/inside))
                  ],
                  Apply
                    (12,
                      Variable
                        (12,
                          OCaml.Pervasives.raise),
                      [
                        Constructor
                          (12,
                            G/Inside,
                            Tuple
                              (?,
                                Constant
                                  (12,
                                    Int(12)),
                                Constant
                                  (12,
                                    String("no"))))
                      ])),
              Lift
                (?, [ Type (OCaml.exception, Type (outside)) ],
                  [
                    Type
                      (OCaml.exception,
                        Type
                          (outside));
                    Type
                      (OCaml.exception,
                        Type
                          (G/inside))
                  ],
                  Apply
                    (14,
                      Variable
                        (14,
                          OCaml.Pervasives.raise),
                      [
                        Constructor
                          (14,
                            Outside,
                            Tuple
                              (?))
                      ]))))
      ])

17
Value
  (rec, @.,
    [
      ((h_rec, [ A; B ], [ (counter, Type (nat)); (l, Type (list, A)) ],
        Monad
          ([
            Type (IO);
            Type (NonTermination);
            Type (OCaml.exception, Type (outside));
            Type (OCaml.exception, Type (G.inside))
          ], B)),
        Match
          (?, Variable (?, counter),
            [
              (Constructor (O),
                Lift
                  (?,
                    [
                      Type
                        (NonTermination)
                    ],
                    [
                      Type
                        (IO);
                      Type
                        (NonTermination);
                      Type
                        (OCaml.exception,
                          Type
                            (outside));
                      Type
                        (OCaml.exception,
                          Type
                            (G.inside))
                    ],
                    Apply
                      (?,
                        Variable
                          (?,
                            not_terminated),
                        [
                          Tuple
                            (?)
                        ])));
              (Constructor (S, counter),
                Match
                  (18, Variable (18, l),
                    [
                      (Constructor
                        ([]),
                        Lift
                          (?,
                            [
                              Type
                                (IO);
                              Type
                                (OCaml.exception,
                                  Type
                                    (outside));
                              Type
                                (OCaml.exception,
                                  Type
                                    (G.inside))
                            ],
                            [
                              Type
                                (IO);
                              Type
                                (NonTermination);
                              Type
                                (OCaml.exception,
                                  Type
                                    (outside));
                              Type
                                (OCaml.exception,
                                  Type
                                    (G.inside))
                            ],
                            Bind
                              (?,
                                Lift
                                  (?,
                                    [
                                      Type
                                        (IO)
                                    ],
                                    [
                                      Type
                                        (IO);
                                      Type
                                        (OCaml.exception,
                                          Type
                                            (outside));
                                      Type
                                        (OCaml.exception,
                                          Type
                                            (G.inside))
                                    ],
                                    Apply
                                      (19,
                                        Variable
                                          (19,
                                            OCaml.Pervasives.print_string),
                                        [
                                          Constant
                                            (19,
                                              String("no tail"))
                                        ])),
                                None,
                                Lift
                                  (?,
                                    [
                                      Type
                                        (OCaml.exception,
                                          Type
                                            (outside));
                                      Type
                                        (OCaml.exception,
                                          Type
                                            (G.inside))
                                    ],
                                    [
                                      Type
                                        (IO);
                                      Type
                                        (OCaml.exception,
                                          Type
                                            (outside));
                                      Type
                                        (OCaml.exception,
                                          Type
                                            (G.inside))
                                    ],
                                    Apply
                                      (19,
                                        Variable
                                          (19,
                                            G.g),
                                        [
                                          Constructor
                                            (19,
                                              false)
                                        ])))));
                      (Constructor
                        (cons,
                          x,
                          Constructor
                            ([])),
                        Lift
                          (?,
                            [
                              Type
                                (OCaml.exception,
                                  Type
                                    (G.inside))
                            ],
                            [
                              Type
                                (IO);
                              Type
                                (NonTermination);
                              Type
                                (OCaml.exception,
                                  Type
                                    (outside));
                              Type
                                (OCaml.exception,
                                  Type
                                    (G.inside))
                            ],
                            Apply
                              (20,
                                Variable
                                  (20,
                                    OCaml.Pervasives.raise),
                                [
                                  Constructor
                                    (20,
                                      G.Inside,
                                      Tuple
                                        (?,
                                          Constant
                                            (20,
                                              Int(0)),
                                          Constant
                                            (20,
                                              String("gg"))))
                                ])));
                      (Constructor
                        (cons,
                          Any,
                          xs),
                        Apply
                          (21,
                            Apply
                              (?,
                                Variable
                                  (?,
                                    h_rec),
                                [
                                  Variable
                                    (?,
                                      counter)
                                ]),
                            [
                              Variable
                                (21,
                                  xs)
                            ]))
                    ]))
            ]))
    ])

17
Value
  (non_rec, @.,
    [
      ((h, [ A; B ], [ (l, Type (list, A)) ],
        Monad
          ([
            Type (Counter);
            Type (IO);
            Type (NonTermination);
            Type (OCaml.exception, Type (outside));
            Type (OCaml.exception, Type (G.inside))
          ], B)),
        Bind
          (?,
            Lift
              (?, [ Type (Counter) ],
                [
                  Type (Counter);
                  Type (IO);
                  Type (NonTermination);
                  Type (OCaml.exception, Type (outside));
                  Type (OCaml.exception, Type (G.inside))
                ],
                Apply (?, Variable (?, read_counter), [ Tuple (?) ])),
            Some x,
            Lift
              (?,
                [
                  Type (IO);
                  Type (NonTermination);
                  Type (OCaml.exception, Type (outside));
                  Type (OCaml.exception, Type (G.inside))
                ],
                [
                  Type (Counter);
                  Type (IO);
                  Type (NonTermination);
                  Type (OCaml.exception, Type (outside));
                  Type (OCaml.exception, Type (G.inside))
                ],
                Apply
                  (?, Variable (?, h_rec),
                    [ Variable (?, x); Variable (?, l) ]))))
    ])
