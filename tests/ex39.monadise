Require [ OCaml.List ]

3
Value
  (non_rec, @.,
    [
      ((get_local_ref, [ ], [ (tt (= tt_1), Type (unit)) ],
        Monad ([ Type (OCaml.Effect.State.state, Type (Z)) ], Type (Z))),
        Bind
          (?,
            Apply
              (4, Variable (4, OCaml.Pervasives.ref),
                [ Constant (4, Int(12)) ]), Some x,
            Apply
              (5, Variable (5, OCaml.Effect.State.read),
                [ Variable (5, x) ])))
    ])

7
Value
  (non_rec, @.,
    [
      ((set_local_ref, [ ], [ (tt (= tt_1), Type (unit)) ],
        Monad ([ Type (OCaml.Effect.State.state, Type (Z)) ], Type (Z))),
        Bind
          (?,
            Apply
              (8, Variable (8, OCaml.Pervasives.ref),
                [ Constant (8, Int(12)) ]), Some x,
            Bind
              (?,
                Apply
                  (9, Variable (9, OCaml.Effect.State.write),
                    [ Variable (9, x); Constant (9, Int(15)) ]),
                None,
                Apply
                  (10, Variable (10, OCaml.Effect.State.read),
                    [ Variable (10, x) ]))))
    ])

12
Value
  (non_rec, @.,
    [
      ((add_multiple_by_refs, [ ],
        [ (a, Type (Z)); (b, Type (Z)); (c, Type (Z)); (d, Type (Z)) ],
        Monad ([ Type (OCaml.Effect.State.state, Type (Z)) ], Type (Z))),
        Bind
          (?,
            Apply
              (13, Variable (13, OCaml.Pervasives.ref),
                [ Variable (13, a) ]), Some x,
            Bind
              (?,
                Bind
                  (?,
                    Bind
                      (?,
                        Apply
                          (14,
                            Variable
                              (14,
                                OCaml.Effect.State.read),
                            [ Variable (14, x) ]),
                        Some x_1,
                        Return
                          (?,
                            Apply
                              (14, Variable (14, Z.add),
                                [
                                  Variable (?, x_1);
                                  Variable (14, b)
                                ]))), Some x_1,
                    Apply
                      (14,
                        Variable
                          (14, OCaml.Effect.State.write),
                        [ Variable (14, x); Variable (?, x_1) ])),
                None,
                Bind
                  (?,
                    Apply
                      (15, Variable (15, OCaml.Pervasives.ref),
                        [ Variable (15, c) ]), Some y,
                    Bind
                      (?,
                        Bind
                          (?,
                            Bind
                              (?,
                                Apply
                                  (16,
                                    Variable
                                      (16,
                                        OCaml.Effect.State.read),
                                    [
                                      Variable
                                        (16,
                                          y)
                                    ]), Some x_1,
                                Return
                                  (?,
                                    Apply
                                      (16,
                                        Variable
                                          (16,
                                            Z.add),
                                        [
                                          Variable
                                            (?,
                                              x_1);
                                          Variable
                                            (16,
                                              d)
                                        ]))),
                            Some x_1,
                            Apply
                              (16,
                                Variable
                                  (16,
                                    OCaml.Effect.State.write),
                                [
                                  Variable (16, y);
                                  Variable (?, x_1)
                                ])), None,
                        Bind
                          (?,
                            Bind
                              (?,
                                Bind
                                  (?,
                                    Apply
                                      (17,
                                        Variable
                                          (17,
                                            OCaml.Effect.State.read),
                                        [
                                          Variable
                                            (17,
                                              x)
                                        ]),
                                    Some x_1,
                                    Bind
                                      (?,
                                        Apply
                                          (17,
                                            Variable
                                              (17,
                                                OCaml.Effect.State.read),
                                            [
                                              Variable
                                                (17,
                                                  y)
                                            ]),
                                        Some
                                          x_2,
                                        Return
                                          (?,
                                            Apply
                                              (17,
                                                Variable
                                                  (17,
                                                    Z.add),
                                                [
                                                  Variable
                                                    (?,
                                                      x_1);
                                                  Variable
                                                    (?,
                                                      x_2)
                                                ])))),
                                Some x_1,
                                Apply
                                  (17,
                                    Variable
                                      (17,
                                        OCaml.Pervasives.ref),
                                    [
                                      Variable
                                        (?,
                                          x_1)
                                    ])), Some z,
                            Apply
                              (18,
                                Variable
                                  (18,
                                    OCaml.Effect.State.read),
                                [ Variable (18, z) ])))))))
    ])

20
Value
  (non_rec, @.,
    [
      ((set_ref, [ ], [ (x, Type (OCaml.Effect.State.t, Type (Z))) ],
        Monad ([ Type (OCaml.Effect.State.state, Type (Z)) ], Type (unit))),
        Apply
          (21, Variable (21, OCaml.Effect.State.write),
            [ Variable (21, x); Constant (21, Int(15)) ]))
    ])

23
Value
  (non_rec, @.,
    [
      ((get_ref, [ ], [ (x, Type (OCaml.Effect.State.t, Type (Z))) ],
        Monad ([ Type (OCaml.Effect.State.state, Type (Z)) ], Type (Z))),
        Apply
          (24, Variable (24, OCaml.Effect.State.read), [ Variable (24, x) ]))
    ])

26
Value
  (non_rec, @.,
    [
      ((update_ref, [ ], [ (x, Type (OCaml.Effect.State.t, Type (Z))) ],
        Monad ([ Type (OCaml.Effect.State.state, Type (Z)) ], Type (unit))),
        Bind
          (?,
            Bind
              (?,
                Apply
                  (27, Variable (27, OCaml.Effect.State.read),
                    [ Variable (27, x) ]), Some x_1,
                Return
                  (?,
                    Apply
                      (27, Variable (27, Z.add),
                        [
                          Variable (?, x_1);
                          Constant (27, Int(5))
                        ]))), Some x_1,
            Apply
              (27, Variable (27, OCaml.Effect.State.write),
                [ Variable (27, x); Variable (?, x_1) ])))
    ])

29
Value
  (non_rec, @.,
    [
      ((new_ref, [ ], [ (x, Type (unit)) ],
        Monad
          ([ Type (OCaml.Effect.State.state, Type (Z)) ],
            Type (OCaml.Effect.State.t, Type (Z)))),
        Apply
          (30, Variable (30, OCaml.Pervasives.ref),
            [ Constant (30, Int(15)) ]))
    ])

32 Reference (r, r_state, Type (Z), Constant (32, Int(18)))

34
Value
  (non_rec, @.,
    [
      ((set_r, [ ], [ (x, Type (unit)) ],
        Monad
          ([ Type (OCaml.Effect.State.state, Type (Z)); r_state ],
            Type (unit))),
        Bind
          (?, Variable (34, r), Some x_1,
            Lift
              (?, [ Type (OCaml.Effect.State.state, Type (Z)) ],
                [ Type (OCaml.Effect.State.state, Type (Z)); r_state ],
                Apply
                  (34, Variable (34, set_ref), [ Variable (?, x_1) ]))))
    ])

36
Value
  (non_rec, @.,
    [
      ((get_r, [ ], [ (x, Type (unit)) ],
        Monad
          ([ Type (OCaml.Effect.State.state, Type (Z)); r_state ], Type (Z))),
        Bind
          (?, Variable (36, r), Some x_1,
            Lift
              (?, [ Type (OCaml.Effect.State.state, Type (Z)) ],
                [ Type (OCaml.Effect.State.state, Type (Z)); r_state ],
                Apply
                  (36, Variable (36, get_ref), [ Variable (?, x_1) ]))))
    ])

38
Value
  (non_rec, @.,
    [
      ((r_add_15, [ ], [ (x, Type (unit)) ],
        Monad
          ([ Type (OCaml.Effect.State.state, Type (Z)); r_state ], Type (Z))),
        Bind
          (?, Apply (39, Variable (39, get_r), [ Constructor (39, tt) ]),
            Some i,
            Bind
              (?,
                Apply
                  (40, Variable (40, set_r),
                    [ Constructor (40, tt) ]), None,
                Bind
                  (?,
                    Apply
                      (41, Variable (41, get_r),
                        [ Constructor (41, tt) ]), Some j,
                    Bind
                      (?,
                        Bind
                          (?, Variable (42, r), Some x_1,
                            Lift
                              (?,
                                [
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (Z))
                                ],
                                [
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (Z));
                                  r_state
                                ],
                                Apply
                                  (42,
                                    Variable
                                      (42,
                                        OCaml.Effect.State.write),
                                    [
                                      Variable
                                        (?,
                                          x_1);
                                      Apply
                                        (42,
                                          Variable
                                            (42,
                                              Z.add),
                                          [
                                            Variable
                                              (42,
                                                i);
                                            Variable
                                              (42,
                                                j)
                                          ])
                                    ]))), None,
                        Bind
                          (?, Variable (43, r), Some x_1,
                            Lift
                              (?,
                                [
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (Z))
                                ],
                                [
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (Z));
                                  r_state
                                ],
                                Apply
                                  (43,
                                    Variable
                                      (43,
                                        OCaml.Effect.State.read),
                                    [
                                      Variable
                                        (?,
                                          x_1)
                                    ]))))))))
    ])

45
Value
  (non_rec, @.,
    [
      ((mixed_type, [ ], [ (es_in, list Effect.t); (x, Type (unit)) ],
        Monad
          ([
            Type (OCaml.Effect.State.state, Type (Z));
            Type (OCaml.Effect.State.state, Type (bool));
            Type (OCaml.Effect.State.state, Type (string));
            r_state
          ], (Type (bool) * Type (string) * Type (Z)))),
        Bind
          (?,
            Lift
              (?, [ Type (OCaml.Effect.State.state, Type (bool)) ],
                [
                  Type (OCaml.Effect.State.state, Type (Z));
                  Type (OCaml.Effect.State.state, Type (bool));
                  Type (OCaml.Effect.State.state, Type (string));
                  r_state
                ],
                Apply
                  (46, Variable (46, OCaml.Pervasives.ref),
                    [ Constructor (46, true) ])), Some b,
            Bind
              (?,
                Lift
                  (?,
                    [
                      Type
                        (OCaml.Effect.State.state,
                          Type
                            (string))
                    ],
                    [
                      Type (OCaml.Effect.State.state, Type (Z));
                      Type
                        (OCaml.Effect.State.state,
                          Type
                            (bool));
                      Type
                        (OCaml.Effect.State.state,
                          Type
                            (string));
                      r_state
                    ],
                    Apply
                      (47, Variable (47, OCaml.Pervasives.ref),
                        [ Constant (47, String("")) ])),
                Some str,
                LetFun 48
                  (non_rec, @.,
                    [
                      ((update, [ ], [ (x_1, Type (unit)) ],
                        Monad
                          ([
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (bool));
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (string))
                          ],
                            Type
                              (unit))),
                        Match
                          (?,
                            Variable
                              (?,
                                x_1),
                            [
                              (Constructor
                                (tt),
                                Bind
                                  (?,
                                    Lift
                                      (?,
                                        [
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (bool))
                                        ],
                                        [
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (bool));
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (string))
                                        ],
                                        Bind
                                          (?,
                                            Apply
                                              (49,
                                                Variable
                                                  (49,
                                                    OCaml.Effect.State.read),
                                                [
                                                  Variable
                                                    (49,
                                                      b)
                                                ]),
                                            Some
                                              x_2,
                                            Apply
                                              (49,
                                                Variable
                                                  (49,
                                                    OCaml.Effect.State.write),
                                                [
                                                  Variable
                                                    (49,
                                                      b);
                                                  Variable
                                                    (?,
                                                      x_2)
                                                ]))),
                                    None,
                                    Lift
                                      (?,
                                        [
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (string))
                                        ],
                                        [
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (bool));
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (string))
                                        ],
                                        Bind
                                          (?,
                                            Bind
                                              (?,
                                                Apply
                                                  (50,
                                                    Variable
                                                      (50,
                                                        OCaml.Effect.State.read),
                                                    [
                                                      Variable
                                                        (50,
                                                          str)
                                                    ]),
                                                Some
                                                  x_2,
                                                Return
                                                  (?,
                                                    Apply
                                                      (50,
                                                        Variable
                                                          (50,
                                                            String.append),
                                                        [
                                                          Constant
                                                            (50,
                                                              String("toggle "));
                                                          Variable
                                                            (?,
                                                              x_2)
                                                        ]))),
                                            Some
                                              x_2,
                                            Apply
                                              (50,
                                                Variable
                                                  (50,
                                                    OCaml.Effect.State.write),
                                                [
                                                  Variable
                                                    (50,
                                                      str);
                                                  Variable
                                                    (?,
                                                      x_2)
                                                ])))))
                            ]))
                    ]) in
                Bind
                  (?,
                    Lift
                      (?,
                        [
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (bool));
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (string))
                        ],
                        [
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (Z));
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (bool));
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (string));
                          r_state
                        ],
                        Apply
                          (51, Variable (51, update),
                            [ Constructor (51, tt) ])),
                    None,
                    Bind
                      (?,
                        Lift
                          (?,
                            [
                              Type
                                (OCaml.Effect.State.state,
                                  Type
                                    (bool));
                              Type
                                (OCaml.Effect.State.state,
                                  Type
                                    (string))
                            ],
                            [
                              Type
                                (OCaml.Effect.State.state,
                                  Type
                                    (Z));
                              Type
                                (OCaml.Effect.State.state,
                                  Type
                                    (bool));
                              Type
                                (OCaml.Effect.State.state,
                                  Type
                                    (string));
                              r_state
                            ],
                            Apply
                              (52,
                                Variable (52, update),
                                [
                                  Constructor
                                    (52,
                                      tt)
                                ])), None,
                        Bind
                          (?,
                            Lift
                              (?,
                                [
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (bool));
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (string))
                                ],
                                [
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (Z));
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (bool));
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (string));
                                  r_state
                                ],
                                Apply
                                  (53,
                                    Variable
                                      (53,
                                        update),
                                    [
                                      Constructor
                                        (53,
                                          tt)
                                    ])), None,
                            Bind
                              (?,
                                Lift
                                  (?,
                                    [
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (bool))
                                    ],
                                    [
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (Z));
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (bool));
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (string));
                                      r_state
                                    ],
                                    Apply
                                      (54,
                                        Variable
                                          (54,
                                            OCaml.Effect.State.read),
                                        [
                                          Variable
                                            (54,
                                              b)
                                        ])),
                                Some x_1,
                                Bind
                                  (?,
                                    Lift
                                      (?,
                                        [
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (string))
                                        ],
                                        [
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (Z));
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (bool));
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (string));
                                          r_state
                                        ],
                                        Apply
                                          (54,
                                            Variable
                                              (54,
                                                OCaml.Effect.State.read),
                                            [
                                              Variable
                                                (54,
                                                  str)
                                            ])),
                                    Some x_2,
                                    Bind
                                      (?,
                                        Lift
                                          (?,
                                            [
                                              Type
                                                (OCaml.Effect.State.state,
                                                  Type
                                                    (Z));
                                              r_state
                                            ],
                                            [
                                              Type
                                                (OCaml.Effect.State.state,
                                                  Type
                                                    (Z));
                                              Type
                                                (OCaml.Effect.State.state,
                                                  Type
                                                    (bool));
                                              Type
                                                (OCaml.Effect.State.state,
                                                  Type
                                                    (string));
                                              r_state
                                            ],
                                            Bind
                                              (?,
                                                Variable
                                                  (54,
                                                    r),
                                                Some
                                                  x_3,
                                                Lift
                                                  (?,
                                                    [
                                                      Type
                                                        (OCaml.Effect.State.state,
                                                          Type
                                                            (Z))
                                                    ],
                                                    [
                                                      Type
                                                        (OCaml.Effect.State.state,
                                                          Type
                                                            (Z));
                                                      r_state
                                                    ],
                                                    Apply
                                                      (54,
                                                        Variable
                                                          (54,
                                                            OCaml.Effect.State.read),
                                                        [
                                                          Variable
                                                            (?,
                                                              x_3)
                                                        ])))),
                                        Some
                                          x_3,
                                        Return
                                          (?,
                                            Tuple
                                              (54,
                                                Variable
                                                  (?,
                                                    x_1),
                                                Variable
                                                  (?,
                                                    x_2),
                                                Variable
                                                  (?,
                                                    x_3))))))))))))
    ])

56
Value
  (non_rec, @.,
    [
      ((partials_test, [ ], [ (es_in, list Effect.t); (x, Type (unit)) ],
        Monad
          ([
            Type (OCaml.Effect.State.state, Type (Z));
            Type (OCaml.Effect.State.state, Type (list, Type (Z)));
            r_state
          ], Type (OCaml.Effect.State.t, Type (Z)))),
        Match
          (?, Variable (?, x),
            [
              (Constructor (tt),
                LetFun 57
                  (non_rec, @.,
                    [
                      ((f1,
                        [
                        ],
                        [
                          (x,
                            Type
                              (OCaml.Effect.State.t,
                                Type
                                  (Z)));
                          (y,
                            Type
                              (Z))
                        ],
                        Monad
                          ([
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (Z))
                          ],
                            Type
                              (OCaml.Effect.State.t,
                                Type
                                  (Z)))),
                        Bind
                          (?,
                            Apply
                              (58,
                                Variable
                                  (58,
                                    OCaml.Effect.State.write),
                                [
                                  Variable
                                    (58,
                                      x);
                                  Variable
                                    (58,
                                      y)
                                ]),
                            None,
                            Return
                              (?,
                                Variable
                                  (59,
                                    x))))
                    ])
                  in
                Bind
                  (?,
                    Lift
                      (?,
                        [
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (Z));
                          r_state
                        ],
                        [
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (Z));
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (list,
                                  Type
                                    (Z)));
                          r_state
                        ],
                        Bind
                          (?,
                            Variable
                              (60,
                                r),
                            Some
                              x_1,
                            Return
                              (?,
                                Apply
                                  (60,
                                    Variable
                                      (60,
                                        f1),
                                    [
                                      Variable
                                        (?,
                                          x_1)
                                    ])))),
                    Some
                      f1_test,
                    Lift
                      (?,
                        [
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (Z));
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (list,
                                  Type
                                    (Z)))
                        ],
                        [
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (Z));
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (list,
                                  Type
                                    (Z)));
                          r_state
                        ],
                        Bind
                          (?,
                            Lift
                              (?,
                                [
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (Z))
                                ],
                                [
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (Z));
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (list,
                                          Type
                                            (Z)))
                                ],
                                Apply
                                  (61,
                                    Variable
                                      (61,
                                        f1_test),
                                    [
                                      Constant
                                        (61,
                                          Int(15))
                                    ])),
                            Some
                              f1_test,
                            LetFun
                              62
                              (non_rec,
                                @.,
                                [
                                  ((f2,
                                    [
                                    ],
                                    [
                                      (l1,
                                        Type
                                          (OCaml.Effect.State.t,
                                            Type
                                              (list,
                                                Type
                                                  (Z))));
                                      (l2,
                                        Type
                                          (list,
                                            Type
                                              (string)))
                                    ],
                                    Monad
                                      ([
                                        Type
                                          (OCaml.Effect.State.state,
                                            Type
                                              (Z));
                                        Type
                                          (OCaml.Effect.State.state,
                                            Type
                                              (list,
                                                Type
                                                  (Z)))
                                      ],
                                        Type
                                          (OCaml.Effect.State.t,
                                            Type
                                              (Z)))),
                                    Bind
                                      (?,
                                        Lift
                                          (?,
                                            [
                                              Type
                                                (OCaml.Effect.State.state,
                                                  Type
                                                    (list,
                                                      Type
                                                        (Z)))
                                            ],
                                            [
                                              Type
                                                (OCaml.Effect.State.state,
                                                  Type
                                                    (Z));
                                              Type
                                                (OCaml.Effect.State.state,
                                                  Type
                                                    (list,
                                                      Type
                                                        (Z)))
                                            ],
                                            Bind
                                              (?,
                                                Bind
                                                  (?,
                                                    Apply
                                                      (63,
                                                        Variable
                                                          (63,
                                                            OCaml.Effect.State.read),
                                                        [
                                                          Variable
                                                            (63,
                                                              l1)
                                                        ]),
                                                    Some
                                                      x_1,
                                                    Return
                                                      (?,
                                                        Apply
                                                          (63,
                                                            Variable
                                                              (63,
                                                                OCaml.List.length),
                                                            [
                                                              Variable
                                                                (?,
                                                                  x_1)
                                                            ]))),
                                                Some
                                                  x_1,
                                                Return
                                                  (?,
                                                    Apply
                                                      (63,
                                                        Variable
                                                          (63,
                                                            Z.add),
                                                        [
                                                          Variable
                                                            (?,
                                                              x_1);
                                                          Apply
                                                            (63,
                                                              Variable
                                                                (63,
                                                                  OCaml.List.length),
                                                              [
                                                                Variable
                                                                  (63,
                                                                    l2)
                                                              ])
                                                        ])))),
                                        Some
                                          x_1,
                                        Lift
                                          (?,
                                            [
                                              Type
                                                (OCaml.Effect.State.state,
                                                  Type
                                                    (Z))
                                            ],
                                            [
                                              Type
                                                (OCaml.Effect.State.state,
                                                  Type
                                                    (Z));
                                              Type
                                                (OCaml.Effect.State.state,
                                                  Type
                                                    (list,
                                                      Type
                                                        (Z)))
                                            ],
                                            Apply
                                              (63,
                                                Variable
                                                  (63,
                                                    OCaml.Pervasives.ref),
                                                [
                                                  Variable
                                                    (?,
                                                      x_1)
                                                ]))))
                                ])
                              in
                            Bind
                              (?,
                                Lift
                                  (?,
                                    [
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (list,
                                              Type
                                                (Z)))
                                    ],
                                    [
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (Z));
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (list,
                                              Type
                                                (Z)))
                                    ],
                                    Bind
                                      (?,
                                        Apply
                                          (64,
                                            Variable
                                              (64,
                                                OCaml.Pervasives.ref),
                                            [
                                              Constructor
                                                (64,
                                                  cons,
                                                  Constant
                                                    (64,
                                                      Int(1)),
                                                  Constructor
                                                    (64,
                                                      cons,
                                                      Constant
                                                        (64,
                                                          Int(2)),
                                                      Constructor
                                                        (64,
                                                          cons,
                                                          Constant
                                                            (64,
                                                              Int(3)),
                                                          Constructor
                                                            (64,
                                                              []))))
                                            ]),
                                        Some
                                          x_1,
                                        Return
                                          (?,
                                            Apply
                                              (64,
                                                Variable
                                                  (64,
                                                    f2),
                                                [
                                                  Variable
                                                    (?,
                                                      x_1)
                                                ])))),
                                Some
                                  f2_test,
                                Bind
                                  (?,
                                    Apply
                                      (65,
                                        Variable
                                          (65,
                                            f2_test),
                                        [
                                          Constructor
                                            (65,
                                              cons,
                                              Constant
                                                (65,
                                                  String("hi")),
                                              Constructor
                                                (65,
                                                  cons,
                                                  Constant
                                                    (65,
                                                      String("hey")),
                                                  Constructor
                                                    (65,
                                                      [])))
                                        ]),
                                    Some
                                      f2_test,
                                    Lift
                                      (?,
                                        [
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (Z))
                                        ],
                                        [
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (Z));
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (list,
                                                  Type
                                                    (Z)))
                                        ],
                                        Bind
                                          (?,
                                            Apply
                                              (66,
                                                Variable
                                                  (66,
                                                    OCaml.Effect.State.read),
                                                [
                                                  Variable
                                                    (66,
                                                      f1_test)
                                                ]),
                                            Some
                                              x_1,
                                            Apply
                                              (66,
                                                Variable
                                                  (66,
                                                    f1),
                                                [
                                                  Variable
                                                    (66,
                                                      f2_test);
                                                  Variable
                                                    (?,
                                                      x_1)
                                                ])))))))))
            ]))
    ])

68
Value
  (non_rec, @.,
    [
      ((multiple_returns_test, [ ], [ (x, Type (unit)) ],
        Monad
          ([ Type (OCaml.Effect.State.state, Type (Z)) ],
            (Type (Z) * Type (OCaml.Effect.State.t, Type (Z))))),
        Match
          (?, Variable (?, x),
            [
              (Constructor (tt),
                LetFun 69
                  (non_rec, @.,
                    [
                      ((f,
                        [
                        ],
                        [
                          (x,
                            Type
                              (OCaml.Effect.State.t,
                                Type
                                  (Z)));
                          (y,
                            Type
                              (Z))
                        ],
                        Monad
                          ([
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (Z))
                          ],
                            (Type
                              (Z)
                              ->
                              Monad
                                ([
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (Z))
                                ],
                                  (Type
                                    (OCaml.Effect.State.t,
                                      Type
                                        (Z))
                                    ->
                                    Monad
                                      ([
                                        Type
                                          (OCaml.Effect.State.state,
                                            Type
                                              (Z))
                                      ],
                                        Type
                                          (OCaml.Effect.State.t,
                                            Type
                                              (Z)))))))),
                        Bind
                          (?,
                            Apply
                              (70,
                                Variable
                                  (70,
                                    OCaml.Effect.State.write),
                                [
                                  Variable
                                    (70,
                                      x);
                                  Variable
                                    (70,
                                      y)
                                ]),
                            None,
                            Return
                              (?,
                                Function
                                  (71,
                                    z,
                                    Bind
                                      (?,
                                        Bind
                                          (?,
                                            Bind
                                              (?,
                                                Apply
                                                  (72,
                                                    Variable
                                                      (72,
                                                        OCaml.Effect.State.read),
                                                    [
                                                      Variable
                                                        (72,
                                                          x)
                                                    ]),
                                                Some
                                                  x_1,
                                                Return
                                                  (?,
                                                    Apply
                                                      (72,
                                                        Variable
                                                          (72,
                                                            Z.add),
                                                        [
                                                          Variable
                                                            (?,
                                                              x_1);
                                                          Variable
                                                            (72,
                                                              z)
                                                        ]))),
                                            Some
                                              x_1,
                                            Apply
                                              (72,
                                                Variable
                                                  (72,
                                                    OCaml.Effect.State.write),
                                                [
                                                  Variable
                                                    (72,
                                                      x);
                                                  Variable
                                                    (?,
                                                      x_1)
                                                ])),
                                        None,
                                        Return
                                          (?,
                                            Function
                                              (73,
                                                w,
                                                Bind
                                                  (?,
                                                    Apply
                                                      (74,
                                                        Variable
                                                          (74,
                                                            OCaml.Effect.State.read),
                                                        [
                                                          Variable
                                                            (74,
                                                              w)
                                                        ]),
                                                    Some
                                                      tmp,
                                                    Bind
                                                      (?,
                                                        Bind
                                                          (?,
                                                            Bind
                                                              (?,
                                                                Apply
                                                                  (75,
                                                                    Variable
                                                                      (75,
                                                                        OCaml.Effect.State.read),
                                                                    [
                                                                      Variable
                                                                        (75,
                                                                          x)
                                                                    ]),
                                                                Some
                                                                  x_1,
                                                                Return
                                                                  (?,
                                                                    Apply
                                                                      (75,
                                                                        Variable
                                                                          (75,
                                                                            Z.mul),
                                                                        [
                                                                          Constant
                                                                            (75,
                                                                              Int(2));
                                                                          Variable
                                                                            (?,
                                                                              x_1)
                                                                        ]))),
                                                            Some
                                                              x_1,
                                                            Apply
                                                              (75,
                                                                Variable
                                                                  (75,
                                                                    OCaml.Effect.State.write),
                                                                [
                                                                  Variable
                                                                    (75,
                                                                      w);
                                                                  Variable
                                                                    (?,
                                                                      x_1)
                                                                ])),
                                                        None,
                                                        Bind
                                                          (?,
                                                            Apply
                                                              (76,
                                                                Variable
                                                                  (76,
                                                                    OCaml.Effect.State.write),
                                                                [
                                                                  Variable
                                                                    (76,
                                                                      x);
                                                                  Variable
                                                                    (76,
                                                                      tmp)
                                                                ]),
                                                            None,
                                                            Return
                                                              (?,
                                                                Variable
                                                                  (77,
                                                                    x))))))))))))
                    ])
                  in
                Bind
                  (?,
                    Apply
                      (80,
                        Variable
                          (80,
                            OCaml.Pervasives.ref),
                        [
                          Constant
                            (80,
                              Int(110))
                        ]),
                    Some
                      s,
                    Bind
                      (?,
                        Bind
                          (?,
                            Apply
                              (81,
                                Variable
                                  (81,
                                    OCaml.Pervasives.ref),
                                [
                                  Constant
                                    (81,
                                      Int(5))
                                ]),
                            Some
                              x_1,
                            Return
                              (?,
                                Apply
                                  (81,
                                    Variable
                                      (81,
                                        f),
                                    [
                                      Variable
                                        (?,
                                          x_1)
                                    ]))),
                        Some
                          f1,
                        Bind
                          (?,
                            Apply
                              (82,
                                Variable
                                  (82,
                                    f1),
                                [
                                  Constant
                                    (82,
                                      Int(2))
                                ]),
                            Some
                              f2,
                            Bind
                              (?,
                                Apply
                                  (83,
                                    Variable
                                      (83,
                                        f2),
                                    [
                                      Constant
                                        (83,
                                          Int(7))
                                    ]),
                                Some
                                  f3,
                                Bind
                                  (?,
                                    Apply
                                      (84,
                                        Variable
                                          (84,
                                            f3),
                                        [
                                          Variable
                                            (84,
                                              s)
                                        ]),
                                    Some
                                      f4,
                                    Bind
                                      (?,
                                        Apply
                                          (85,
                                            Variable
                                              (85,
                                                OCaml.Effect.State.read),
                                            [
                                              Variable
                                                (85,
                                                  f4)
                                            ]),
                                        Some
                                          x_1,
                                        Return
                                          (?,
                                            Tuple
                                              (85,
                                                Variable
                                                  (?,
                                                    x_1),
                                                Variable
                                                  (85,
                                                    s))))))))))
            ]))
    ])

87
Value
  (non_rec, @.,
    [
      ((type_vars_test, [ A; B ],
        [
          (es_in, list Effect.t);
          (x, Type (OCaml.Effect.State.t, A));
          (y, Type (OCaml.Effect.State.t, B));
          (a, A);
          (b, B)
        ],
        Monad
          ([
            Type (OCaml.Effect.State.state, A);
            Type (OCaml.Effect.State.state, B)
          ], Type (unit))),
        Bind
          (?,
            Lift
              (?, [ Type (OCaml.Effect.State.state, A) ],
                [
                  Type (OCaml.Effect.State.state, A);
                  Type (OCaml.Effect.State.state, B)
                ],
                Apply
                  (88, Variable (88, OCaml.Effect.State.write),
                    [ Variable (88, x); Variable (88, a) ])),
            None,
            Lift
              (?, [ Type (OCaml.Effect.State.state, B) ],
                [
                  Type (OCaml.Effect.State.state, A);
                  Type (OCaml.Effect.State.state, B)
                ],
                Apply
                  (89, Variable (89, OCaml.Effect.State.write),
                    [ Variable (89, y); Variable (89, b) ]))))
    ])

91
Value
  (non_rec, @.,
    [
      ((resolves_test1, [ A ],
        [ (x, Type (OCaml.Effect.State.t, A)); (a, A); (b, A) ],
        Monad ([ Type (OCaml.Effect.State.state, A) ], Type (unit))),
        Lift
          (?,
            [
              Type (OCaml.Effect.State.state, A);
              Type (OCaml.Effect.State.state, A)
            ], [ Type (OCaml.Effect.State.state, A) ],
            Apply
              (92, Variable (92, type_vars_test),
                [
                  Variable (92, x);
                  Variable (92, x);
                  Variable (92, a);
                  Variable (92, b)
                ])))
    ])

94
Value
  (non_rec, @.,
    [
      ((resolves_test2, [ A ],
        [
          (es_in, list Effect.t);
          (x, Type (OCaml.Effect.State.t, Type (Z)));
          (y, Type (OCaml.Effect.State.t, A));
          (a, Type (Z));
          (b, A)
        ],
        Monad
          ([
            Type (OCaml.Effect.State.state, A);
            Type (OCaml.Effect.State.state, Type (Z))
          ], Type (unit))),
        Lift
          (?,
            [
              Type (OCaml.Effect.State.state, Type (Z));
              Type (OCaml.Effect.State.state, A)
            ],
            [
              Type (OCaml.Effect.State.state, A);
              Type (OCaml.Effect.State.state, Type (Z))
            ],
            Apply
              (95, Variable (95, type_vars_test),
                [
                  Variable (95, x);
                  Variable (95, y);
                  Variable (95, a);
                  Variable (95, b)
                ])))
    ])

97
Value
  (non_rec, @.,
    [
      ((resolves_test3, [ ],
        [
          (x, Type (OCaml.Effect.State.t, Type (Z)));
          (y, Type (OCaml.Effect.State.t, Type (Z)));
          (a, Type (Z));
          (b, Type (Z))
        ], Monad ([ Type (OCaml.Effect.State.state, Type (Z)) ], Type (unit))),
        Lift
          (?,
            [
              Type (OCaml.Effect.State.state, Type (Z));
              Type (OCaml.Effect.State.state, Type (Z))
            ], [ Type (OCaml.Effect.State.state, Type (Z)) ],
            Apply
              (98, Variable (98, type_vars_test),
                [
                  Variable (98, x);
                  Variable (98, y);
                  Variable (98, a);
                  Variable (98, b)
                ])))
    ])
