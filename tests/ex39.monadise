Require [ OCaml.List ]

3
Value
  (non_rec, @.,
    [
      ((get_local_ref, [ ], [ (tt, Type (unit/3)) ],
        Monad
          ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
            Type (Z/3))),
        Bind
          (?,
            Apply
              (4, Variable (4, OCaml.Pervasives.ref/3),
                [ Constant (4, Int(12)) ]), Some x,
            Apply
              (5, Variable (5, OCaml.Effect.State.read/3),
                [ Variable (5, x/0) ])))
    ])

7
Value
  (non_rec, @.,
    [
      ((set_local_ref, [ ], [ (tt, Type (unit/3)) ],
        Monad
          ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
            Type (Z/3))),
        Bind
          (?,
            Apply
              (8, Variable (8, OCaml.Pervasives.ref/3),
                [ Constant (8, Int(12)) ]), Some x,
            Bind
              (?,
                Apply
                  (9, Variable (9, OCaml.Effect.State.write/3),
                    [ Variable (9, x/0); Constant (9, Int(15)) ]),
                None,
                Apply
                  (10, Variable (10, OCaml.Effect.State.read/3),
                    [ Variable (10, x/0) ]))))
    ])

12
Value
  (non_rec, @.,
    [
      ((add_multiple_by_refs, [ ],
        [ (a, Type (Z/3)); (b, Type (Z/3)); (c, Type (Z/3)); (d, Type (Z/3)) ],
        Monad
          ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
            Type (Z/3))),
        Bind
          (?,
            Apply
              (13, Variable (13, OCaml.Pervasives.ref/3),
                [ Variable (13, a/0) ]), Some x,
            Bind
              (?,
                Bind
                  (?,
                    Bind
                      (?,
                        Apply
                          (14,
                            Variable
                              (14,
                                OCaml.Effect.State.read/3),
                            [ Variable (14, x/0) ]),
                        Some x_1,
                        Return
                          (?,
                            Apply
                              (14,
                                Variable (14, Z.add/3),
                                [
                                  Variable
                                    (?,
                                      x_1/0);
                                  Variable (14, b/0)
                                ]))), Some x_1,
                    Apply
                      (14,
                        Variable
                          (14, OCaml.Effect.State.write/3),
                        [
                          Variable (14, x/0);
                          Variable (?, x_1/0)
                        ])), None,
                Bind
                  (?,
                    Apply
                      (15,
                        Variable (15, OCaml.Pervasives.ref/3),
                        [ Variable (15, c/0) ]), Some y,
                    Bind
                      (?,
                        Bind
                          (?,
                            Bind
                              (?,
                                Apply
                                  (16,
                                    Variable
                                      (16,
                                        OCaml.Effect.State.read/3),
                                    [
                                      Variable
                                        (16,
                                          y/0)
                                    ]), Some x_1,
                                Return
                                  (?,
                                    Apply
                                      (16,
                                        Variable
                                          (16,
                                            Z.add/3),
                                        [
                                          Variable
                                            (?,
                                              x_1/0);
                                          Variable
                                            (16,
                                              d/0)
                                        ]))),
                            Some x_1,
                            Apply
                              (16,
                                Variable
                                  (16,
                                    OCaml.Effect.State.write/3),
                                [
                                  Variable (16, y/0);
                                  Variable
                                    (?,
                                      x_1/0)
                                ])), None,
                        Bind
                          (?,
                            Bind
                              (?,
                                Bind
                                  (?,
                                    Apply
                                      (17,
                                        Variable
                                          (17,
                                            OCaml.Effect.State.read/3),
                                        [
                                          Variable
                                            (17,
                                              x/0)
                                        ]),
                                    Some x_1,
                                    Bind
                                      (?,
                                        Apply
                                          (17,
                                            Variable
                                              (17,
                                                OCaml.Effect.State.read/3),
                                            [
                                              Variable
                                                (17,
                                                  y/0)
                                            ]),
                                        Some
                                          x_2,
                                        Return
                                          (?,
                                            Apply
                                              (17,
                                                Variable
                                                  (17,
                                                    Z.add/3),
                                                [
                                                  Variable
                                                    (?,
                                                      x_1/0);
                                                  Variable
                                                    (?,
                                                      x_2/0)
                                                ])))),
                                Some x_1,
                                Apply
                                  (17,
                                    Variable
                                      (17,
                                        OCaml.Pervasives.ref/3),
                                    [
                                      Variable
                                        (?,
                                          x_1/0)
                                    ])), Some z,
                            Apply
                              (18,
                                Variable
                                  (18,
                                    OCaml.Effect.State.read/3),
                                [ Variable (18, z/0) ])))))))
    ])

20
Value
  (non_rec, @.,
    [
      ((set_ref, [ ], [ (x, Type (OCaml.Effect.State.t/3, Type (Z/3))) ],
        Monad
          ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
            Type (unit/3))),
        Apply
          (21, Variable (21, OCaml.Effect.State.write/3),
            [ Variable (21, x/0); Constant (21, Int(15)) ]))
    ])

23
Value
  (non_rec, @.,
    [
      ((get_ref, [ ], [ (x, Type (OCaml.Effect.State.t/3, Type (Z/3))) ],
        Monad
          ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
            Type (Z/3))),
        Apply
          (24, Variable (24, OCaml.Effect.State.read/3),
            [ Variable (24, x/0) ]))
    ])

26
Value
  (non_rec, @.,
    [
      ((update_ref, [ ], [ (x, Type (OCaml.Effect.State.t/3, Type (Z/3))) ],
        Monad
          ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
            Type (unit/3))),
        Bind
          (?,
            Bind
              (?,
                Apply
                  (27, Variable (27, OCaml.Effect.State.read/3),
                    [ Variable (27, x/0) ]), Some x_1,
                Return
                  (?,
                    Apply
                      (27, Variable (27, Z.add/3),
                        [
                          Variable (?, x_1/0);
                          Constant (27, Int(5))
                        ]))), Some x_1,
            Apply
              (27, Variable (27, OCaml.Effect.State.write/3),
                [ Variable (27, x/0); Variable (?, x_1/0) ])))
    ])

29
Value
  (non_rec, @.,
    [
      ((new_ref, [ ], [ (x, Type (unit/3)) ],
        Monad
          ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
            Type (OCaml.Effect.State.t/3, Type (Z/3)))),
        Apply
          (30, Variable (30, OCaml.Pervasives.ref/3),
            [ Constant (30, Int(15)) ]))
    ])

32 Reference (r, r_state, Type (Z/3), Constant (32, Int(18)))

34
Value
  (non_rec, @.,
    [
      ((set_r, [ ], [ (x, Type (unit/3)) ],
        Monad
          ([
            TypeEffect
            (Type (Z/3), OCaml.Effect.State.state/3);
            TypeEffect
            (Type (r_state/0), OCaml.Effect.State.state/3)
          ], Type (unit/3))),
        Bind
          (?,
            Bind
              (?,
                Lift
                  (?,
                    [
                      TypeEffect
                      (Type (Z/3), OCaml.Effect.State.state/3)
                    ],
                    [
                      TypeEffect
                      (Type (Z/3), OCaml.Effect.State.state/3);
                      TypeEffect
                      (Type (r_state/0),
                        OCaml.Effect.State.state/3)
                    ],
                    Apply
                      (?,
                        Variable
                          (?, OCaml.Effect.State.peekstate/3),
                        [ Tuple (?) ])), Some x_1,
                Lift
                  (?,
                    [
                      TypeEffect
                      (Type (r_state/0),
                        OCaml.Effect.State.state/3)
                    ],
                    [
                      TypeEffect
                      (Type (Z/3), OCaml.Effect.State.state/3);
                      TypeEffect
                      (Type (r_state/0),
                        OCaml.Effect.State.state/3)
                    ],
                    Apply
                      (?,
                        Variable
                          (?, OCaml.Effect.State.global/3),
                        [
                          Variable (34, r/0);
                          Variable (?, x_1/0)
                        ]))), Some x_1,
            Lift
              (?,
                [ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
                [
                  TypeEffect
                  (Type (Z/3), OCaml.Effect.State.state/3);
                  TypeEffect
                  (Type (r_state/0), OCaml.Effect.State.state/3)
                ],
                Apply
                  (34, Variable (34, set_ref/0),
                    [ Variable (?, x_1/0) ]))))
    ])

36
Value
  (non_rec, @.,
    [
      ((get_r, [ ], [ (x, Type (unit/3)) ],
        Monad
          ([
            TypeEffect
            (Type (Z/3), OCaml.Effect.State.state/3);
            TypeEffect
            (Type (r_state/0), OCaml.Effect.State.state/3)
          ], Type (Z/3))),
        Bind
          (?,
            Bind
              (?,
                Lift
                  (?,
                    [
                      TypeEffect
                      (Type (Z/3), OCaml.Effect.State.state/3)
                    ],
                    [
                      TypeEffect
                      (Type (Z/3), OCaml.Effect.State.state/3);
                      TypeEffect
                      (Type (r_state/0),
                        OCaml.Effect.State.state/3)
                    ],
                    Apply
                      (?,
                        Variable
                          (?, OCaml.Effect.State.peekstate/3),
                        [ Tuple (?) ])), Some x_1,
                Lift
                  (?,
                    [
                      TypeEffect
                      (Type (r_state/0),
                        OCaml.Effect.State.state/3)
                    ],
                    [
                      TypeEffect
                      (Type (Z/3), OCaml.Effect.State.state/3);
                      TypeEffect
                      (Type (r_state/0),
                        OCaml.Effect.State.state/3)
                    ],
                    Apply
                      (?,
                        Variable
                          (?, OCaml.Effect.State.global/3),
                        [
                          Variable (36, r/0);
                          Variable (?, x_1/0)
                        ]))), Some x_1,
            Lift
              (?,
                [ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
                [
                  TypeEffect
                  (Type (Z/3), OCaml.Effect.State.state/3);
                  TypeEffect
                  (Type (r_state/0), OCaml.Effect.State.state/3)
                ],
                Apply
                  (36, Variable (36, get_ref/0),
                    [ Variable (?, x_1/0) ]))))
    ])

38
Value
  (non_rec, @.,
    [
      ((r_add_15, [ ], [ (x, Type (unit/3)) ],
        Monad
          ([
            TypeEffect
            (Type (Z/3), OCaml.Effect.State.state/3);
            TypeEffect
            (Type (r_state/0), OCaml.Effect.State.state/3)
          ], Type (Z/3))),
        Bind
          (?,
            Apply (39, Variable (39, get_r/0), [ Constructor (39, tt/3) ]),
            Some i,
            Bind
              (?,
                Apply
                  (40, Variable (40, set_r/0),
                    [ Constructor (40, tt/3) ]), None,
                Bind
                  (?,
                    Apply
                      (41, Variable (41, get_r/0),
                        [ Constructor (41, tt/3) ]), Some j,
                    Bind
                      (?,
                        Bind
                          (?,
                            Bind
                              (?,
                                Lift
                                  (?,
                                    [
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    [
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3);
                                      TypeEffect
                                      (Type
                                        (r_state/0),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    Apply
                                      (?,
                                        Variable
                                          (?,
                                            OCaml.Effect.State.peekstate/3),
                                        [
                                          Tuple
                                            (?)
                                        ])),
                                Some x_1,
                                Lift
                                  (?,
                                    [
                                      TypeEffect
                                      (Type
                                        (r_state/0),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    [
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3);
                                      TypeEffect
                                      (Type
                                        (r_state/0),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    Apply
                                      (?,
                                        Variable
                                          (?,
                                            OCaml.Effect.State.global/3),
                                        [
                                          Variable
                                            (42,
                                              r/0);
                                          Variable
                                            (?,
                                              x_1/0)
                                        ]))),
                            Some x_1,
                            Lift
                              (?,
                                [
                                  TypeEffect
                                  (Type (Z/3),
                                    OCaml.Effect.State.state/3)
                                ],
                                [
                                  TypeEffect
                                  (Type (Z/3),
                                    OCaml.Effect.State.state/3);
                                  TypeEffect
                                  (Type (r_state/0),
                                    OCaml.Effect.State.state/3)
                                ],
                                Apply
                                  (42,
                                    Variable
                                      (42,
                                        OCaml.Effect.State.write/3),
                                    [
                                      Variable
                                        (?,
                                          x_1/0);
                                      Apply
                                        (42,
                                          Variable
                                            (42,
                                              Z.add/3),
                                          [
                                            Variable
                                              (42,
                                                i/0);
                                            Variable
                                              (42,
                                                j/0)
                                          ])
                                    ]))), None,
                        Bind
                          (?,
                            Bind
                              (?,
                                Lift
                                  (?,
                                    [
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    [
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3);
                                      TypeEffect
                                      (Type
                                        (r_state/0),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    Apply
                                      (?,
                                        Variable
                                          (?,
                                            OCaml.Effect.State.peekstate/3),
                                        [
                                          Tuple
                                            (?)
                                        ])),
                                Some x_1,
                                Lift
                                  (?,
                                    [
                                      TypeEffect
                                      (Type
                                        (r_state/0),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    [
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3);
                                      TypeEffect
                                      (Type
                                        (r_state/0),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    Apply
                                      (?,
                                        Variable
                                          (?,
                                            OCaml.Effect.State.global/3),
                                        [
                                          Variable
                                            (43,
                                              r/0);
                                          Variable
                                            (?,
                                              x_1/0)
                                        ]))),
                            Some x_1,
                            Lift
                              (?,
                                [
                                  TypeEffect
                                  (Type (Z/3),
                                    OCaml.Effect.State.state/3)
                                ],
                                [
                                  TypeEffect
                                  (Type (Z/3),
                                    OCaml.Effect.State.state/3);
                                  TypeEffect
                                  (Type (r_state/0),
                                    OCaml.Effect.State.state/3)
                                ],
                                Apply
                                  (43,
                                    Variable
                                      (43,
                                        OCaml.Effect.State.read/3),
                                    [
                                      Variable
                                        (?,
                                          x_1/0)
                                    ]))))))))
    ])

45
Value
  (non_rec, @.,
    [
      ((mixed_type, [ ], [ (x, Type (unit/3)) ],
        Monad
          ([
            TypeEffect
            (Type (Z/3), OCaml.Effect.State.state/3);
            TypeEffect
            (Type (bool/3), OCaml.Effect.State.state/3);
            TypeEffect
            (Type (r_state/0), OCaml.Effect.State.state/3);
            TypeEffect
            (Type (string/3), OCaml.Effect.State.state/3)
          ], (Type (bool/3) * Type (string/3) * Type (Z/3)))),
        Bind
          (?,
            Lift
              (?,
                [
                  TypeEffect
                  (Type (bool/3), OCaml.Effect.State.state/3)
                ],
                [
                  TypeEffect
                  (Type (Z/3), OCaml.Effect.State.state/3);
                  TypeEffect
                  (Type (bool/3), OCaml.Effect.State.state/3);
                  TypeEffect
                  (Type (r_state/0), OCaml.Effect.State.state/3);
                  TypeEffect
                  (Type (string/3), OCaml.Effect.State.state/3)
                ],
                Apply
                  (46, Variable (46, OCaml.Pervasives.ref/3),
                    [ Constructor (46, true/3) ])), Some b,
            Bind
              (?,
                Lift
                  (?,
                    [
                      TypeEffect
                      (Type (string/3),
                        OCaml.Effect.State.state/3)
                    ],
                    [
                      TypeEffect
                      (Type (Z/3), OCaml.Effect.State.state/3);
                      TypeEffect
                      (Type (bool/3), OCaml.Effect.State.state/3);
                      TypeEffect
                      (Type (r_state/0),
                        OCaml.Effect.State.state/3);
                      TypeEffect
                      (Type (string/3),
                        OCaml.Effect.State.state/3)
                    ],
                    Apply
                      (47,
                        Variable (47, OCaml.Pervasives.ref/3),
                        [ Constant (47, String("")) ])),
                Some str,
                LetFun 48
                  (non_rec, @.,
                    [
                      ((update, [ ], [ (x_1, Type (unit/3)) ],
                        Monad
                          ([
                            TypeEffect
                            (Type
                              (bool/3),
                              OCaml.Effect.State.state/3);
                            TypeEffect
                            (Type
                              (string/3),
                              OCaml.Effect.State.state/3)
                          ],
                            Type
                              (unit/3))),
                        Match
                          (?,
                            Variable
                              (?,
                                x_1/0),
                            [
                              (Constructor
                                (tt/3),
                                Bind
                                  (?,
                                    Lift
                                      (?,
                                        [
                                          TypeEffect
                                          (Type
                                            (bool/3),
                                            OCaml.Effect.State.state/3)
                                        ],
                                        [
                                          TypeEffect
                                          (Type
                                            (bool/3),
                                            OCaml.Effect.State.state/3);
                                          TypeEffect
                                          (Type
                                            (string/3),
                                            OCaml.Effect.State.state/3)
                                        ],
                                        Bind
                                          (?,
                                            Apply
                                              (49,
                                                Variable
                                                  (49,
                                                    OCaml.Effect.State.read/3),
                                                [
                                                  Variable
                                                    (49,
                                                      b/0)
                                                ]),
                                            Some
                                              x_2,
                                            Apply
                                              (49,
                                                Variable
                                                  (49,
                                                    OCaml.Effect.State.write/3),
                                                [
                                                  Variable
                                                    (49,
                                                      b/0);
                                                  Variable
                                                    (?,
                                                      x_2/0)
                                                ]))),
                                    None,
                                    Lift
                                      (?,
                                        [
                                          TypeEffect
                                          (Type
                                            (string/3),
                                            OCaml.Effect.State.state/3)
                                        ],
                                        [
                                          TypeEffect
                                          (Type
                                            (bool/3),
                                            OCaml.Effect.State.state/3);
                                          TypeEffect
                                          (Type
                                            (string/3),
                                            OCaml.Effect.State.state/3)
                                        ],
                                        Bind
                                          (?,
                                            Bind
                                              (?,
                                                Apply
                                                  (50,
                                                    Variable
                                                      (50,
                                                        OCaml.Effect.State.read/3),
                                                    [
                                                      Variable
                                                        (50,
                                                          str/0)
                                                    ]),
                                                Some
                                                  x_2,
                                                Return
                                                  (?,
                                                    Apply
                                                      (50,
                                                        Variable
                                                          (50,
                                                            String.append/3),
                                                        [
                                                          Constant
                                                            (50,
                                                              String("toggle "));
                                                          Variable
                                                            (?,
                                                              x_2/0)
                                                        ]))),
                                            Some
                                              x_2,
                                            Apply
                                              (50,
                                                Variable
                                                  (50,
                                                    OCaml.Effect.State.write/3),
                                                [
                                                  Variable
                                                    (50,
                                                      str/0);
                                                  Variable
                                                    (?,
                                                      x_2/0)
                                                ])))))
                            ]))
                    ]) in
                Bind
                  (?,
                    Lift
                      (?,
                        [
                          TypeEffect
                          (Type (bool/3),
                            OCaml.Effect.State.state/3);
                          TypeEffect
                          (Type (string/3),
                            OCaml.Effect.State.state/3)
                        ],
                        [
                          TypeEffect
                          (Type (Z/3),
                            OCaml.Effect.State.state/3);
                          TypeEffect
                          (Type (bool/3),
                            OCaml.Effect.State.state/3);
                          TypeEffect
                          (Type (r_state/0),
                            OCaml.Effect.State.state/3);
                          TypeEffect
                          (Type (string/3),
                            OCaml.Effect.State.state/3)
                        ],
                        Apply
                          (51, Variable (51, update/0),
                            [ Constructor (51, tt/3) ])),
                    None,
                    Bind
                      (?,
                        Lift
                          (?,
                            [
                              TypeEffect
                              (Type (bool/3),
                                OCaml.Effect.State.state/3);
                              TypeEffect
                              (Type (string/3),
                                OCaml.Effect.State.state/3)
                            ],
                            [
                              TypeEffect
                              (Type (Z/3),
                                OCaml.Effect.State.state/3);
                              TypeEffect
                              (Type (bool/3),
                                OCaml.Effect.State.state/3);
                              TypeEffect
                              (Type (r_state/0),
                                OCaml.Effect.State.state/3);
                              TypeEffect
                              (Type (string/3),
                                OCaml.Effect.State.state/3)
                            ],
                            Apply
                              (52,
                                Variable
                                  (52, update/0),
                                [
                                  Constructor
                                    (52,
                                      tt/3)
                                ])), None,
                        Bind
                          (?,
                            Lift
                              (?,
                                [
                                  TypeEffect
                                  (Type (bool/3),
                                    OCaml.Effect.State.state/3);
                                  TypeEffect
                                  (Type (string/3),
                                    OCaml.Effect.State.state/3)
                                ],
                                [
                                  TypeEffect
                                  (Type (Z/3),
                                    OCaml.Effect.State.state/3);
                                  TypeEffect
                                  (Type (bool/3),
                                    OCaml.Effect.State.state/3);
                                  TypeEffect
                                  (Type (r_state/0),
                                    OCaml.Effect.State.state/3);
                                  TypeEffect
                                  (Type (string/3),
                                    OCaml.Effect.State.state/3)
                                ],
                                Apply
                                  (53,
                                    Variable
                                      (53,
                                        update/0),
                                    [
                                      Constructor
                                        (53,
                                          tt/3)
                                    ])), None,
                            Bind
                              (?,
                                Lift
                                  (?,
                                    [
                                      TypeEffect
                                      (Type
                                        (bool/3),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    [
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3);
                                      TypeEffect
                                      (Type
                                        (bool/3),
                                        OCaml.Effect.State.state/3);
                                      TypeEffect
                                      (Type
                                        (r_state/0),
                                        OCaml.Effect.State.state/3);
                                      TypeEffect
                                      (Type
                                        (string/3),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    Apply
                                      (54,
                                        Variable
                                          (54,
                                            OCaml.Effect.State.read/3),
                                        [
                                          Variable
                                            (54,
                                              b/0)
                                        ])),
                                Some x_1,
                                Bind
                                  (?,
                                    Lift
                                      (?,
                                        [
                                          TypeEffect
                                          (Type
                                            (string/3),
                                            OCaml.Effect.State.state/3)
                                        ],
                                        [
                                          TypeEffect
                                          (Type
                                            (Z/3),
                                            OCaml.Effect.State.state/3);
                                          TypeEffect
                                          (Type
                                            (bool/3),
                                            OCaml.Effect.State.state/3);
                                          TypeEffect
                                          (Type
                                            (r_state/0),
                                            OCaml.Effect.State.state/3);
                                          TypeEffect
                                          (Type
                                            (string/3),
                                            OCaml.Effect.State.state/3)
                                        ],
                                        Apply
                                          (54,
                                            Variable
                                              (54,
                                                OCaml.Effect.State.read/3),
                                            [
                                              Variable
                                                (54,
                                                  str/0)
                                            ])),
                                    Some x_2,
                                    Bind
                                      (?,
                                        Lift
                                          (?,
                                            [
                                              TypeEffect
                                              (Type
                                                (Z/3),
                                                OCaml.Effect.State.state/3);
                                              TypeEffect
                                              (Type
                                                (r_state/0),
                                                OCaml.Effect.State.state/3)
                                            ],
                                            [
                                              TypeEffect
                                              (Type
                                                (Z/3),
                                                OCaml.Effect.State.state/3);
                                              TypeEffect
                                              (Type
                                                (bool/3),
                                                OCaml.Effect.State.state/3);
                                              TypeEffect
                                              (Type
                                                (r_state/0),
                                                OCaml.Effect.State.state/3);
                                              TypeEffect
                                              (Type
                                                (string/3),
                                                OCaml.Effect.State.state/3)
                                            ],
                                            Bind
                                              (?,
                                                Bind
                                                  (?,
                                                    Lift
                                                      (?,
                                                        [
                                                          TypeEffect
                                                          (Type
                                                            (Z/3),
                                                            OCaml.Effect.State.state/3)
                                                        ],
                                                        [
                                                          TypeEffect
                                                          (Type
                                                            (Z/3),
                                                            OCaml.Effect.State.state/3);
                                                          TypeEffect
                                                          (Type
                                                            (r_state/0),
                                                            OCaml.Effect.State.state/3)
                                                        ],
                                                        Apply
                                                          (?,
                                                            Variable
                                                              (?,
                                                                OCaml.Effect.State.peekstate/3),
                                                            [
                                                              Tuple
                                                                (?)
                                                            ])),
                                                    Some
                                                      x_3,
                                                    Lift
                                                      (?,
                                                        [
                                                          TypeEffect
                                                          (Type
                                                            (r_state/0),
                                                            OCaml.Effect.State.state/3)
                                                        ],
                                                        [
                                                          TypeEffect
                                                          (Type
                                                            (Z/3),
                                                            OCaml.Effect.State.state/3);
                                                          TypeEffect
                                                          (Type
                                                            (r_state/0),
                                                            OCaml.Effect.State.state/3)
                                                        ],
                                                        Apply
                                                          (?,
                                                            Variable
                                                              (?,
                                                                OCaml.Effect.State.global/3),
                                                            [
                                                              Variable
                                                                (54,
                                                                  r/0);
                                                              Variable
                                                                (?,
                                                                  x_3/0)
                                                            ]))),
                                                Some
                                                  x_3,
                                                Lift
                                                  (?,
                                                    [
                                                      TypeEffect
                                                      (Type
                                                        (Z/3),
                                                        OCaml.Effect.State.state/3)
                                                    ],
                                                    [
                                                      TypeEffect
                                                      (Type
                                                        (Z/3),
                                                        OCaml.Effect.State.state/3);
                                                      TypeEffect
                                                      (Type
                                                        (r_state/0),
                                                        OCaml.Effect.State.state/3)
                                                    ],
                                                    Apply
                                                      (54,
                                                        Variable
                                                          (54,
                                                            OCaml.Effect.State.read/3),
                                                        [
                                                          Variable
                                                            (?,
                                                              x_3/0)
                                                        ])))),
                                        Some
                                          x_3,
                                        Return
                                          (?,
                                            Tuple
                                              (54,
                                                Variable
                                                  (?,
                                                    x_1/0),
                                                Variable
                                                  (?,
                                                    x_2/0),
                                                Variable
                                                  (?,
                                                    x_3/0))))))))))))
    ])

56
Value
  (non_rec, @.,
    [
      ((partials_test, [ ], [ (x, Type (unit/3)) ],
        Monad
          ([
            TypeEffect
            (Type (Z/3), OCaml.Effect.State.state/3);
            TypeEffect
            (Type (list/3, Type (Z/3)), OCaml.Effect.State.state/3);
            TypeEffect
            (Type (r_state/0), OCaml.Effect.State.state/3)
          ], Type (OCaml.Effect.State.t/3, Type (Z/3)))),
        Match
          (?, Variable (?, x/0),
            [
              (Constructor (tt/3),
                LetFun 57
                  (non_rec, @.,
                    [
                      ((f1,
                        [
                        ],
                        [
                          (x,
                            Type
                              (OCaml.Effect.State.t/3,
                                Type
                                  (Z/3)));
                          (y,
                            Type
                              (Z/3))
                        ],
                        Monad
                          ([
                            TypeEffect
                            (Type
                              (Z/3),
                              OCaml.Effect.State.state/3)
                          ],
                            Type
                              (OCaml.Effect.State.t/3,
                                Type
                                  (Z/3)))),
                        Bind
                          (?,
                            Apply
                              (58,
                                Variable
                                  (58,
                                    OCaml.Effect.State.write/3),
                                [
                                  Variable
                                    (58,
                                      x/0);
                                  Variable
                                    (58,
                                      y/0)
                                ]),
                            None,
                            Return
                              (?,
                                Variable
                                  (59,
                                    x/0))))
                    ])
                  in
                Bind
                  (?,
                    Lift
                      (?,
                        [
                          TypeEffect
                          (Type
                            (Z/3),
                            OCaml.Effect.State.state/3);
                          TypeEffect
                          (Type
                            (r_state/0),
                            OCaml.Effect.State.state/3)
                        ],
                        [
                          TypeEffect
                          (Type
                            (Z/3),
                            OCaml.Effect.State.state/3);
                          TypeEffect
                          (Type
                            (list/3,
                              Type
                                (Z/3)),
                            OCaml.Effect.State.state/3);
                          TypeEffect
                          (Type
                            (r_state/0),
                            OCaml.Effect.State.state/3)
                        ],
                        Bind
                          (?,
                            Bind
                              (?,
                                Lift
                                  (?,
                                    [
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    [
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3);
                                      TypeEffect
                                      (Type
                                        (r_state/0),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    Apply
                                      (?,
                                        Variable
                                          (?,
                                            OCaml.Effect.State.peekstate/3),
                                        [
                                          Tuple
                                            (?)
                                        ])),
                                Some
                                  x_1,
                                Lift
                                  (?,
                                    [
                                      TypeEffect
                                      (Type
                                        (r_state/0),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    [
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3);
                                      TypeEffect
                                      (Type
                                        (r_state/0),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    Apply
                                      (?,
                                        Variable
                                          (?,
                                            OCaml.Effect.State.global/3),
                                        [
                                          Variable
                                            (60,
                                              r/0);
                                          Variable
                                            (?,
                                              x_1/0)
                                        ]))),
                            Some
                              x_1,
                            Return
                              (?,
                                Apply
                                  (60,
                                    Variable
                                      (60,
                                        f1/0),
                                    [
                                      Variable
                                        (?,
                                          x_1/0)
                                    ])))),
                    Some
                      f1_test,
                    Lift
                      (?,
                        [
                          TypeEffect
                          (Type
                            (Z/3),
                            OCaml.Effect.State.state/3);
                          TypeEffect
                          (Type
                            (list/3,
                              Type
                                (Z/3)),
                            OCaml.Effect.State.state/3)
                        ],
                        [
                          TypeEffect
                          (Type
                            (Z/3),
                            OCaml.Effect.State.state/3);
                          TypeEffect
                          (Type
                            (list/3,
                              Type
                                (Z/3)),
                            OCaml.Effect.State.state/3);
                          TypeEffect
                          (Type
                            (r_state/0),
                            OCaml.Effect.State.state/3)
                        ],
                        Bind
                          (?,
                            Lift
                              (?,
                                [
                                  TypeEffect
                                  (Type
                                    (Z/3),
                                    OCaml.Effect.State.state/3)
                                ],
                                [
                                  TypeEffect
                                  (Type
                                    (Z/3),
                                    OCaml.Effect.State.state/3);
                                  TypeEffect
                                  (Type
                                    (list/3,
                                      Type
                                        (Z/3)),
                                    OCaml.Effect.State.state/3)
                                ],
                                Apply
                                  (61,
                                    Variable
                                      (61,
                                        f1_test/0),
                                    [
                                      Constant
                                        (61,
                                          Int(15))
                                    ])),
                            Some
                              f1_test,
                            LetFun
                              62
                              (non_rec,
                                @.,
                                [
                                  ((f2,
                                    [
                                    ],
                                    [
                                      (l1,
                                        Type
                                          (OCaml.Effect.State.t/3,
                                            Type
                                              (list/3,
                                                Type
                                                  (Z/3))));
                                      (l2,
                                        Type
                                          (list/3,
                                            Type
                                              (string/3)))
                                    ],
                                    Monad
                                      ([
                                        TypeEffect
                                        (Type
                                          (Z/3),
                                          OCaml.Effect.State.state/3);
                                        TypeEffect
                                        (Type
                                          (list/3,
                                            Type
                                              (Z/3)),
                                          OCaml.Effect.State.state/3)
                                      ],
                                        Type
                                          (OCaml.Effect.State.t/3,
                                            Type
                                              (Z/3)))),
                                    Bind
                                      (?,
                                        Lift
                                          (?,
                                            [
                                              TypeEffect
                                              (Type
                                                (list/3,
                                                  Type
                                                    (Z/3)),
                                                OCaml.Effect.State.state/3)
                                            ],
                                            [
                                              TypeEffect
                                              (Type
                                                (Z/3),
                                                OCaml.Effect.State.state/3);
                                              TypeEffect
                                              (Type
                                                (list/3,
                                                  Type
                                                    (Z/3)),
                                                OCaml.Effect.State.state/3)
                                            ],
                                            Bind
                                              (?,
                                                Bind
                                                  (?,
                                                    Apply
                                                      (63,
                                                        Variable
                                                          (63,
                                                            OCaml.Effect.State.read/3),
                                                        [
                                                          Variable
                                                            (63,
                                                              l1/0)
                                                        ]),
                                                    Some
                                                      x_1,
                                                    Return
                                                      (?,
                                                        Apply
                                                          (63,
                                                            Variable
                                                              (63,
                                                                OCaml.List.length/-1),
                                                            [
                                                              Variable
                                                                (?,
                                                                  x_1/0)
                                                            ]))),
                                                Some
                                                  x_1,
                                                Return
                                                  (?,
                                                    Apply
                                                      (63,
                                                        Variable
                                                          (63,
                                                            Z.add/3),
                                                        [
                                                          Variable
                                                            (?,
                                                              x_1/0);
                                                          Apply
                                                            (63,
                                                              Variable
                                                                (63,
                                                                  OCaml.List.length/-1),
                                                              [
                                                                Variable
                                                                  (63,
                                                                    l2/0)
                                                              ])
                                                        ])))),
                                        Some
                                          x_1,
                                        Lift
                                          (?,
                                            [
                                              TypeEffect
                                              (Type
                                                (Z/3),
                                                OCaml.Effect.State.state/3)
                                            ],
                                            [
                                              TypeEffect
                                              (Type
                                                (Z/3),
                                                OCaml.Effect.State.state/3);
                                              TypeEffect
                                              (Type
                                                (list/3,
                                                  Type
                                                    (Z/3)),
                                                OCaml.Effect.State.state/3)
                                            ],
                                            Apply
                                              (63,
                                                Variable
                                                  (63,
                                                    OCaml.Pervasives.ref/3),
                                                [
                                                  Variable
                                                    (?,
                                                      x_1/0)
                                                ]))))
                                ])
                              in
                            Bind
                              (?,
                                Lift
                                  (?,
                                    [
                                      TypeEffect
                                      (Type
                                        (list/3,
                                          Type
                                            (Z/3)),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    [
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3);
                                      TypeEffect
                                      (Type
                                        (list/3,
                                          Type
                                            (Z/3)),
                                        OCaml.Effect.State.state/3)
                                    ],
                                    Bind
                                      (?,
                                        Apply
                                          (64,
                                            Variable
                                              (64,
                                                OCaml.Pervasives.ref/3),
                                            [
                                              Constructor
                                                (64,
                                                  cons/3,
                                                  Constant
                                                    (64,
                                                      Int(1)),
                                                  Constructor
                                                    (64,
                                                      cons/3,
                                                      Constant
                                                        (64,
                                                          Int(2)),
                                                      Constructor
                                                        (64,
                                                          cons/3,
                                                          Constant
                                                            (64,
                                                              Int(3)),
                                                          Constructor
                                                            (64,
                                                              []/3))))
                                            ]),
                                        Some
                                          x_1,
                                        Return
                                          (?,
                                            Apply
                                              (64,
                                                Variable
                                                  (64,
                                                    f2/0),
                                                [
                                                  Variable
                                                    (?,
                                                      x_1/0)
                                                ])))),
                                Some
                                  f2_test,
                                Bind
                                  (?,
                                    Apply
                                      (65,
                                        Variable
                                          (65,
                                            f2_test/0),
                                        [
                                          Constructor
                                            (65,
                                              cons/3,
                                              Constant
                                                (65,
                                                  String("hi")),
                                              Constructor
                                                (65,
                                                  cons/3,
                                                  Constant
                                                    (65,
                                                      String("hey")),
                                                  Constructor
                                                    (65,
                                                      []/3)))
                                        ]),
                                    Some
                                      f2_test,
                                    Lift
                                      (?,
                                        [
                                          TypeEffect
                                          (Type
                                            (Z/3),
                                            OCaml.Effect.State.state/3)
                                        ],
                                        [
                                          TypeEffect
                                          (Type
                                            (Z/3),
                                            OCaml.Effect.State.state/3);
                                          TypeEffect
                                          (Type
                                            (list/3,
                                              Type
                                                (Z/3)),
                                            OCaml.Effect.State.state/3)
                                        ],
                                        Bind
                                          (?,
                                            Apply
                                              (66,
                                                Variable
                                                  (66,
                                                    OCaml.Effect.State.read/3),
                                                [
                                                  Variable
                                                    (66,
                                                      f1_test/0)
                                                ]),
                                            Some
                                              x_1,
                                            Apply
                                              (66,
                                                Variable
                                                  (66,
                                                    f1/0),
                                                [
                                                  Variable
                                                    (66,
                                                      f2_test/0);
                                                  Variable
                                                    (?,
                                                      x_1/0)
                                                ])))))))))
            ]))
    ])

68
Value
  (non_rec, @.,
    [
      ((multiple_returns_test, [ ], [ (x, Type (unit/3)) ],
        Monad
          ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
            (Type (Z/3) * Type (OCaml.Effect.State.t/3, Type (Z/3))))),
        Match
          (?, Variable (?, x/0),
            [
              (Constructor (tt/3),
                LetFun 69
                  (non_rec, @.,
                    [
                      ((f,
                        [
                        ],
                        [
                          (x,
                            Type
                              (OCaml.Effect.State.t/3,
                                Type
                                  (Z/3)));
                          (y,
                            Type
                              (Z/3))
                        ],
                        Monad
                          ([
                            TypeEffect
                            (Type
                              (Z/3),
                              OCaml.Effect.State.state/3)
                          ],
                            (Type
                              (Z/3)
                              ->
                              Monad
                                ([
                                  TypeEffect
                                  (Type
                                    (Z/3),
                                    OCaml.Effect.State.state/3)
                                ],
                                  (Type
                                    (OCaml.Effect.State.t/3,
                                      Type
                                        (Z/3))
                                    ->
                                    Monad
                                      ([
                                        TypeEffect
                                        (Type
                                          (Z/3),
                                          OCaml.Effect.State.state/3)
                                      ],
                                        Type
                                          (OCaml.Effect.State.t/3,
                                            Type
                                              (Z/3)))))))),
                        Bind
                          (?,
                            Apply
                              (70,
                                Variable
                                  (70,
                                    OCaml.Effect.State.write/3),
                                [
                                  Variable
                                    (70,
                                      x/0);
                                  Variable
                                    (70,
                                      y/0)
                                ]),
                            None,
                            Return
                              (?,
                                Function
                                  (71,
                                    z,
                                    Bind
                                      (?,
                                        Bind
                                          (?,
                                            Bind
                                              (?,
                                                Apply
                                                  (72,
                                                    Variable
                                                      (72,
                                                        OCaml.Effect.State.read/3),
                                                    [
                                                      Variable
                                                        (72,
                                                          x/0)
                                                    ]),
                                                Some
                                                  x_1,
                                                Return
                                                  (?,
                                                    Apply
                                                      (72,
                                                        Variable
                                                          (72,
                                                            Z.add/3),
                                                        [
                                                          Variable
                                                            (?,
                                                              x_1/0);
                                                          Variable
                                                            (72,
                                                              z/0)
                                                        ]))),
                                            Some
                                              x_1,
                                            Apply
                                              (72,
                                                Variable
                                                  (72,
                                                    OCaml.Effect.State.write/3),
                                                [
                                                  Variable
                                                    (72,
                                                      x/0);
                                                  Variable
                                                    (?,
                                                      x_1/0)
                                                ])),
                                        None,
                                        Return
                                          (?,
                                            Function
                                              (73,
                                                w,
                                                Bind
                                                  (?,
                                                    Apply
                                                      (74,
                                                        Variable
                                                          (74,
                                                            OCaml.Effect.State.read/3),
                                                        [
                                                          Variable
                                                            (74,
                                                              w/0)
                                                        ]),
                                                    Some
                                                      tmp,
                                                    Bind
                                                      (?,
                                                        Bind
                                                          (?,
                                                            Bind
                                                              (?,
                                                                Apply
                                                                  (75,
                                                                    Variable
                                                                      (75,
                                                                        OCaml.Effect.State.read/3),
                                                                    [
                                                                      Variable
                                                                        (75,
                                                                          x/0)
                                                                    ]),
                                                                Some
                                                                  x_1,
                                                                Return
                                                                  (?,
                                                                    Apply
                                                                      (75,
                                                                        Variable
                                                                          (75,
                                                                            Z.mul/3),
                                                                        [
                                                                          Constant
                                                                            (75,
                                                                              Int(2));
                                                                          Variable
                                                                            (?,
                                                                              x_1/0)
                                                                        ]))),
                                                            Some
                                                              x_1,
                                                            Apply
                                                              (75,
                                                                Variable
                                                                  (75,
                                                                    OCaml.Effect.State.write/3),
                                                                [
                                                                  Variable
                                                                    (75,
                                                                      w/0);
                                                                  Variable
                                                                    (?,
                                                                      x_1/0)
                                                                ])),
                                                        None,
                                                        Bind
                                                          (?,
                                                            Apply
                                                              (76,
                                                                Variable
                                                                  (76,
                                                                    OCaml.Effect.State.write/3),
                                                                [
                                                                  Variable
                                                                    (76,
                                                                      x/0);
                                                                  Variable
                                                                    (76,
                                                                      tmp/0)
                                                                ]),
                                                            None,
                                                            Return
                                                              (?,
                                                                Variable
                                                                  (77,
                                                                    x/0))))))))))))
                    ])
                  in
                Bind
                  (?,
                    Apply
                      (80,
                        Variable
                          (80,
                            OCaml.Pervasives.ref/3),
                        [
                          Constant
                            (80,
                              Int(110))
                        ]),
                    Some
                      s,
                    Bind
                      (?,
                        Bind
                          (?,
                            Apply
                              (81,
                                Variable
                                  (81,
                                    OCaml.Pervasives.ref/3),
                                [
                                  Constant
                                    (81,
                                      Int(5))
                                ]),
                            Some
                              x_1,
                            Return
                              (?,
                                Apply
                                  (81,
                                    Variable
                                      (81,
                                        f/0),
                                    [
                                      Variable
                                        (?,
                                          x_1/0)
                                    ]))),
                        Some
                          f1,
                        Bind
                          (?,
                            Apply
                              (82,
                                Variable
                                  (82,
                                    f1/0),
                                [
                                  Constant
                                    (82,
                                      Int(2))
                                ]),
                            Some
                              f2,
                            Bind
                              (?,
                                Apply
                                  (83,
                                    Variable
                                      (83,
                                        f2/0),
                                    [
                                      Constant
                                        (83,
                                          Int(7))
                                    ]),
                                Some
                                  f3,
                                Bind
                                  (?,
                                    Apply
                                      (84,
                                        Variable
                                          (84,
                                            f3/0),
                                        [
                                          Variable
                                            (84,
                                              s/0)
                                        ]),
                                    Some
                                      f4,
                                    Bind
                                      (?,
                                        Apply
                                          (85,
                                            Variable
                                              (85,
                                                OCaml.Effect.State.read/3),
                                            [
                                              Variable
                                                (85,
                                                  f4/0)
                                            ]),
                                        Some
                                          x_1,
                                        Return
                                          (?,
                                            Tuple
                                              (85,
                                                Variable
                                                  (?,
                                                    x_1/0),
                                                Variable
                                                  (85,
                                                    s/0))))))))))
            ]))
    ])
