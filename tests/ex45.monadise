2 Exception (Ex1, ex1, ())

3 Exception (Ex2, ex2, (Type (Z)))

5
Value
  (non_rec, @.,
    [
      ((f, [ A ], [ (x, Type (unit)) ],
        Monad ([ Type (OCaml.exception, Type (Ex45/ex1)) ], A)),
        Match
          (5, Variable (?, Ex45/x),
            [
              (Constructor (tt),
                Apply
                  (5,
                    Variable
                      (5,
                        OCaml/Pervasives.raise),
                    [
                      Constructor
                        (5,
                          Ex45/Ex1,
                          Tuple
                            (?))
                    ]))
            ]))
    ])

6
Value
  (non_rec, @.,
    [
      ((g, [ A ], [ (y, Type (Z)) ],
        Monad ([ Type (OCaml.exception, Type (Ex45/ex2)) ], A)),
        Apply
          (6, Variable (6, OCaml/Pervasives.raise),
            [ Constructor (6, Ex45/Ex2, Tuple (?, Variable (6, Ex45/y))) ]))
    ])

7
Value
  (non_rec, @.,
    [
      ((h, [ A ], [ (x, Type (unit)) ],
        (Type (Z) ->
          (Type (unit) ->
            Monad ([ Type (OCaml.exception, Type (Ex45/ex2)) ], A)))),
        Match
          (7, Variable (?, Ex45/x),
            [
              (Constructor (tt),
                Function
                  (7, y,
                    Function
                      (7,
                        x_1,
                        Match
                          (7,
                            Variable
                              (?,
                                Ex45/x_1),
                            [
                              (Constructor
                                (tt),
                                Apply
                                  (7,
                                    Variable
                                      (7,
                                        OCaml/Pervasives.raise),
                                    [
                                      Constructor
                                        (7,
                                          Ex45/Ex2,
                                          Tuple
                                            (?,
                                              Variable
                                                (7,
                                                  Ex45/y)))
                                    ]))
                            ]))))
            ]))
    ])

9
Value
  (non_rec, @.,
    [
      ((x, [ A; B; C ], [ ],
        ((Type (unit) ->
          Monad ([ Type (OCaml.exception, Type (Ex45/ex1)) ], A)) *
          (Type (Z) ->
            Monad ([ Type (OCaml.exception, Type (Ex45/ex2)) ], B)) *
          (Type (unit) ->
            (Type (Z) ->
              (Type (unit) ->
                Monad ([ Type (OCaml.exception, Type (Ex45/ex2)) ], C)))))),
        Tuple
          (9, Variable (9, Ex45/f), Variable (9, Ex45/g),
            Variable (9, Ex45/h)))
    ])

11
Value
  (non_rec, @.,
    [
      ((f', [ A ], [ ],
        (Type (unit) ->
          Monad ([ Type (OCaml.exception, Type (Ex45/ex1)) ], A))),
        Match
          (11,
            Coerce
              (?, Variable (11, Ex45/x),
                ((Type (unit) ->
                  Monad
                    ([ Type (OCaml.exception, Type (Ex45/ex1)) ],
                      A)) *
                  (Type (Z) ->
                    Monad
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (Ex45/ex2))
                      ], ())) *
                  (Type (unit) ->
                    (Type (Z) ->
                      (Type (unit) ->
                        Monad
                          ([
                            Type
                              (OCaml.exception,
                                Type
                                  (Ex45/ex2))
                          ], ())))))),
            [ (Tuple (f, Any, Any), Variable (11, Ex45/f)) ]))
    ])

12
Value
  (non_rec, @.,
    [
      ((g', [ A ], [ ],
        (Type (Z) -> Monad ([ Type (OCaml.exception, Type (Ex45/ex2)) ], A))),
        Match
          (12,
            Coerce
              (?, Variable (12, Ex45/x),
                ((Type (unit) ->
                  Monad
                    ([ Type (OCaml.exception, Type (Ex45/ex1)) ],
                      ())) *
                  (Type (Z) ->
                    Monad
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (Ex45/ex2))
                      ], A)) *
                  (Type (unit) ->
                    (Type (Z) ->
                      (Type (unit) ->
                        Monad
                          ([
                            Type
                              (OCaml.exception,
                                Type
                                  (Ex45/ex2))
                          ], ())))))),
            [ (Tuple (Any, g, Any), Variable (12, Ex45/g)) ]))
    ])

13
Value
  (non_rec, @.,
    [
      ((h', [ A ], [ ],
        (Type (unit) ->
          (Type (Z) ->
            (Type (unit) ->
              Monad ([ Type (OCaml.exception, Type (Ex45/ex2)) ], A))))),
        Match
          (13,
            Coerce
              (?, Variable (13, Ex45/x),
                ((Type (unit) ->
                  Monad
                    ([ Type (OCaml.exception, Type (Ex45/ex1)) ],
                      ())) *
                  (Type (Z) ->
                    Monad
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (Ex45/ex2))
                      ], ())) *
                  (Type (unit) ->
                    (Type (Z) ->
                      (Type (unit) ->
                        Monad
                          ([
                            Type
                              (OCaml.exception,
                                Type
                                  (Ex45/ex2))
                          ], A)))))),
            [ (Tuple (Any, Any, h), Variable (13, Ex45/h)) ]))
    ])

15
Value
  (non_rec, @.,
    [
      ((temp, [ A; B; C ], [ ],
        ((Type (unit) ->
          Monad ([ Type (OCaml.exception, Type (Ex45/ex1)) ], A)) *
          (Type (Z) ->
            Monad ([ Type (OCaml.exception, Type (Ex45/ex2)) ], B)) *
          (Type (unit) ->
            (Type (Z) ->
              (Type (unit) ->
                Monad ([ Type (OCaml.exception, Type (Ex45/ex2)) ], C)))))),
        Variable (15, Ex45/x))
    ])

15
Value
  (non_rec, @.,
    [
      ((f'', [ A ], [ ],
        (Type (unit) ->
          Monad ([ Type (OCaml.exception, Type (Ex45/ex1)) ], A))),
        Match
          (?,
            Coerce
              (?, Variable (?, Ex45/temp),
                ((Type (unit) ->
                  Monad
                    ([ Type (OCaml.exception, Type (Ex45/ex1)) ],
                      A)) *
                  (Type (Z) ->
                    Monad
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (Ex45/ex2))
                      ], ())) *
                  (Type (unit) ->
                    (Type (Z) ->
                      (Type (unit) ->
                        Monad
                          ([
                            Type
                              (OCaml.exception,
                                Type
                                  (Ex45/ex2))
                          ], ())))))),
            [ (Tuple (f'', g'', h''), Variable (?, Ex45/f'')) ]))
    ])

15
Value
  (non_rec, @.,
    [
      ((g'', [ B ], [ ],
        (Type (Z) -> Monad ([ Type (OCaml.exception, Type (Ex45/ex2)) ], B))),
        Match
          (?,
            Coerce
              (?, Variable (?, Ex45/temp),
                ((Type (unit) ->
                  Monad
                    ([ Type (OCaml.exception, Type (Ex45/ex1)) ],
                      ())) *
                  (Type (Z) ->
                    Monad
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (Ex45/ex2))
                      ], B)) *
                  (Type (unit) ->
                    (Type (Z) ->
                      (Type (unit) ->
                        Monad
                          ([
                            Type
                              (OCaml.exception,
                                Type
                                  (Ex45/ex2))
                          ], ())))))),
            [ (Tuple (f'', g'', h''), Variable (?, Ex45/g'')) ]))
    ])

15
Value
  (non_rec, @.,
    [
      ((h'', [ C ], [ ],
        (Type (unit) ->
          (Type (Z) ->
            (Type (unit) ->
              Monad ([ Type (OCaml.exception, Type (Ex45/ex2)) ], C))))),
        Match
          (?,
            Coerce
              (?, Variable (?, Ex45/temp),
                ((Type (unit) ->
                  Monad
                    ([ Type (OCaml.exception, Type (Ex45/ex1)) ],
                      ())) *
                  (Type (Z) ->
                    Monad
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (Ex45/ex2))
                      ], ())) *
                  (Type (unit) ->
                    (Type (Z) ->
                      (Type (unit) ->
                        Monad
                          ([
                            Type
                              (OCaml.exception,
                                Type
                                  (Ex45/ex2))
                          ], C)))))),
            [ (Tuple (f'', g'', h''), Variable (?, Ex45/h'')) ]))
    ])

17
Value
  (non_rec, @.,
    [
      ((ff, [ A ], [ ],
        (Type (unit) ->
          Monad ([ Type (OCaml.exception, Type (Ex45/ex1)) ], A))),
        Match
          (17,
            Coerce
              (?, Variable (17, Ex45/x),
                ((Type (unit) ->
                  Monad
                    ([ Type (OCaml.exception, Type (Ex45/ex1)) ],
                      A)) *
                  (Type (Z) ->
                    Monad
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (Ex45/ex2))
                      ], ())) *
                  (Type (unit) ->
                    (Type (Z) ->
                      (Type (unit) ->
                        Monad
                          ([
                            Type
                              (OCaml.exception,
                                Type
                                  (Ex45/ex2))
                          ], ())))))),
            [ (Tuple (f, Any, Any), Variable (17, Ex45/f)) ]))
    ])

18
Value
  (non_rec, @.,
    [
      ((gg, [ A ], [ ],
        (Type (Z) -> Monad ([ Type (OCaml.exception, Type (Ex45/ex2)) ], A))),
        Match
          (18,
            Coerce
              (?, Variable (18, Ex45/x),
                ((Type (unit) ->
                  Monad
                    ([ Type (OCaml.exception, Type (Ex45/ex1)) ],
                      ())) *
                  (Type (Z) ->
                    Monad
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (Ex45/ex2))
                      ], A)) *
                  (Type (unit) ->
                    (Type (Z) ->
                      (Type (unit) ->
                        Monad
                          ([
                            Type
                              (OCaml.exception,
                                Type
                                  (Ex45/ex2))
                          ], ())))))),
            [ (Tuple (Any, g, Any), Variable (18, Ex45/g)) ]))
    ])

19
Value
  (non_rec, @.,
    [
      ((hh, [ A ], [ ],
        (Type (unit) ->
          (Type (Z) ->
            (Type (unit) ->
              Monad ([ Type (OCaml.exception, Type (Ex45/ex2)) ], A))))),
        Match
          (19,
            Coerce
              (?, Variable (19, Ex45/x),
                ((Type (unit) ->
                  Monad
                    ([ Type (OCaml.exception, Type (Ex45/ex1)) ],
                      ())) *
                  (Type (Z) ->
                    Monad
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (Ex45/ex2))
                      ], ())) *
                  (Type (unit) ->
                    (Type (Z) ->
                      (Type (unit) ->
                        Monad
                          ([
                            Type
                              (OCaml.exception,
                                Type
                                  (Ex45/ex2))
                          ], A)))))),
            [ (Tuple (Any, Any, h), Variable (19, Ex45/h)) ]))
    ])

21
Value
  (non_rec, @.,
    [
      ((fff, [ ], [ ],
        (Type (unit) ->
          Monad ([ Type (OCaml.exception, Type (Ex45/ex1)) ], Type (unit)))),
        Match
          (21,
            Coerce
              (?, Variable (21, Ex45/x),
                ((Type (unit) ->
                  Monad
                    ([ Type (OCaml.exception, Type (Ex45/ex1)) ],
                      Type (unit))) *
                  (Type (Z) ->
                    Monad
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (Ex45/ex2))
                      ], ())) *
                  (Type (unit) ->
                    (Type (Z) ->
                      (Type (unit) ->
                        Monad
                          ([
                            Type
                              (OCaml.exception,
                                Type
                                  (Ex45/ex2))
                          ], ())))))),
            [ (Tuple (f, Any, Any), Variable (21, Ex45/f)) ]))
    ])

22
Value
  (non_rec, @.,
    [
      ((ggg, [ ], [ ],
        (Type (Z) ->
          Monad ([ Type (OCaml.exception, Type (Ex45/ex2)) ], Type (unit)))),
        Match
          (22,
            Coerce
              (?, Variable (22, Ex45/x),
                ((Type (unit) ->
                  Monad
                    ([ Type (OCaml.exception, Type (Ex45/ex1)) ],
                      ())) *
                  (Type (Z) ->
                    Monad
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (Ex45/ex2))
                      ], Type (unit))) *
                  (Type (unit) ->
                    (Type (Z) ->
                      (Type (unit) ->
                        Monad
                          ([
                            Type
                              (OCaml.exception,
                                Type
                                  (Ex45/ex2))
                          ], ())))))),
            [ (Tuple (Any, g, Any), Variable (22, Ex45/g)) ]))
    ])

23
Value
  (non_rec, @.,
    [
      ((hhh, [ ], [ ],
        (Type (unit) ->
          (Type (Z) ->
            (Type (unit) ->
              Monad
                ([ Type (OCaml.exception, Type (Ex45/ex2)) ],
                  Type (unit)))))),
        Match
          (23,
            Coerce
              (?, Variable (23, Ex45/x),
                ((Type (unit) ->
                  Monad
                    ([ Type (OCaml.exception, Type (Ex45/ex1)) ],
                      ())) *
                  (Type (Z) ->
                    Monad
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (Ex45/ex2))
                      ], ())) *
                  (Type (unit) ->
                    (Type (Z) ->
                      (Type (unit) ->
                        Monad
                          ([
                            Type
                              (OCaml.exception,
                                Type
                                  (Ex45/ex2))
                          ], Type (unit))))))),
            [ (Tuple (Any, Any, h), Variable (23, Ex45/h)) ]))
    ])

25
Value
  (non_rec, @.,
    [
      ((f1, [ A ], [ ],
        (Type (unit) ->
          Monad ([ Type (OCaml.exception, Type (Ex45/ex1)) ], A))),
        Match
          (25,
            Coerce
              (?, Variable (25, Ex45/f),
                (Type (unit) ->
                  Monad
                    ([ Type (OCaml.exception, Type (Ex45/ex1)) ],
                      A))), [ (x, Variable (25, Ex45/x)) ]))
    ])

26
Value
  (non_rec, @.,
    [
      ((g1, [ A ], [ ],
        (Type (Z) -> Monad ([ Type (OCaml.exception, Type (Ex45/ex2)) ], A))),
        Match
          (26,
            Coerce
              (?, Variable (26, Ex45/g),
                (Type (Z) ->
                  Monad
                    ([ Type (OCaml.exception, Type (Ex45/ex2)) ],
                      A))), [ (x, Variable (26, Ex45/x)) ]))
    ])

27
Value
  (non_rec, @.,
    [
      ((h1, [ A ], [ ],
        (Type (unit) ->
          (Type (Z) ->
            (Type (unit) ->
              Monad ([ Type (OCaml.exception, Type (Ex45/ex2)) ], A))))),
        Match
          (27,
            Coerce
              (?, Variable (27, Ex45/h),
                (Type (unit) ->
                  (Type (Z) ->
                    (Type (unit) ->
                      Monad
                        ([
                          Type
                            (OCaml.exception,
                              Type
                                (Ex45/ex2))
                        ], A))))),
            [ (x, Variable (27, Ex45/x)) ]))
    ])
