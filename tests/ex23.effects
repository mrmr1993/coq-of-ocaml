4
Value
  (non_rec, @.,
    [ ((n, [ ], [ ], Type (Z)), Constant ((4, Effect ([ ], .)), Int(12))) ])

5
Value
  (non_rec, @.,
    [
      ((c1, [ ], [ ], Type (ascii)), Constant ((5, Effect ([ ], .)), Char("a")))
    ])

6
Value
  (non_rec, @.,
    [
      ((c2, [ ], [ ], Type (ascii)),
        Constant ((6, Effect ([ ], .)), Char("\\n")))
    ])

7
Value
  (non_rec, @.,
    [
      ((c3, [ ], [ ], Type (ascii)),
        Constant ((7, Effect ([ ], .)), Char("\\t")))
    ])

8
Value
  (non_rec, @.,
    [
      ((c4, [ ], [ ], Type (ascii)), Constant ((8, Effect ([ ], .)), Char("\"")))
    ])

9
Value
  (non_rec, @.,
    [
      ((s, [ ], [ ], Type (string)),
        Constant ((9, Effect ([ ], .)), String("hi\n\t:)\"")))
    ])

11
Value
  (non_rec, @.,
    [ ((b1, [ ], [ ], Type (bool)), Constructor ((11, Effect ([ ], .)), false)) ])

12
Value
  (non_rec, @.,
    [ ((b2, [ ], [ ], Type (bool)), Constructor ((12, Effect ([ ], .)), true)) ])

13
Value
  (non_rec, @.,
    [ ((u, [ ], [ ], Type (unit)), Constructor ((13, Effect ([ ], .)), tt)) ])

16
Value
  (non_rec, @.,
    [
      ((l1, [ A ], [ ], Type (list, A)), Constructor ((16, Effect ([ ], .)), []))
    ])

17
Value
  (non_rec, @.,
    [
      ((l2, [ ], [ ], Type (list, Type (Z))),
        Constructor
          ((17, Effect ([ ], .)), cons,
            Constant ((17, Effect ([ ], .)), Int(0)),
            Constructor
              ((17, Effect ([ ], .)), cons,
                Constant ((17, Effect ([ ], .)), Int(1)),
                Constructor
                  ((17, Effect ([ ], .)), cons,
                    Constant ((17, Effect ([ ], .)), Int(2)),
                    Constructor
                      ((17, Effect ([ ], .)), cons,
                        Constant
                          ((17, Effect ([ ], .)), Int(3)),
                        Constructor
                          ((17, Effect ([ ], .)), []))))))
    ])

18
Value
  (non_rec, @.,
    [
      ((o, [ ], [ ], Type (option, Type (Z))),
        IfThenElse
          ((18, Effect ([ ], .)), Variable ((18, Effect ([ ], .)), b1),
            Constructor ((18, Effect ([ ], .)), None),
            Constructor
              ((18, Effect ([ ], .)), Some,
                Variable ((18, Effect ([ ], .)), n))))
    ])

26
Value
  (non_rec, @.,
    [
      ((e_match, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml.exception, Type (OCaml.match_failure)) ], B)),
        Match
          ((26,
            Effect
              ([ Type (OCaml.exception, Type (OCaml.match_failure)) ], .)),
            Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((26,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.match_failure))
                      ],
                        .)),
                    Variable
                      ((26,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.match_failure))
                              ]->
                              .)),
                        OCaml.Pervasives.raise),
                    [
                      Constructor
                        ((26,
                          Effect
                            ([
                            ],
                              .)),
                          OCaml.Match_failure,
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .)),
                              Tuple
                                ((26,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Constant
                                    ((26,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      String("error")),
                                  Constant
                                    ((26,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Int(1)),
                                  Constant
                                    ((26,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Int(2)))))
                    ]))
            ]))
    ])

27
Value
  (non_rec, @.,
    [
      ((e_assert, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml.exception, Type (OCaml.assert_failure)) ], B)),
        Match
          ((27,
            Effect
              ([ Type (OCaml.exception, Type (OCaml.assert_failure)) ],
                .)), Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((27,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.assert_failure))
                      ],
                        .)),
                    Variable
                      ((27,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.assert_failure))
                              ]->
                              .)),
                        OCaml.Pervasives.raise),
                    [
                      Constructor
                        ((27,
                          Effect
                            ([
                            ],
                              .)),
                          OCaml.Assert_failure,
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .)),
                              Tuple
                                ((27,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Constant
                                    ((27,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      String("error")),
                                  Constant
                                    ((27,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Int(1)),
                                  Constant
                                    ((27,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Int(2)))))
                    ]))
            ]))
    ])

28
Value
  (non_rec, @.,
    [
      ((e_invalid, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml.exception, Type (OCaml.invalid_argument)) ], B)),
        Match
          ((28,
            Effect
              ([ Type (OCaml.exception, Type (OCaml.invalid_argument)) ],
                .)), Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((28,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.invalid_argument))
                      ],
                        .)),
                    Variable
                      ((28,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.invalid_argument))
                              ]->
                              .)),
                        OCaml.Pervasives.raise),
                    [
                      Constructor
                        ((28,
                          Effect
                            ([
                            ],
                              .)),
                          OCaml.Invalid_argument,
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .)),
                              Constant
                                ((28,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  String("error"))))
                    ]))
            ]))
    ])

29
Value
  (non_rec, @.,
    [
      ((e_failure, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml.exception, Type (OCaml.failure)) ], B)),
        Match
          ((29, Effect ([ Type (OCaml.exception, Type (OCaml.failure)) ], .)),
            Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((29,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.failure))
                      ],
                        .)),
                    Variable
                      ((29,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.failure))
                              ]->
                              .)),
                        OCaml.Pervasives.raise),
                    [
                      Constructor
                        ((29,
                          Effect
                            ([
                            ],
                              .)),
                          OCaml.Failure,
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .)),
                              Constant
                                ((29,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  String("error"))))
                    ]))
            ]))
    ])

30
Value
  (non_rec, @.,
    [
      ((e_not_found, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml.exception, Type (OCaml.not_found)) ], B)),
        Match
          ((30,
            Effect ([ Type (OCaml.exception, Type (OCaml.not_found)) ], .)),
            Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((30,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.not_found))
                      ],
                        .)),
                    Variable
                      ((30,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.not_found))
                              ]->
                              .)),
                        OCaml.Pervasives.raise),
                    [
                      Constructor
                        ((30,
                          Effect
                            ([
                            ],
                              .)),
                          OCaml.Not_found,
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .))))
                    ]))
            ]))
    ])

31
Value
  (non_rec, @.,
    [
      ((e_out_of_mem, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml.exception, Type (OCaml.out_of_memory)) ], B)),
        Match
          ((31,
            Effect
              ([ Type (OCaml.exception, Type (OCaml.out_of_memory)) ], .)),
            Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((31,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.out_of_memory))
                      ],
                        .)),
                    Variable
                      ((31,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.out_of_memory))
                              ]->
                              .)),
                        OCaml.Pervasives.raise),
                    [
                      Constructor
                        ((31,
                          Effect
                            ([
                            ],
                              .)),
                          OCaml.Out_of_memory,
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .))))
                    ]))
            ]))
    ])

32
Value
  (non_rec, @.,
    [
      ((e_overflow, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml.exception, Type (OCaml.stack_overflow)) ], B)),
        Match
          ((32,
            Effect
              ([ Type (OCaml.exception, Type (OCaml.stack_overflow)) ],
                .)), Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((32,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.stack_overflow))
                      ],
                        .)),
                    Variable
                      ((32,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.stack_overflow))
                              ]->
                              .)),
                        OCaml.Pervasives.raise),
                    [
                      Constructor
                        ((32,
                          Effect
                            ([
                            ],
                              .)),
                          OCaml.Stack_overflow,
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .))))
                    ]))
            ]))
    ])

33
Value
  (non_rec, @.,
    [
      ((e_sys_err, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml.exception, Type (OCaml.sys_error)) ], B)),
        Match
          ((33,
            Effect ([ Type (OCaml.exception, Type (OCaml.sys_error)) ], .)),
            Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((33,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.sys_error))
                      ],
                        .)),
                    Variable
                      ((33,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.sys_error))
                              ]->
                              .)),
                        OCaml.Pervasives.raise),
                    [
                      Constructor
                        ((33,
                          Effect
                            ([
                            ],
                              .)),
                          OCaml.Sys_error,
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .)),
                              Constant
                                ((33,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  String("error"))))
                    ]))
            ]))
    ])

34
Value
  (non_rec, @.,
    [
      ((e_EOF, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml.exception, Type (OCaml.end_of_file)) ], B)),
        Match
          ((34,
            Effect
              ([ Type (OCaml.exception, Type (OCaml.end_of_file)) ], .)),
            Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((34,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.end_of_file))
                      ],
                        .)),
                    Variable
                      ((34,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.end_of_file))
                              ]->
                              .)),
                        OCaml.Pervasives.raise),
                    [
                      Constructor
                        ((34,
                          Effect
                            ([
                            ],
                              .)),
                          OCaml.End_of_file,
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .))))
                    ]))
            ]))
    ])

35
Value
  (non_rec, @.,
    [
      ((e_div, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml.exception, Type (OCaml.division_by_zero)) ], B)),
        Match
          ((35,
            Effect
              ([ Type (OCaml.exception, Type (OCaml.division_by_zero)) ],
                .)), Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((35,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.division_by_zero))
                      ],
                        .)),
                    Variable
                      ((35,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.division_by_zero))
                              ]->
                              .)),
                        OCaml.Pervasives.raise),
                    [
                      Constructor
                        ((35,
                          Effect
                            ([
                            ],
                              .)),
                          OCaml.Division_by_zero,
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .))))
                    ]))
            ]))
    ])

36
Value
  (non_rec, @.,
    [
      ((e_sys_blocked, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml.exception, Type (OCaml.sys_blocked_io)) ], B)),
        Match
          ((36,
            Effect
              ([ Type (OCaml.exception, Type (OCaml.sys_blocked_io)) ],
                .)), Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((36,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.sys_blocked_io))
                      ],
                        .)),
                    Variable
                      ((36,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.sys_blocked_io))
                              ]->
                              .)),
                        OCaml.Pervasives.raise),
                    [
                      Constructor
                        ((36,
                          Effect
                            ([
                            ],
                              .)),
                          OCaml.Sys_blocked_io,
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .))))
                    ]))
            ]))
    ])

37
Value
  (non_rec, @.,
    [
      ((e_rec_module, [ A; B ], [ (x, A) ],
        Monad
          ([
            Type
              (OCaml.exception,
                Type
                  (OCaml.undefined_recursive_module))
          ], B)),
        Match
          ((37,
            Effect
              ([
                Type
                  (OCaml.exception,
                    Type
                      (OCaml.undefined_recursive_module))
              ], .)), Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((37,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.undefined_recursive_module))
                      ],
                        .)),
                    Variable
                      ((37,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.undefined_recursive_module))
                              ]->
                              .)),
                        OCaml.Pervasives.raise),
                    [
                      Constructor
                        ((37,
                          Effect
                            ([
                            ],
                              .)),
                          OCaml.Undefined_recursive_module,
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .)),
                              Tuple
                                ((37,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Constant
                                    ((37,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      String("error")),
                                  Constant
                                    ((37,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Int(1)),
                                  Constant
                                    ((37,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Int(2)))))
                    ]))
            ]))
    ])
