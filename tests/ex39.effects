3
Value
  (non_rec, @.,
    [
      ((get_local_ref, [ ], [ (tt, Type (unit/1)) ], Type (Z/1)),
        LetVar (4, Effect ([ OCaml.Effect.State.state/1 ], .)) x =
          Apply
            ((4, Effect ([ OCaml.Effect.State.state/1 ], .)),
              Variable
                ((4,
                  Effect
                    ([ ], . -[ OCaml.Effect.State.state/1 ]-> .)),
                  OCaml.Pervasives.ref/1),
              [ Constant ((4, Effect ([ ], .)), Int(12)) ]) in
        Apply
          ((5, Effect ([ OCaml.Effect.State.state/1 ], .)),
            Variable
              ((5, Effect ([ ], . -[ OCaml.Effect.State.state/1 ]-> .)),
                OCaml.Effect.State.read/1),
            [ Variable ((5, Effect ([ ], .)), x/0) ]))
    ])

7
Value
  (non_rec, @.,
    [
      ((set_local_ref, [ ], [ (tt, Type (unit/1)) ], Type (Z/1)),
        LetVar (8, Effect ([ OCaml.Effect.State.state/1 ], .)) x =
          Apply
            ((8, Effect ([ OCaml.Effect.State.state/1 ], .)),
              Variable
                ((8,
                  Effect
                    ([ ], . -[ OCaml.Effect.State.state/1 ]-> .)),
                  OCaml.Pervasives.ref/1),
              [ Constant ((8, Effect ([ ], .)), Int(12)) ]) in
        Sequence
          ((9, Effect ([ OCaml.Effect.State.state/1 ], .)),
            Apply
              ((9, Effect ([ OCaml.Effect.State.state/1 ], .)),
                Variable
                  ((9,
                    Effect
                      ([ ],
                        . ->
                          .
                            -[ OCaml.Effect.State.state/1 ]->
                            .)),
                    OCaml.Effect.State.write/1),
                [
                  Variable ((9, Effect ([ ], .)), x/0);
                  Constant ((9, Effect ([ ], .)), Int(15))
                ]),
            Apply
              ((10, Effect ([ OCaml.Effect.State.state/1 ], .)),
                Variable
                  ((10,
                    Effect
                      ([ ],
                        . -[ OCaml.Effect.State.state/1 ]-> .)),
                    OCaml.Effect.State.read/1),
                [ Variable ((10, Effect ([ ], .)), x/0) ])))
    ])

12
Value
  (non_rec, @.,
    [
      ((add_multiple_by_refs, [ ],
        [ (a, Type (Z/1)); (b, Type (Z/1)); (c, Type (Z/1)); (d, Type (Z/1)) ],
        Type (Z/1)),
        LetVar (13, Effect ([ OCaml.Effect.State.state/1 ], .)) x =
          Apply
            ((13, Effect ([ OCaml.Effect.State.state/1 ], .)),
              Variable
                ((13,
                  Effect
                    ([ ], . -[ OCaml.Effect.State.state/1 ]-> .)),
                  OCaml.Pervasives.ref/1),
              [ Variable ((13, Effect ([ ], .)), a/0) ]) in
        Sequence
          ((14, Effect ([ OCaml.Effect.State.state/1 ], .)),
            Apply
              ((14, Effect ([ OCaml.Effect.State.state/1 ], .)),
                Variable
                  ((14,
                    Effect
                      ([ ],
                        . ->
                          .
                            -[ OCaml.Effect.State.state/1 ]->
                            .)),
                    OCaml.Effect.State.write/1),
                [
                  Variable ((14, Effect ([ ], .)), x/0);
                  Apply
                    ((14,
                      Effect
                        ([
                          OCaml.Effect.State.state/1
                        ],
                          .)),
                      Variable
                        ((14,
                          Effect
                            ([
                            ],
                              .)),
                          Z.add/1),
                      [
                        Apply
                          ((14,
                            Effect
                              ([
                                OCaml.Effect.State.state/1
                              ],
                                .)),
                            Variable
                              ((14,
                                Effect
                                  ([
                                  ],
                                    .
                                      -[
                                        OCaml.Effect.State.state/1
                                      ]->
                                      .)),
                                OCaml.Effect.State.read/1),
                            [
                              Variable
                                ((14,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  x/0)
                            ]);
                        Variable
                          ((14,
                            Effect
                              ([
                              ],
                                .)),
                            b/0)
                      ])
                ]),
            LetVar (15, Effect ([ OCaml.Effect.State.state/1 ], .)) y =
              Apply
                ((15, Effect ([ OCaml.Effect.State.state/1 ], .)),
                  Variable
                    ((15,
                      Effect
                        ([ ],
                          .
                            -[ OCaml.Effect.State.state/1 ]->
                            .)), OCaml.Pervasives.ref/1),
                  [ Variable ((15, Effect ([ ], .)), c/0) ]) in
            Sequence
              ((16, Effect ([ OCaml.Effect.State.state/1 ], .)),
                Apply
                  ((16, Effect ([ OCaml.Effect.State.state/1 ], .)),
                    Variable
                      ((16,
                        Effect
                          ([ ],
                            . ->
                              .
                                -[
                                  OCaml.Effect.State.state/1
                                ]-> .)),
                        OCaml.Effect.State.write/1),
                    [
                      Variable ((16, Effect ([ ], .)), y/0);
                      Apply
                        ((16,
                          Effect
                            ([
                              OCaml.Effect.State.state/1
                            ],
                              .)),
                          Variable
                            ((16,
                              Effect
                                ([
                                ],
                                  .)),
                              Z.add/1),
                          [
                            Apply
                              ((16,
                                Effect
                                  ([
                                    OCaml.Effect.State.state/1
                                  ],
                                    .)),
                                Variable
                                  ((16,
                                    Effect
                                      ([
                                      ],
                                        .
                                          -[
                                            OCaml.Effect.State.state/1
                                          ]->
                                          .)),
                                    OCaml.Effect.State.read/1),
                                [
                                  Variable
                                    ((16,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      y/0)
                                ]);
                            Variable
                              ((16,
                                Effect
                                  ([
                                  ],
                                    .)),
                                d/0)
                          ])
                    ]),
                LetVar
                  (17, Effect ([ OCaml.Effect.State.state/1 ], .)) z
                  =
                  Apply
                    ((17,
                      Effect ([ OCaml.Effect.State.state/1 ], .)),
                      Variable
                        ((17,
                          Effect
                            ([ ],
                              .
                                -[
                                  OCaml.Effect.State.state/1
                                ]-> .)),
                          OCaml.Pervasives.ref/1),
                      [
                        Apply
                          ((17,
                            Effect
                              ([
                                OCaml.Effect.State.state/1
                              ],
                                .)),
                            Variable
                              ((17,
                                Effect
                                  ([
                                  ],
                                    .)),
                                Z.add/1),
                            [
                              Apply
                                ((17,
                                  Effect
                                    ([
                                      OCaml.Effect.State.state/1
                                    ],
                                      .)),
                                  Variable
                                    ((17,
                                      Effect
                                        ([
                                        ],
                                          .
                                            -[
                                              OCaml.Effect.State.state/1
                                            ]->
                                            .)),
                                      OCaml.Effect.State.read/1),
                                  [
                                    Variable
                                      ((17,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        x/0)
                                  ]);
                              Apply
                                ((17,
                                  Effect
                                    ([
                                      OCaml.Effect.State.state/1
                                    ],
                                      .)),
                                  Variable
                                    ((17,
                                      Effect
                                        ([
                                        ],
                                          .
                                            -[
                                              OCaml.Effect.State.state/1
                                            ]->
                                            .)),
                                      OCaml.Effect.State.read/1),
                                  [
                                    Variable
                                      ((17,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        y/0)
                                  ])
                            ])
                      ]) in
                Apply
                  ((18, Effect ([ OCaml.Effect.State.state/1 ], .)),
                    Variable
                      ((18,
                        Effect
                          ([ ],
                            .
                              -[
                                OCaml.Effect.State.state/1
                              ]-> .)),
                        OCaml.Effect.State.read/1),
                    [ Variable ((18, Effect ([ ], .)), z/0) ]))))
    ])
