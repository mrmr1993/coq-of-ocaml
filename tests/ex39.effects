Require [ OCaml.List ]

3
Value
  (non_rec, @.,
    [
      ((get_local_ref, [ ], [ (tt, Type (unit/3)) ], Type (Z/3)),
        LetVar
          (4,
            Effect
              ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
                .)) x =
          Apply
            ((4,
              Effect
                ([
                  TypeEffect
                  (Type (Z/3), OCaml.Effect.State.state/3)
                ], .)),
              Variable
                ((4,
                  Effect
                    ([ ],
                      .
                        -[
                          TypeEffect
                          (Type (Z/3),
                            OCaml.Effect.State.state/3)
                        ]-> .)), OCaml.Pervasives.ref/3),
              [ Constant ((4, Effect ([ ], .)), Int(12)) ]) in
        Apply
          ((5,
            Effect
              ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
                .)),
            Variable
              ((5,
                Effect
                  ([ ],
                    .
                      -[
                        TypeEffect
                        (Type (Z/3),
                          OCaml.Effect.State.state/3)
                      ]-> .)), OCaml.Effect.State.read/3),
            [ Variable ((5, Effect ([ ], .)), x/0) ]))
    ])

7
Value
  (non_rec, @.,
    [
      ((set_local_ref, [ ], [ (tt, Type (unit/3)) ], Type (Z/3)),
        LetVar
          (8,
            Effect
              ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
                .)) x =
          Apply
            ((8,
              Effect
                ([
                  TypeEffect
                  (Type (Z/3), OCaml.Effect.State.state/3)
                ], .)),
              Variable
                ((8,
                  Effect
                    ([ ],
                      .
                        -[
                          TypeEffect
                          (Type (Z/3),
                            OCaml.Effect.State.state/3)
                        ]-> .)), OCaml.Pervasives.ref/3),
              [ Constant ((8, Effect ([ ], .)), Int(12)) ]) in
        Sequence
          ((9,
            Effect
              ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
                .)),
            Apply
              ((9,
                Effect
                  ([
                    TypeEffect
                    (Type (Z/3), OCaml.Effect.State.state/3)
                  ], .)),
                Variable
                  ((9,
                    Effect
                      ([ ],
                        . ->
                          .
                            -[
                              TypeEffect
                              (Type (Z/3),
                                OCaml.Effect.State.state/3)
                            ]-> .)),
                    OCaml.Effect.State.write/3),
                [
                  Variable ((9, Effect ([ ], .)), x/0);
                  Constant ((9, Effect ([ ], .)), Int(15))
                ]),
            Apply
              ((10,
                Effect
                  ([
                    TypeEffect
                    (Type (Z/3), OCaml.Effect.State.state/3)
                  ], .)),
                Variable
                  ((10,
                    Effect
                      ([ ],
                        .
                          -[
                            TypeEffect
                            (Type (Z/3),
                              OCaml.Effect.State.state/3)
                          ]-> .)), OCaml.Effect.State.read/3),
                [ Variable ((10, Effect ([ ], .)), x/0) ])))
    ])

12
Value
  (non_rec, @.,
    [
      ((add_multiple_by_refs, [ ],
        [ (a, Type (Z/3)); (b, Type (Z/3)); (c, Type (Z/3)); (d, Type (Z/3)) ],
        Type (Z/3)),
        LetVar
          (13,
            Effect
              ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
                .)) x =
          Apply
            ((13,
              Effect
                ([
                  TypeEffect
                  (Type (Z/3), OCaml.Effect.State.state/3)
                ], .)),
              Variable
                ((13,
                  Effect
                    ([ ],
                      .
                        -[
                          TypeEffect
                          (Type (Z/3),
                            OCaml.Effect.State.state/3)
                        ]-> .)), OCaml.Pervasives.ref/3),
              [ Variable ((13, Effect ([ ], .)), a/0) ]) in
        Sequence
          ((14,
            Effect
              ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
                .)),
            Apply
              ((14,
                Effect
                  ([
                    TypeEffect
                    (Type (Z/3), OCaml.Effect.State.state/3)
                  ], .)),
                Variable
                  ((14,
                    Effect
                      ([ ],
                        . ->
                          .
                            -[
                              TypeEffect
                              (Type (Z/3),
                                OCaml.Effect.State.state/3)
                            ]-> .)),
                    OCaml.Effect.State.write/3),
                [
                  Variable ((14, Effect ([ ], .)), x/0);
                  Apply
                    ((14,
                      Effect
                        ([
                          TypeEffect
                          (Type
                            (Z/3),
                            OCaml.Effect.State.state/3)
                        ],
                          .)),
                      Variable
                        ((14,
                          Effect
                            ([
                            ],
                              .)),
                          Z.add/3),
                      [
                        Apply
                          ((14,
                            Effect
                              ([
                                TypeEffect
                                (Type
                                  (Z/3),
                                  OCaml.Effect.State.state/3)
                              ],
                                .)),
                            Variable
                              ((14,
                                Effect
                                  ([
                                  ],
                                    .
                                      -[
                                        TypeEffect
                                        (Type
                                          (Z/3),
                                          OCaml.Effect.State.state/3)
                                      ]->
                                      .)),
                                OCaml.Effect.State.read/3),
                            [
                              Variable
                                ((14,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  x/0)
                            ]);
                        Variable
                          ((14,
                            Effect
                              ([
                              ],
                                .)),
                            b/0)
                      ])
                ]),
            LetVar
              (15,
                Effect
                  ([
                    TypeEffect
                    (Type (Z/3), OCaml.Effect.State.state/3)
                  ], .)) y =
              Apply
                ((15,
                  Effect
                    ([
                      TypeEffect
                      (Type (Z/3), OCaml.Effect.State.state/3)
                    ], .)),
                  Variable
                    ((15,
                      Effect
                        ([ ],
                          .
                            -[
                              TypeEffect
                              (Type (Z/3),
                                OCaml.Effect.State.state/3)
                            ]-> .)),
                      OCaml.Pervasives.ref/3),
                  [ Variable ((15, Effect ([ ], .)), c/0) ]) in
            Sequence
              ((16,
                Effect
                  ([
                    TypeEffect
                    (Type (Z/3), OCaml.Effect.State.state/3)
                  ], .)),
                Apply
                  ((16,
                    Effect
                      ([
                        TypeEffect
                        (Type (Z/3),
                          OCaml.Effect.State.state/3)
                      ], .)),
                    Variable
                      ((16,
                        Effect
                          ([ ],
                            . ->
                              .
                                -[
                                  TypeEffect
                                  (Type (Z/3),
                                    OCaml.Effect.State.state/3)
                                ]-> .)),
                        OCaml.Effect.State.write/3),
                    [
                      Variable ((16, Effect ([ ], .)), y/0);
                      Apply
                        ((16,
                          Effect
                            ([
                              TypeEffect
                              (Type
                                (Z/3),
                                OCaml.Effect.State.state/3)
                            ],
                              .)),
                          Variable
                            ((16,
                              Effect
                                ([
                                ],
                                  .)),
                              Z.add/3),
                          [
                            Apply
                              ((16,
                                Effect
                                  ([
                                    TypeEffect
                                    (Type
                                      (Z/3),
                                      OCaml.Effect.State.state/3)
                                  ],
                                    .)),
                                Variable
                                  ((16,
                                    Effect
                                      ([
                                      ],
                                        .
                                          -[
                                            TypeEffect
                                            (Type
                                              (Z/3),
                                              OCaml.Effect.State.state/3)
                                          ]->
                                          .)),
                                    OCaml.Effect.State.read/3),
                                [
                                  Variable
                                    ((16,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      y/0)
                                ]);
                            Variable
                              ((16,
                                Effect
                                  ([
                                  ],
                                    .)),
                                d/0)
                          ])
                    ]),
                LetVar
                  (17,
                    Effect
                      ([
                        TypeEffect
                        (Type (Z/3),
                          OCaml.Effect.State.state/3)
                      ], .)) z =
                  Apply
                    ((17,
                      Effect
                        ([
                          TypeEffect
                          (Type (Z/3),
                            OCaml.Effect.State.state/3)
                        ], .)),
                      Variable
                        ((17,
                          Effect
                            ([ ],
                              .
                                -[
                                  TypeEffect
                                  (Type (Z/3),
                                    OCaml.Effect.State.state/3)
                                ]-> .)),
                          OCaml.Pervasives.ref/3),
                      [
                        Apply
                          ((17,
                            Effect
                              ([
                                TypeEffect
                                (Type
                                  (Z/3),
                                  OCaml.Effect.State.state/3)
                              ],
                                .)),
                            Variable
                              ((17,
                                Effect
                                  ([
                                  ],
                                    .)),
                                Z.add/3),
                            [
                              Apply
                                ((17,
                                  Effect
                                    ([
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3)
                                    ],
                                      .)),
                                  Variable
                                    ((17,
                                      Effect
                                        ([
                                        ],
                                          .
                                            -[
                                              TypeEffect
                                              (Type
                                                (Z/3),
                                                OCaml.Effect.State.state/3)
                                            ]->
                                            .)),
                                      OCaml.Effect.State.read/3),
                                  [
                                    Variable
                                      ((17,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        x/0)
                                  ]);
                              Apply
                                ((17,
                                  Effect
                                    ([
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3)
                                    ],
                                      .)),
                                  Variable
                                    ((17,
                                      Effect
                                        ([
                                        ],
                                          .
                                            -[
                                              TypeEffect
                                              (Type
                                                (Z/3),
                                                OCaml.Effect.State.state/3)
                                            ]->
                                            .)),
                                      OCaml.Effect.State.read/3),
                                  [
                                    Variable
                                      ((17,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        y/0)
                                  ])
                            ])
                      ]) in
                Apply
                  ((18,
                    Effect
                      ([
                        TypeEffect
                        (Type (Z/3),
                          OCaml.Effect.State.state/3)
                      ], .)),
                    Variable
                      ((18,
                        Effect
                          ([ ],
                            .
                              -[
                                TypeEffect
                                (Type (Z/3),
                                  OCaml.Effect.State.state/3)
                              ]-> .)),
                        OCaml.Effect.State.read/3),
                    [ Variable ((18, Effect ([ ], .)), z/0) ]))))
    ])

20
Value
  (non_rec, @.,
    [
      ((set_ref, [ ], [ (x, Type (OCaml.Effect.State.t/3, Type (Z/3))) ],
        Type (unit/3)),
        Apply
          ((21,
            Effect
              ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
                .)),
            Variable
              ((21,
                Effect
                  ([ ],
                    . ->
                      .
                        -[
                          TypeEffect
                          (Type (Z/3),
                            OCaml.Effect.State.state/3)
                        ]-> .)), OCaml.Effect.State.write/3),
            [
              Variable ((21, Effect ([ ], .)), x/0);
              Constant ((21, Effect ([ ], .)), Int(15))
            ]))
    ])

23
Value
  (non_rec, @.,
    [
      ((get_ref, [ ], [ (x, Type (OCaml.Effect.State.t/3, Type (Z/3))) ],
        Type (Z/3)),
        Apply
          ((24,
            Effect
              ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
                .)),
            Variable
              ((24,
                Effect
                  ([ ],
                    .
                      -[
                        TypeEffect
                        (Type (Z/3),
                          OCaml.Effect.State.state/3)
                      ]-> .)), OCaml.Effect.State.read/3),
            [ Variable ((24, Effect ([ ], .)), x/0) ]))
    ])

26
Value
  (non_rec, @.,
    [
      ((update_ref, [ ], [ (x, Type (OCaml.Effect.State.t/3, Type (Z/3))) ],
        Type (unit/3)),
        Apply
          ((27,
            Effect
              ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
                .)),
            Variable
              ((27,
                Effect
                  ([ ],
                    . ->
                      .
                        -[
                          TypeEffect
                          (Type (Z/3),
                            OCaml.Effect.State.state/3)
                        ]-> .)), OCaml.Effect.State.write/3),
            [
              Variable ((27, Effect ([ ], .)), x/0);
              Apply
                ((27,
                  Effect
                    ([
                      TypeEffect
                      (Type
                        (Z/3),
                        OCaml.Effect.State.state/3)
                    ], .)),
                  Variable
                    ((27,
                      Effect
                        ([
                        ],
                          .)),
                      Z.add/3),
                  [
                    Apply
                      ((27,
                        Effect
                          ([
                            TypeEffect
                            (Type
                              (Z/3),
                              OCaml.Effect.State.state/3)
                          ],
                            .)),
                        Variable
                          ((27,
                            Effect
                              ([
                              ],
                                .
                                  -[
                                    TypeEffect
                                    (Type
                                      (Z/3),
                                      OCaml.Effect.State.state/3)
                                  ]->
                                  .)),
                            OCaml.Effect.State.read/3),
                        [
                          Variable
                            ((27,
                              Effect
                                ([
                                ],
                                  .)),
                              x/0)
                        ]);
                    Constant
                      ((27,
                        Effect
                          ([
                          ],
                            .)),
                        Int(5))
                  ])
            ]))
    ])

29
Value
  (non_rec, @.,
    [
      ((new_ref, [ ], [ (x, Type (unit/3)) ],
        Type (OCaml.Effect.State.t/3, Type (Z/3))),
        Apply
          ((30,
            Effect
              ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
                .)),
            Variable
              ((30,
                Effect
                  ([ ],
                    .
                      -[
                        TypeEffect
                        (Type (Z/3),
                          OCaml.Effect.State.state/3)
                      ]-> .)), OCaml.Pervasives.ref/3),
            [ Constant ((30, Effect ([ ], .)), Int(15)) ]))
    ])

32 Reference (r, r_state, Type (Z/3), Constant ((32, Effect ([ ], .)), Int(18)))

34
Value
  (non_rec, @.,
    [
      ((set_r, [ ], [ (x, Type (unit/3)) ], Type (unit/3)),
        Apply
          ((34,
            Effect
              ([
                TypeEffect
                (Type (Z/3), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (r_state/0), OCaml.Effect.State.state/3)
              ], .)),
            Variable
              ((34,
                Effect
                  ([ ],
                    .
                      -[
                        TypeEffect
                        (Type (Z/3),
                          OCaml.Effect.State.state/3)
                      ]-> .)), set_ref/0),
            [
              Apply
                ((?,
                  Effect
                    ([
                      TypeEffect
                      (Type
                        (Z/3),
                        OCaml.Effect.State.state/3);
                      TypeEffect
                      (Type
                        (r_state/0),
                        OCaml.Effect.State.state/3)
                    ], .)),
                  Variable
                    ((?,
                      Effect
                        ([
                        ],
                          .
                            ->
                            .
                              -[
                                TypeEffect
                                (Type
                                  (r_state/0),
                                  OCaml.Effect.State.state/3)
                              ]->
                              .)),
                      OCaml.Effect.State.global/3),
                  [
                    Variable
                      ((34,
                        Effect
                          ([
                          ],
                            .)),
                        r/0);
                    Apply
                      ((?,
                        Effect
                          ([
                            TypeEffect
                            (Type
                              (Z/3),
                              OCaml.Effect.State.state/3)
                          ],
                            .)),
                        Variable
                          ((?,
                            Effect
                              ([
                              ],
                                .
                                  -[
                                    TypeEffect
                                    (Type
                                      (Z/3),
                                      OCaml.Effect.State.state/3)
                                  ]->
                                  .)),
                            OCaml.Effect.State.peekstate/3),
                        [
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .)))
                        ])
                  ])
            ]))
    ])

36
Value
  (non_rec, @.,
    [
      ((get_r, [ ], [ (x, Type (unit/3)) ], Type (Z/3)),
        Apply
          ((36,
            Effect
              ([
                TypeEffect
                (Type (Z/3), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (r_state/0), OCaml.Effect.State.state/3)
              ], .)),
            Variable
              ((36,
                Effect
                  ([ ],
                    .
                      -[
                        TypeEffect
                        (Type (Z/3),
                          OCaml.Effect.State.state/3)
                      ]-> .)), get_ref/0),
            [
              Apply
                ((?,
                  Effect
                    ([
                      TypeEffect
                      (Type
                        (Z/3),
                        OCaml.Effect.State.state/3);
                      TypeEffect
                      (Type
                        (r_state/0),
                        OCaml.Effect.State.state/3)
                    ], .)),
                  Variable
                    ((?,
                      Effect
                        ([
                        ],
                          .
                            ->
                            .
                              -[
                                TypeEffect
                                (Type
                                  (r_state/0),
                                  OCaml.Effect.State.state/3)
                              ]->
                              .)),
                      OCaml.Effect.State.global/3),
                  [
                    Variable
                      ((36,
                        Effect
                          ([
                          ],
                            .)),
                        r/0);
                    Apply
                      ((?,
                        Effect
                          ([
                            TypeEffect
                            (Type
                              (Z/3),
                              OCaml.Effect.State.state/3)
                          ],
                            .)),
                        Variable
                          ((?,
                            Effect
                              ([
                              ],
                                .
                                  -[
                                    TypeEffect
                                    (Type
                                      (Z/3),
                                      OCaml.Effect.State.state/3)
                                  ]->
                                  .)),
                            OCaml.Effect.State.peekstate/3),
                        [
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .)))
                        ])
                  ])
            ]))
    ])

38
Value
  (non_rec, @.,
    [
      ((r_add_15, [ ], [ (x, Type (unit/3)) ], Type (Z/3)),
        LetVar
          (39,
            Effect
              ([
                TypeEffect
                (Type (Z/3), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (r_state/0), OCaml.Effect.State.state/3)
              ], .)) i =
          Apply
            ((39,
              Effect
                ([
                  TypeEffect
                  (Type (Z/3), OCaml.Effect.State.state/3);
                  TypeEffect
                  (Type (r_state/0), OCaml.Effect.State.state/3)
                ], .)),
              Variable
                ((39,
                  Effect
                    ([ ],
                      .
                        -[
                          TypeEffect
                          (Type (Z/3),
                            OCaml.Effect.State.state/3);
                          TypeEffect
                          (Type (r_state/0),
                            OCaml.Effect.State.state/3)
                        ]-> .)), get_r/0),
              [ Constructor ((39, Effect ([ ], .)), tt/3) ]) in
        Sequence
          ((40,
            Effect
              ([
                TypeEffect
                (Type (Z/3), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (r_state/0), OCaml.Effect.State.state/3)
              ], .)),
            Apply
              ((40,
                Effect
                  ([
                    TypeEffect
                    (Type (Z/3), OCaml.Effect.State.state/3);
                    TypeEffect
                    (Type (r_state/0), OCaml.Effect.State.state/3)
                  ], .)),
                Variable
                  ((40,
                    Effect
                      ([ ],
                        .
                          -[
                            TypeEffect
                            (Type (Z/3),
                              OCaml.Effect.State.state/3);
                            TypeEffect
                            (Type (r_state/0),
                              OCaml.Effect.State.state/3)
                          ]-> .)), set_r/0),
                [ Constructor ((40, Effect ([ ], .)), tt/3) ]),
            LetVar
              (41,
                Effect
                  ([
                    TypeEffect
                    (Type (Z/3), OCaml.Effect.State.state/3);
                    TypeEffect
                    (Type (r_state/0), OCaml.Effect.State.state/3)
                  ], .)) j =
              Apply
                ((41,
                  Effect
                    ([
                      TypeEffect
                      (Type (Z/3), OCaml.Effect.State.state/3);
                      TypeEffect
                      (Type (r_state/0),
                        OCaml.Effect.State.state/3)
                    ], .)),
                  Variable
                    ((41,
                      Effect
                        ([ ],
                          .
                            -[
                              TypeEffect
                              (Type (Z/3),
                                OCaml.Effect.State.state/3);
                              TypeEffect
                              (Type (r_state/0),
                                OCaml.Effect.State.state/3)
                            ]-> .)), get_r/0),
                  [ Constructor ((41, Effect ([ ], .)), tt/3) ]) in
            Sequence
              ((42,
                Effect
                  ([
                    TypeEffect
                    (Type (Z/3), OCaml.Effect.State.state/3);
                    TypeEffect
                    (Type (r_state/0), OCaml.Effect.State.state/3)
                  ], .)),
                Apply
                  ((42,
                    Effect
                      ([
                        TypeEffect
                        (Type (Z/3),
                          OCaml.Effect.State.state/3);
                        TypeEffect
                        (Type (r_state/0),
                          OCaml.Effect.State.state/3)
                      ], .)),
                    Variable
                      ((42,
                        Effect
                          ([ ],
                            . ->
                              .
                                -[
                                  TypeEffect
                                  (Type (Z/3),
                                    OCaml.Effect.State.state/3)
                                ]-> .)),
                        OCaml.Effect.State.write/3),
                    [
                      Apply
                        ((?,
                          Effect
                            ([
                              TypeEffect
                              (Type
                                (Z/3),
                                OCaml.Effect.State.state/3);
                              TypeEffect
                              (Type
                                (r_state/0),
                                OCaml.Effect.State.state/3)
                            ],
                              .)),
                          Variable
                            ((?,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .
                                      -[
                                        TypeEffect
                                        (Type
                                          (r_state/0),
                                          OCaml.Effect.State.state/3)
                                      ]->
                                      .)),
                              OCaml.Effect.State.global/3),
                          [
                            Variable
                              ((42,
                                Effect
                                  ([
                                  ],
                                    .)),
                                r/0);
                            Apply
                              ((?,
                                Effect
                                  ([
                                    TypeEffect
                                    (Type
                                      (Z/3),
                                      OCaml.Effect.State.state/3)
                                  ],
                                    .)),
                                Variable
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .
                                          -[
                                            TypeEffect
                                            (Type
                                              (Z/3),
                                              OCaml.Effect.State.state/3)
                                          ]->
                                          .)),
                                    OCaml.Effect.State.peekstate/3),
                                [
                                  Tuple
                                    ((?,
                                      Effect
                                        ([
                                        ],
                                          .)))
                                ])
                          ]);
                      Apply
                        ((42,
                          Effect
                            ([
                            ],
                              .)),
                          Variable
                            ((42,
                              Effect
                                ([
                                ],
                                  .)),
                              Z.add/3),
                          [
                            Variable
                              ((42,
                                Effect
                                  ([
                                  ],
                                    .)),
                                i/0);
                            Variable
                              ((42,
                                Effect
                                  ([
                                  ],
                                    .)),
                                j/0)
                          ])
                    ]),
                Apply
                  ((43,
                    Effect
                      ([
                        TypeEffect
                        (Type (Z/3),
                          OCaml.Effect.State.state/3);
                        TypeEffect
                        (Type (r_state/0),
                          OCaml.Effect.State.state/3)
                      ], .)),
                    Variable
                      ((43,
                        Effect
                          ([ ],
                            .
                              -[
                                TypeEffect
                                (Type (Z/3),
                                  OCaml.Effect.State.state/3)
                              ]-> .)),
                        OCaml.Effect.State.read/3),
                    [
                      Apply
                        ((?,
                          Effect
                            ([
                              TypeEffect
                              (Type
                                (Z/3),
                                OCaml.Effect.State.state/3);
                              TypeEffect
                              (Type
                                (r_state/0),
                                OCaml.Effect.State.state/3)
                            ],
                              .)),
                          Variable
                            ((?,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .
                                      -[
                                        TypeEffect
                                        (Type
                                          (r_state/0),
                                          OCaml.Effect.State.state/3)
                                      ]->
                                      .)),
                              OCaml.Effect.State.global/3),
                          [
                            Variable
                              ((43,
                                Effect
                                  ([
                                  ],
                                    .)),
                                r/0);
                            Apply
                              ((?,
                                Effect
                                  ([
                                    TypeEffect
                                    (Type
                                      (Z/3),
                                      OCaml.Effect.State.state/3)
                                  ],
                                    .)),
                                Variable
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .
                                          -[
                                            TypeEffect
                                            (Type
                                              (Z/3),
                                              OCaml.Effect.State.state/3)
                                          ]->
                                          .)),
                                    OCaml.Effect.State.peekstate/3),
                                [
                                  Tuple
                                    ((?,
                                      Effect
                                        ([
                                        ],
                                          .)))
                                ])
                          ])
                    ]))))
    ])

45
Value
  (non_rec, @.,
    [
      ((mixed_type, [ ], [ (x, Type (unit/3)) ],
        (Type (bool/3) * Type (string/3) * Type (Z/3))),
        LetVar
          (46,
            Effect
              ([
                TypeEffect
                (Type (Z/3), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (bool/3), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (r_state/0), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (string/3), OCaml.Effect.State.state/3)
              ], .)) b =
          Apply
            ((46,
              Effect
                ([
                  TypeEffect
                  (Type (bool/3), OCaml.Effect.State.state/3)
                ], .)),
              Variable
                ((46,
                  Effect
                    ([ ],
                      .
                        -[
                          TypeEffect
                          (Type (bool/3),
                            OCaml.Effect.State.state/3)
                        ]-> .)), OCaml.Pervasives.ref/3),
              [ Constructor ((46, Effect ([ ], .)), true/3) ]) in
        LetVar
          (47,
            Effect
              ([
                TypeEffect
                (Type (Z/3), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (bool/3), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (r_state/0), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (string/3), OCaml.Effect.State.state/3)
              ], .)) str =
          Apply
            ((47,
              Effect
                ([
                  TypeEffect
                  (Type (string/3), OCaml.Effect.State.state/3)
                ], .)),
              Variable
                ((47,
                  Effect
                    ([ ],
                      .
                        -[
                          TypeEffect
                          (Type (string/3),
                            OCaml.Effect.State.state/3)
                        ]-> .)), OCaml.Pervasives.ref/3),
              [ Constant ((47, Effect ([ ], .)), String("")) ]) in
        LetFun
          (48,
            Effect
              ([
                TypeEffect
                (Type (Z/3), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (bool/3), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (r_state/0), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (string/3), OCaml.Effect.State.state/3)
              ], .))
          (non_rec, @.,
            [
              ((update, [ ], [ (x_1, Type (unit/3)) ], Type (unit/3)),
                Match
                  ((?,
                    Effect
                      ([
                        TypeEffect
                        (Type
                          (bool/3),
                          OCaml.Effect.State.state/3);
                        TypeEffect
                        (Type
                          (string/3),
                          OCaml.Effect.State.state/3)
                      ],
                        .)),
                    Variable
                      ((?,
                        Effect
                          ([
                          ],
                            .)),
                        x_1/0),
                    [
                      (Constructor
                        (tt/3),
                        Sequence
                          ((49,
                            Effect
                              ([
                                TypeEffect
                                (Type
                                  (bool/3),
                                  OCaml.Effect.State.state/3);
                                TypeEffect
                                (Type
                                  (string/3),
                                  OCaml.Effect.State.state/3)
                              ],
                                .)),
                            Apply
                              ((49,
                                Effect
                                  ([
                                    TypeEffect
                                    (Type
                                      (bool/3),
                                      OCaml.Effect.State.state/3)
                                  ],
                                    .)),
                                Variable
                                  ((49,
                                    Effect
                                      ([
                                      ],
                                        .
                                          ->
                                          .
                                            -[
                                              TypeEffect
                                              (Type
                                                (bool/3),
                                                OCaml.Effect.State.state/3)
                                            ]->
                                            .)),
                                    OCaml.Effect.State.write/3),
                                [
                                  Variable
                                    ((49,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      b/0);
                                  Apply
                                    ((49,
                                      Effect
                                        ([
                                          TypeEffect
                                          (Type
                                            (bool/3),
                                            OCaml.Effect.State.state/3)
                                        ],
                                          .)),
                                      Variable
                                        ((49,
                                          Effect
                                            ([
                                            ],
                                              .
                                                -[
                                                  TypeEffect
                                                  (Type
                                                    (bool/3),
                                                    OCaml.Effect.State.state/3)
                                                ]->
                                                .)),
                                          OCaml.Effect.State.read/3),
                                      [
                                        Variable
                                          ((49,
                                            Effect
                                              ([
                                              ],
                                                .)),
                                            b/0)
                                      ])
                                ]),
                            Apply
                              ((50,
                                Effect
                                  ([
                                    TypeEffect
                                    (Type
                                      (string/3),
                                      OCaml.Effect.State.state/3)
                                  ],
                                    .)),
                                Variable
                                  ((50,
                                    Effect
                                      ([
                                      ],
                                        .
                                          ->
                                          .
                                            -[
                                              TypeEffect
                                              (Type
                                                (string/3),
                                                OCaml.Effect.State.state/3)
                                            ]->
                                            .)),
                                    OCaml.Effect.State.write/3),
                                [
                                  Variable
                                    ((50,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      str/0);
                                  Apply
                                    ((50,
                                      Effect
                                        ([
                                          TypeEffect
                                          (Type
                                            (string/3),
                                            OCaml.Effect.State.state/3)
                                        ],
                                          .)),
                                      Variable
                                        ((50,
                                          Effect
                                            ([
                                            ],
                                              .)),
                                          String.append/3),
                                      [
                                        Constant
                                          ((50,
                                            Effect
                                              ([
                                              ],
                                                .)),
                                            String("toggle "));
                                        Apply
                                          ((50,
                                            Effect
                                              ([
                                                TypeEffect
                                                (Type
                                                  (string/3),
                                                  OCaml.Effect.State.state/3)
                                              ],
                                                .)),
                                            Variable
                                              ((50,
                                                Effect
                                                  ([
                                                  ],
                                                    .
                                                      -[
                                                        TypeEffect
                                                        (Type
                                                          (string/3),
                                                          OCaml.Effect.State.state/3)
                                                      ]->
                                                      .)),
                                                OCaml.Effect.State.read/3),
                                            [
                                              Variable
                                                ((50,
                                                  Effect
                                                    ([
                                                    ],
                                                      .)),
                                                  str/0)
                                            ])
                                      ])
                                ])))
                    ]))
            ]) in
        Sequence
          ((51,
            Effect
              ([
                TypeEffect
                (Type (Z/3), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (bool/3), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (r_state/0), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (string/3), OCaml.Effect.State.state/3)
              ], .)),
            Apply
              ((51,
                Effect
                  ([
                    TypeEffect
                    (Type (bool/3), OCaml.Effect.State.state/3);
                    TypeEffect
                    (Type (string/3), OCaml.Effect.State.state/3)
                  ], .)),
                Variable
                  ((51,
                    Effect
                      ([ ],
                        .
                          -[
                            TypeEffect
                            (Type (bool/3),
                              OCaml.Effect.State.state/3);
                            TypeEffect
                            (Type (string/3),
                              OCaml.Effect.State.state/3)
                          ]-> .)), update/0),
                [ Constructor ((51, Effect ([ ], .)), tt/3) ]),
            Sequence
              ((52,
                Effect
                  ([
                    TypeEffect
                    (Type (Z/3), OCaml.Effect.State.state/3);
                    TypeEffect
                    (Type (bool/3), OCaml.Effect.State.state/3);
                    TypeEffect
                    (Type (r_state/0), OCaml.Effect.State.state/3);
                    TypeEffect
                    (Type (string/3), OCaml.Effect.State.state/3)
                  ], .)),
                Apply
                  ((52,
                    Effect
                      ([
                        TypeEffect
                        (Type (bool/3),
                          OCaml.Effect.State.state/3);
                        TypeEffect
                        (Type (string/3),
                          OCaml.Effect.State.state/3)
                      ], .)),
                    Variable
                      ((52,
                        Effect
                          ([ ],
                            .
                              -[
                                TypeEffect
                                (Type (bool/3),
                                  OCaml.Effect.State.state/3);
                                TypeEffect
                                (Type (string/3),
                                  OCaml.Effect.State.state/3)
                              ]-> .)), update/0),
                    [ Constructor ((52, Effect ([ ], .)), tt/3) ]),
                Sequence
                  ((53,
                    Effect
                      ([
                        TypeEffect
                        (Type (Z/3),
                          OCaml.Effect.State.state/3);
                        TypeEffect
                        (Type (bool/3),
                          OCaml.Effect.State.state/3);
                        TypeEffect
                        (Type (r_state/0),
                          OCaml.Effect.State.state/3);
                        TypeEffect
                        (Type (string/3),
                          OCaml.Effect.State.state/3)
                      ], .)),
                    Apply
                      ((53,
                        Effect
                          ([
                            TypeEffect
                            (Type (bool/3),
                              OCaml.Effect.State.state/3);
                            TypeEffect
                            (Type (string/3),
                              OCaml.Effect.State.state/3)
                          ], .)),
                        Variable
                          ((53,
                            Effect
                              ([ ],
                                .
                                  -[
                                    TypeEffect
                                    (Type (bool/3),
                                      OCaml.Effect.State.state/3);
                                    TypeEffect
                                    (Type
                                      (string/3),
                                      OCaml.Effect.State.state/3)
                                  ]-> .)), update/0),
                        [
                          Constructor
                            ((53,
                              Effect
                                ([
                                ],
                                  .)),
                              tt/3)
                        ]),
                    Tuple
                      ((54,
                        Effect
                          ([
                            TypeEffect
                            (Type (Z/3),
                              OCaml.Effect.State.state/3);
                            TypeEffect
                            (Type (bool/3),
                              OCaml.Effect.State.state/3);
                            TypeEffect
                            (Type (r_state/0),
                              OCaml.Effect.State.state/3);
                            TypeEffect
                            (Type (string/3),
                              OCaml.Effect.State.state/3)
                          ], .)),
                        Apply
                          ((54,
                            Effect
                              ([
                                TypeEffect
                                (Type (bool/3),
                                  OCaml.Effect.State.state/3)
                              ], .)),
                            Variable
                              ((54,
                                Effect
                                  ([ ],
                                    .
                                      -[
                                        TypeEffect
                                        (Type
                                          (bool/3),
                                          OCaml.Effect.State.state/3)
                                      ]-> .)),
                                OCaml.Effect.State.read/3),
                            [
                              Variable
                                ((54,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  b/0)
                            ]),
                        Apply
                          ((54,
                            Effect
                              ([
                                TypeEffect
                                (Type (string/3),
                                  OCaml.Effect.State.state/3)
                              ], .)),
                            Variable
                              ((54,
                                Effect
                                  ([ ],
                                    .
                                      -[
                                        TypeEffect
                                        (Type
                                          (string/3),
                                          OCaml.Effect.State.state/3)
                                      ]-> .)),
                                OCaml.Effect.State.read/3),
                            [
                              Variable
                                ((54,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  str/0)
                            ]),
                        Apply
                          ((54,
                            Effect
                              ([
                                TypeEffect
                                (Type (Z/3),
                                  OCaml.Effect.State.state/3);
                                TypeEffect
                                (Type (r_state/0),
                                  OCaml.Effect.State.state/3)
                              ], .)),
                            Variable
                              ((54,
                                Effect
                                  ([ ],
                                    .
                                      -[
                                        TypeEffect
                                        (Type
                                          (Z/3),
                                          OCaml.Effect.State.state/3)
                                      ]-> .)),
                                OCaml.Effect.State.read/3),
                            [
                              Apply
                                ((?,
                                  Effect
                                    ([
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3);
                                      TypeEffect
                                      (Type
                                        (r_state/0),
                                        OCaml.Effect.State.state/3)
                                    ],
                                      .)),
                                  Variable
                                    ((?,
                                      Effect
                                        ([
                                        ],
                                          .
                                            ->
                                            .
                                              -[
                                                TypeEffect
                                                (Type
                                                  (r_state/0),
                                                  OCaml.Effect.State.state/3)
                                              ]->
                                              .)),
                                      OCaml.Effect.State.global/3),
                                  [
                                    Variable
                                      ((54,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        r/0);
                                    Apply
                                      ((?,
                                        Effect
                                          ([
                                            TypeEffect
                                            (Type
                                              (Z/3),
                                              OCaml.Effect.State.state/3)
                                          ],
                                            .)),
                                        Variable
                                          ((?,
                                            Effect
                                              ([
                                              ],
                                                .
                                                  -[
                                                    TypeEffect
                                                    (Type
                                                      (Z/3),
                                                      OCaml.Effect.State.state/3)
                                                  ]->
                                                  .)),
                                            OCaml.Effect.State.peekstate/3),
                                        [
                                          Tuple
                                            ((?,
                                              Effect
                                                ([
                                                ],
                                                  .)))
                                        ])
                                  ])
                            ]))))))
    ])

56
Value
  (non_rec, @.,
    [
      ((partials_test, [ ], [ (x, Type (unit/3)) ],
        Type (OCaml.Effect.State.t/3, Type (Z/3))),
        Match
          ((?,
            Effect
              ([
                TypeEffect
                (Type (Z/3), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (list/3, Type (Z/3)), OCaml.Effect.State.state/3);
                TypeEffect
                (Type (r_state/0), OCaml.Effect.State.state/3)
              ], .)), Variable ((?, Effect ([ ], .)), x/0),
            [
              (Constructor (tt/3),
                LetFun
                  (57,
                    Effect
                      ([
                        TypeEffect
                        (Type
                          (Z/3),
                          OCaml.Effect.State.state/3);
                        TypeEffect
                        (Type
                          (list/3,
                            Type
                              (Z/3)),
                          OCaml.Effect.State.state/3);
                        TypeEffect
                        (Type
                          (r_state/0),
                          OCaml.Effect.State.state/3)
                      ],
                        .))
                  (non_rec, @.,
                    [
                      ((f1,
                        [
                        ],
                        [
                          (x,
                            Type
                              (OCaml.Effect.State.t/3,
                                Type
                                  (Z/3)));
                          (y,
                            Type
                              (Z/3))
                        ],
                        Type
                          (OCaml.Effect.State.t/3,
                            Type
                              (Z/3))),
                        Sequence
                          ((58,
                            Effect
                              ([
                                TypeEffect
                                (Type
                                  (Z/3),
                                  OCaml.Effect.State.state/3)
                              ],
                                .)),
                            Apply
                              ((58,
                                Effect
                                  ([
                                    TypeEffect
                                    (Type
                                      (Z/3),
                                      OCaml.Effect.State.state/3)
                                  ],
                                    .)),
                                Variable
                                  ((58,
                                    Effect
                                      ([
                                      ],
                                        .
                                          ->
                                          .
                                            -[
                                              TypeEffect
                                              (Type
                                                (Z/3),
                                                OCaml.Effect.State.state/3)
                                            ]->
                                            .)),
                                    OCaml.Effect.State.write/3),
                                [
                                  Variable
                                    ((58,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      x/0);
                                  Variable
                                    ((58,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      y/0)
                                ]),
                            Variable
                              ((59,
                                Effect
                                  ([
                                  ],
                                    .)),
                                x/0)))
                    ])
                  in
                LetVar
                  (60,
                    Effect
                      ([
                        TypeEffect
                        (Type
                          (Z/3),
                          OCaml.Effect.State.state/3);
                        TypeEffect
                        (Type
                          (list/3,
                            Type
                              (Z/3)),
                          OCaml.Effect.State.state/3);
                        TypeEffect
                        (Type
                          (r_state/0),
                          OCaml.Effect.State.state/3)
                      ],
                        .))
                  f1_test =
                  Apply
                    ((60,
                      Effect
                        ([
                          TypeEffect
                          (Type
                            (Z/3),
                            OCaml.Effect.State.state/3);
                          TypeEffect
                          (Type
                            (r_state/0),
                            OCaml.Effect.State.state/3)
                        ],
                          .
                            -[
                              TypeEffect
                              (Type
                                (Z/3),
                                OCaml.Effect.State.state/3)
                            ]->
                            .)),
                      Variable
                        ((60,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  -[
                                    TypeEffect
                                    (Type
                                      (Z/3),
                                      OCaml.Effect.State.state/3)
                                  ]->
                                  .)),
                          f1/0),
                      [
                        Apply
                          ((?,
                            Effect
                              ([
                                TypeEffect
                                (Type
                                  (Z/3),
                                  OCaml.Effect.State.state/3);
                                TypeEffect
                                (Type
                                  (r_state/0),
                                  OCaml.Effect.State.state/3)
                              ],
                                .)),
                            Variable
                              ((?,
                                Effect
                                  ([
                                  ],
                                    .
                                      ->
                                      .
                                        -[
                                          TypeEffect
                                          (Type
                                            (r_state/0),
                                            OCaml.Effect.State.state/3)
                                        ]->
                                        .)),
                                OCaml.Effect.State.global/3),
                            [
                              Variable
                                ((60,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  r/0);
                              Apply
                                ((?,
                                  Effect
                                    ([
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3)
                                    ],
                                      .)),
                                  Variable
                                    ((?,
                                      Effect
                                        ([
                                        ],
                                          .
                                            -[
                                              TypeEffect
                                              (Type
                                                (Z/3),
                                                OCaml.Effect.State.state/3)
                                            ]->
                                            .)),
                                      OCaml.Effect.State.peekstate/3),
                                  [
                                    Tuple
                                      ((?,
                                        Effect
                                          ([
                                          ],
                                            .)))
                                  ])
                            ])
                      ])
                  in
                LetVar
                  (61,
                    Effect
                      ([
                        TypeEffect
                        (Type
                          (Z/3),
                          OCaml.Effect.State.state/3);
                        TypeEffect
                        (Type
                          (list/3,
                            Type
                              (Z/3)),
                          OCaml.Effect.State.state/3)
                      ],
                        .))
                  f1_test =
                  Apply
                    ((61,
                      Effect
                        ([
                          TypeEffect
                          (Type
                            (Z/3),
                            OCaml.Effect.State.state/3)
                        ],
                          .)),
                      Variable
                        ((61,
                          Effect
                            ([
                            ],
                              .
                                -[
                                  TypeEffect
                                  (Type
                                    (Z/3),
                                    OCaml.Effect.State.state/3)
                                ]->
                                .)),
                          f1_test/0),
                      [
                        Constant
                          ((61,
                            Effect
                              ([
                              ],
                                .)),
                            Int(15))
                      ])
                  in
                LetFun
                  (62,
                    Effect
                      ([
                        TypeEffect
                        (Type
                          (Z/3),
                          OCaml.Effect.State.state/3);
                        TypeEffect
                        (Type
                          (list/3,
                            Type
                              (Z/3)),
                          OCaml.Effect.State.state/3)
                      ],
                        .))
                  (non_rec, @.,
                    [
                      ((f2,
                        [
                        ],
                        [
                          (l1,
                            Type
                              (OCaml.Effect.State.t/3,
                                Type
                                  (list/3,
                                    Type
                                      (Z/3))));
                          (l2,
                            Type
                              (list/3,
                                Type
                                  (string/3)))
                        ],
                        Type
                          (OCaml.Effect.State.t/3,
                            Type
                              (Z/3))),
                        Apply
                          ((63,
                            Effect
                              ([
                                TypeEffect
                                (Type
                                  (Z/3),
                                  OCaml.Effect.State.state/3);
                                TypeEffect
                                (Type
                                  (list/3,
                                    Type
                                      (Z/3)),
                                  OCaml.Effect.State.state/3)
                              ],
                                .)),
                            Variable
                              ((63,
                                Effect
                                  ([
                                  ],
                                    .
                                      -[
                                        TypeEffect
                                        (Type
                                          (Z/3),
                                          OCaml.Effect.State.state/3)
                                      ]->
                                      .)),
                                OCaml.Pervasives.ref/3),
                            [
                              Apply
                                ((63,
                                  Effect
                                    ([
                                      TypeEffect
                                      (Type
                                        (list/3,
                                          Type
                                            (Z/3)),
                                        OCaml.Effect.State.state/3)
                                    ],
                                      .)),
                                  Variable
                                    ((63,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Z.add/3),
                                  [
                                    Apply
                                      ((63,
                                        Effect
                                          ([
                                            TypeEffect
                                            (Type
                                              (list/3,
                                                Type
                                                  (Z/3)),
                                              OCaml.Effect.State.state/3)
                                          ],
                                            .)),
                                        Variable
                                          ((63,
                                            Effect
                                              ([
                                              ],
                                                .)),
                                            OCaml.List.length/-1),
                                        [
                                          Apply
                                            ((63,
                                              Effect
                                                ([
                                                  TypeEffect
                                                  (Type
                                                    (list/3,
                                                      Type
                                                        (Z/3)),
                                                    OCaml.Effect.State.state/3)
                                                ],
                                                  .)),
                                              Variable
                                                ((63,
                                                  Effect
                                                    ([
                                                    ],
                                                      .
                                                        -[
                                                          TypeEffect
                                                          (Type
                                                            (list/3,
                                                              Type
                                                                (Z/3)),
                                                            OCaml.Effect.State.state/3)
                                                        ]->
                                                        .)),
                                                  OCaml.Effect.State.read/3),
                                              [
                                                Variable
                                                  ((63,
                                                    Effect
                                                      ([
                                                      ],
                                                        .)),
                                                    l1/0)
                                              ])
                                        ]);
                                    Apply
                                      ((63,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        Variable
                                          ((63,
                                            Effect
                                              ([
                                              ],
                                                .)),
                                            OCaml.List.length/-1),
                                        [
                                          Variable
                                            ((63,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              l2/0)
                                        ])
                                  ])
                            ]))
                    ])
                  in
                LetVar
                  (64,
                    Effect
                      ([
                        TypeEffect
                        (Type
                          (Z/3),
                          OCaml.Effect.State.state/3);
                        TypeEffect
                        (Type
                          (list/3,
                            Type
                              (Z/3)),
                          OCaml.Effect.State.state/3)
                      ],
                        .))
                  f2_test =
                  Apply
                    ((64,
                      Effect
                        ([
                          TypeEffect
                          (Type
                            (list/3,
                              Type
                                (Z/3)),
                            OCaml.Effect.State.state/3)
                        ],
                          .
                            -[
                              TypeEffect
                              (Type
                                (Z/3),
                                OCaml.Effect.State.state/3);
                              TypeEffect
                              (Type
                                (list/3,
                                  Type
                                    (Z/3)),
                                OCaml.Effect.State.state/3)
                            ]->
                            .)),
                      Variable
                        ((64,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  -[
                                    TypeEffect
                                    (Type
                                      (Z/3),
                                      OCaml.Effect.State.state/3);
                                    TypeEffect
                                    (Type
                                      (list/3,
                                        Type
                                          (Z/3)),
                                      OCaml.Effect.State.state/3)
                                  ]->
                                  .)),
                          f2/0),
                      [
                        Apply
                          ((64,
                            Effect
                              ([
                                TypeEffect
                                (Type
                                  (list/3,
                                    Type
                                      (Z/3)),
                                  OCaml.Effect.State.state/3)
                              ],
                                .)),
                            Variable
                              ((64,
                                Effect
                                  ([
                                  ],
                                    .
                                      -[
                                        TypeEffect
                                        (Type
                                          (list/3,
                                            Type
                                              (Z/3)),
                                          OCaml.Effect.State.state/3)
                                      ]->
                                      .)),
                                OCaml.Pervasives.ref/3),
                            [
                              Constructor
                                ((64,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  cons/3,
                                  Constant
                                    ((64,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Int(1)),
                                  Constructor
                                    ((64,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      cons/3,
                                      Constant
                                        ((64,
                                          Effect
                                            ([
                                            ],
                                              .)),
                                          Int(2)),
                                      Constructor
                                        ((64,
                                          Effect
                                            ([
                                            ],
                                              .)),
                                          cons/3,
                                          Constant
                                            ((64,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              Int(3)),
                                          Constructor
                                            ((64,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              []/3))))
                            ])
                      ])
                  in
                LetVar
                  (65,
                    Effect
                      ([
                        TypeEffect
                        (Type
                          (Z/3),
                          OCaml.Effect.State.state/3);
                        TypeEffect
                        (Type
                          (list/3,
                            Type
                              (Z/3)),
                          OCaml.Effect.State.state/3)
                      ],
                        .))
                  f2_test =
                  Apply
                    ((65,
                      Effect
                        ([
                          TypeEffect
                          (Type
                            (Z/3),
                            OCaml.Effect.State.state/3);
                          TypeEffect
                          (Type
                            (list/3,
                              Type
                                (Z/3)),
                            OCaml.Effect.State.state/3)
                        ],
                          .)),
                      Variable
                        ((65,
                          Effect
                            ([
                            ],
                              .
                                -[
                                  TypeEffect
                                  (Type
                                    (Z/3),
                                    OCaml.Effect.State.state/3);
                                  TypeEffect
                                  (Type
                                    (list/3,
                                      Type
                                        (Z/3)),
                                    OCaml.Effect.State.state/3)
                                ]->
                                .)),
                          f2_test/0),
                      [
                        Constructor
                          ((65,
                            Effect
                              ([
                              ],
                                .)),
                            cons/3,
                            Constant
                              ((65,
                                Effect
                                  ([
                                  ],
                                    .)),
                                String("hi")),
                            Constructor
                              ((65,
                                Effect
                                  ([
                                  ],
                                    .)),
                                cons/3,
                                Constant
                                  ((65,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    String("hey")),
                                Constructor
                                  ((65,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    []/3)))
                      ])
                  in
                Apply
                  ((66,
                    Effect
                      ([
                        TypeEffect
                        (Type
                          (Z/3),
                          OCaml.Effect.State.state/3)
                      ],
                        .)),
                    Variable
                      ((66,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                -[
                                  TypeEffect
                                  (Type
                                    (Z/3),
                                    OCaml.Effect.State.state/3)
                                ]->
                                .)),
                        f1/0),
                    [
                      Variable
                        ((66,
                          Effect
                            ([
                            ],
                              .)),
                          f2_test/0);
                      Apply
                        ((66,
                          Effect
                            ([
                              TypeEffect
                              (Type
                                (Z/3),
                                OCaml.Effect.State.state/3)
                            ],
                              .)),
                          Variable
                            ((66,
                              Effect
                                ([
                                ],
                                  .
                                    -[
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3)
                                    ]->
                                    .)),
                              OCaml.Effect.State.read/3),
                          [
                            Variable
                              ((66,
                                Effect
                                  ([
                                  ],
                                    .)),
                                f1_test/0)
                          ])
                    ]))
            ]))
    ])

68
Value
  (non_rec, @.,
    [
      ((multiple_returns_test, [ ], [ (x, Type (unit/3)) ],
        (Type (Z/3) * Type (OCaml.Effect.State.t/3, Type (Z/3)))),
        Match
          ((?,
            Effect
              ([ TypeEffect (Type (Z/3), OCaml.Effect.State.state/3) ],
                .)), Variable ((?, Effect ([ ], .)), x/0),
            [
              (Constructor (tt/3),
                LetFun
                  (69,
                    Effect
                      ([
                        TypeEffect
                        (Type
                          (Z/3),
                          OCaml.Effect.State.state/3)
                      ],
                        .))
                  (non_rec, @.,
                    [
                      ((f,
                        [
                        ],
                        [
                          (x,
                            Type
                              (OCaml.Effect.State.t/3,
                                Type
                                  (Z/3)));
                          (y,
                            Type
                              (Z/3))
                        ],
                        (Type
                          (Z/3)
                          ->
                          (Type
                            (OCaml.Effect.State.t/3,
                              Type
                                (Z/3))
                            ->
                            Type
                              (OCaml.Effect.State.t/3,
                                Type
                                  (Z/3))))),
                        Sequence
                          ((70,
                            Effect
                              ([
                                TypeEffect
                                (Type
                                  (Z/3),
                                  OCaml.Effect.State.state/3)
                              ],
                                .
                                  -[
                                    TypeEffect
                                    (Type
                                      (Z/3),
                                      OCaml.Effect.State.state/3)
                                  ]->
                                  .
                                    -[
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3)
                                    ]->
                                    .)),
                            Apply
                              ((70,
                                Effect
                                  ([
                                    TypeEffect
                                    (Type
                                      (Z/3),
                                      OCaml.Effect.State.state/3)
                                  ],
                                    .)),
                                Variable
                                  ((70,
                                    Effect
                                      ([
                                      ],
                                        .
                                          ->
                                          .
                                            -[
                                              TypeEffect
                                              (Type
                                                (Z/3),
                                                OCaml.Effect.State.state/3)
                                            ]->
                                            .)),
                                    OCaml.Effect.State.write/3),
                                [
                                  Variable
                                    ((70,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      x/0);
                                  Variable
                                    ((70,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      y/0)
                                ]),
                            Function
                              ((71,
                                Effect
                                  ([
                                  ],
                                    .
                                      -[
                                        TypeEffect
                                        (Type
                                          (Z/3),
                                          OCaml.Effect.State.state/3)
                                      ]->
                                      .
                                        -[
                                          TypeEffect
                                          (Type
                                            (Z/3),
                                            OCaml.Effect.State.state/3)
                                        ]->
                                        .)),
                                z,
                                Sequence
                                  ((71,
                                    Effect
                                      ([
                                        TypeEffect
                                        (Type
                                          (Z/3),
                                          OCaml.Effect.State.state/3)
                                      ],
                                        .
                                          -[
                                            TypeEffect
                                            (Type
                                              (Z/3),
                                              OCaml.Effect.State.state/3)
                                          ]->
                                          .)),
                                    Apply
                                      ((72,
                                        Effect
                                          ([
                                            TypeEffect
                                            (Type
                                              (Z/3),
                                              OCaml.Effect.State.state/3)
                                          ],
                                            .)),
                                        Variable
                                          ((72,
                                            Effect
                                              ([
                                              ],
                                                .
                                                  ->
                                                  .
                                                    -[
                                                      TypeEffect
                                                      (Type
                                                        (Z/3),
                                                        OCaml.Effect.State.state/3)
                                                    ]->
                                                    .)),
                                            OCaml.Effect.State.write/3),
                                        [
                                          Variable
                                            ((72,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              x/0);
                                          Apply
                                            ((72,
                                              Effect
                                                ([
                                                  TypeEffect
                                                  (Type
                                                    (Z/3),
                                                    OCaml.Effect.State.state/3)
                                                ],
                                                  .)),
                                              Variable
                                                ((72,
                                                  Effect
                                                    ([
                                                    ],
                                                      .)),
                                                  Z.add/3),
                                              [
                                                Apply
                                                  ((72,
                                                    Effect
                                                      ([
                                                        TypeEffect
                                                        (Type
                                                          (Z/3),
                                                          OCaml.Effect.State.state/3)
                                                      ],
                                                        .)),
                                                    Variable
                                                      ((72,
                                                        Effect
                                                          ([
                                                          ],
                                                            .
                                                              -[
                                                                TypeEffect
                                                                (Type
                                                                  (Z/3),
                                                                  OCaml.Effect.State.state/3)
                                                              ]->
                                                              .)),
                                                        OCaml.Effect.State.read/3),
                                                    [
                                                      Variable
                                                        ((72,
                                                          Effect
                                                            ([
                                                            ],
                                                              .)),
                                                          x/0)
                                                    ]);
                                                Variable
                                                  ((72,
                                                    Effect
                                                      ([
                                                      ],
                                                        .)),
                                                    z/0)
                                              ])
                                        ]),
                                    Function
                                      ((73,
                                        Effect
                                          ([
                                          ],
                                            .
                                              -[
                                                TypeEffect
                                                (Type
                                                  (Z/3),
                                                  OCaml.Effect.State.state/3)
                                              ]->
                                              .)),
                                        w,
                                        LetVar
                                          (73,
                                            Effect
                                              ([
                                                TypeEffect
                                                (Type
                                                  (Z/3),
                                                  OCaml.Effect.State.state/3)
                                              ],
                                                .))
                                          tmp
                                          =
                                          Apply
                                            ((74,
                                              Effect
                                                ([
                                                  TypeEffect
                                                  (Type
                                                    (Z/3),
                                                    OCaml.Effect.State.state/3)
                                                ],
                                                  .)),
                                              Variable
                                                ((74,
                                                  Effect
                                                    ([
                                                    ],
                                                      .
                                                        -[
                                                          TypeEffect
                                                          (Type
                                                            (Z/3),
                                                            OCaml.Effect.State.state/3)
                                                        ]->
                                                        .)),
                                                  OCaml.Effect.State.read/3),
                                              [
                                                Variable
                                                  ((74,
                                                    Effect
                                                      ([
                                                      ],
                                                        .)),
                                                    w/0)
                                              ])
                                          in
                                        Sequence
                                          ((75,
                                            Effect
                                              ([
                                                TypeEffect
                                                (Type
                                                  (Z/3),
                                                  OCaml.Effect.State.state/3)
                                              ],
                                                .)),
                                            Apply
                                              ((75,
                                                Effect
                                                  ([
                                                    TypeEffect
                                                    (Type
                                                      (Z/3),
                                                      OCaml.Effect.State.state/3)
                                                  ],
                                                    .)),
                                                Variable
                                                  ((75,
                                                    Effect
                                                      ([
                                                      ],
                                                        .
                                                          ->
                                                          .
                                                            -[
                                                              TypeEffect
                                                              (Type
                                                                (Z/3),
                                                                OCaml.Effect.State.state/3)
                                                            ]->
                                                            .)),
                                                    OCaml.Effect.State.write/3),
                                                [
                                                  Variable
                                                    ((75,
                                                      Effect
                                                        ([
                                                        ],
                                                          .)),
                                                      w/0);
                                                  Apply
                                                    ((75,
                                                      Effect
                                                        ([
                                                          TypeEffect
                                                          (Type
                                                            (Z/3),
                                                            OCaml.Effect.State.state/3)
                                                        ],
                                                          .)),
                                                      Variable
                                                        ((75,
                                                          Effect
                                                            ([
                                                            ],
                                                              .)),
                                                          Z.mul/3),
                                                      [
                                                        Constant
                                                          ((75,
                                                            Effect
                                                              ([
                                                              ],
                                                                .)),
                                                            Int(2));
                                                        Apply
                                                          ((75,
                                                            Effect
                                                              ([
                                                                TypeEffect
                                                                (Type
                                                                  (Z/3),
                                                                  OCaml.Effect.State.state/3)
                                                              ],
                                                                .)),
                                                            Variable
                                                              ((75,
                                                                Effect
                                                                  ([
                                                                  ],
                                                                    .
                                                                      -[
                                                                        TypeEffect
                                                                        (Type
                                                                          (Z/3),
                                                                          OCaml.Effect.State.state/3)
                                                                      ]->
                                                                      .)),
                                                                OCaml.Effect.State.read/3),
                                                            [
                                                              Variable
                                                                ((75,
                                                                  Effect
                                                                    ([
                                                                    ],
                                                                      .)),
                                                                  x/0)
                                                            ])
                                                      ])
                                                ]),
                                            Sequence
                                              ((76,
                                                Effect
                                                  ([
                                                    TypeEffect
                                                    (Type
                                                      (Z/3),
                                                      OCaml.Effect.State.state/3)
                                                  ],
                                                    .)),
                                                Apply
                                                  ((76,
                                                    Effect
                                                      ([
                                                        TypeEffect
                                                        (Type
                                                          (Z/3),
                                                          OCaml.Effect.State.state/3)
                                                      ],
                                                        .)),
                                                    Variable
                                                      ((76,
                                                        Effect
                                                          ([
                                                          ],
                                                            .
                                                              ->
                                                              .
                                                                -[
                                                                  TypeEffect
                                                                  (Type
                                                                    (Z/3),
                                                                    OCaml.Effect.State.state/3)
                                                                ]->
                                                                .)),
                                                        OCaml.Effect.State.write/3),
                                                    [
                                                      Variable
                                                        ((76,
                                                          Effect
                                                            ([
                                                            ],
                                                              .)),
                                                          x/0);
                                                      Variable
                                                        ((76,
                                                          Effect
                                                            ([
                                                            ],
                                                              .)),
                                                          tmp/0)
                                                    ]),
                                                Variable
                                                  ((77,
                                                    Effect
                                                      ([
                                                      ],
                                                        .)),
                                                    x/0))))))))
                    ])
                  in
                LetVar
                  (80,
                    Effect
                      ([
                        TypeEffect
                        (Type
                          (Z/3),
                          OCaml.Effect.State.state/3)
                      ],
                        .))
                  s =
                  Apply
                    ((80,
                      Effect
                        ([
                          TypeEffect
                          (Type
                            (Z/3),
                            OCaml.Effect.State.state/3)
                        ],
                          .)),
                      Variable
                        ((80,
                          Effect
                            ([
                            ],
                              .
                                -[
                                  TypeEffect
                                  (Type
                                    (Z/3),
                                    OCaml.Effect.State.state/3)
                                ]->
                                .)),
                          OCaml.Pervasives.ref/3),
                      [
                        Constant
                          ((80,
                            Effect
                              ([
                              ],
                                .)),
                            Int(110))
                      ])
                  in
                LetVar
                  (81,
                    Effect
                      ([
                        TypeEffect
                        (Type
                          (Z/3),
                          OCaml.Effect.State.state/3)
                      ],
                        .))
                  f1 =
                  Apply
                    ((81,
                      Effect
                        ([
                          TypeEffect
                          (Type
                            (Z/3),
                            OCaml.Effect.State.state/3)
                        ],
                          .
                            -[
                              TypeEffect
                              (Type
                                (Z/3),
                                OCaml.Effect.State.state/3)
                            ]->
                            .
                              -[
                                TypeEffect
                                (Type
                                  (Z/3),
                                  OCaml.Effect.State.state/3)
                              ]->
                              .
                                -[
                                  TypeEffect
                                  (Type
                                    (Z/3),
                                    OCaml.Effect.State.state/3)
                                ]->
                                .)),
                      Variable
                        ((81,
                          Effect
                            ([
                            ],
                              .
                                ->
                                .
                                  -[
                                    TypeEffect
                                    (Type
                                      (Z/3),
                                      OCaml.Effect.State.state/3)
                                  ]->
                                  .
                                    -[
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3)
                                    ]->
                                    .
                                      -[
                                        TypeEffect
                                        (Type
                                          (Z/3),
                                          OCaml.Effect.State.state/3)
                                      ]->
                                      .)),
                          f/0),
                      [
                        Apply
                          ((81,
                            Effect
                              ([
                                TypeEffect
                                (Type
                                  (Z/3),
                                  OCaml.Effect.State.state/3)
                              ],
                                .)),
                            Variable
                              ((81,
                                Effect
                                  ([
                                  ],
                                    .
                                      -[
                                        TypeEffect
                                        (Type
                                          (Z/3),
                                          OCaml.Effect.State.state/3)
                                      ]->
                                      .)),
                                OCaml.Pervasives.ref/3),
                            [
                              Constant
                                ((81,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Int(5))
                            ])
                      ])
                  in
                LetVar
                  (82,
                    Effect
                      ([
                        TypeEffect
                        (Type
                          (Z/3),
                          OCaml.Effect.State.state/3)
                      ],
                        .))
                  f2 =
                  Apply
                    ((82,
                      Effect
                        ([
                          TypeEffect
                          (Type
                            (Z/3),
                            OCaml.Effect.State.state/3)
                        ],
                          .
                            -[
                              TypeEffect
                              (Type
                                (Z/3),
                                OCaml.Effect.State.state/3)
                            ]->
                            .
                              -[
                                TypeEffect
                                (Type
                                  (Z/3),
                                  OCaml.Effect.State.state/3)
                              ]->
                              .)),
                      Variable
                        ((82,
                          Effect
                            ([
                            ],
                              .
                                -[
                                  TypeEffect
                                  (Type
                                    (Z/3),
                                    OCaml.Effect.State.state/3)
                                ]->
                                .
                                  -[
                                    TypeEffect
                                    (Type
                                      (Z/3),
                                      OCaml.Effect.State.state/3)
                                  ]->
                                  .
                                    -[
                                      TypeEffect
                                      (Type
                                        (Z/3),
                                        OCaml.Effect.State.state/3)
                                    ]->
                                    .)),
                          f1/0),
                      [
                        Constant
                          ((82,
                            Effect
                              ([
                              ],
                                .)),
                            Int(2))
                      ])
                  in
                LetVar
                  (83,
                    Effect
                      ([
                        TypeEffect
                        (Type
                          (Z/3),
                          OCaml.Effect.State.state/3)
                      ],
                        .))
                  f3 =
                  Apply
                    ((83,
                      Effect
                        ([
                          TypeEffect
                          (Type
                            (Z/3),
                            OCaml.Effect.State.state/3)
                        ],
                          .
                            -[
                              TypeEffect
                              (Type
                                (Z/3),
                                OCaml.Effect.State.state/3)
                            ]->
                            .)),
                      Variable
                        ((83,
                          Effect
                            ([
                            ],
                              .
                                -[
                                  TypeEffect
                                  (Type
                                    (Z/3),
                                    OCaml.Effect.State.state/3)
                                ]->
                                .
                                  -[
                                    TypeEffect
                                    (Type
                                      (Z/3),
                                      OCaml.Effect.State.state/3)
                                  ]->
                                  .)),
                          f2/0),
                      [
                        Constant
                          ((83,
                            Effect
                              ([
                              ],
                                .)),
                            Int(7))
                      ])
                  in
                LetVar
                  (84,
                    Effect
                      ([
                        TypeEffect
                        (Type
                          (Z/3),
                          OCaml.Effect.State.state/3)
                      ],
                        .))
                  f4 =
                  Apply
                    ((84,
                      Effect
                        ([
                          TypeEffect
                          (Type
                            (Z/3),
                            OCaml.Effect.State.state/3)
                        ],
                          .)),
                      Variable
                        ((84,
                          Effect
                            ([
                            ],
                              .
                                -[
                                  TypeEffect
                                  (Type
                                    (Z/3),
                                    OCaml.Effect.State.state/3)
                                ]->
                                .)),
                          f3/0),
                      [
                        Variable
                          ((84,
                            Effect
                              ([
                              ],
                                .)),
                            s/0)
                      ])
                  in
                Tuple
                  ((85,
                    Effect
                      ([
                        TypeEffect
                        (Type
                          (Z/3),
                          OCaml.Effect.State.state/3)
                      ],
                        .)),
                    Apply
                      ((85,
                        Effect
                          ([
                            TypeEffect
                            (Type
                              (Z/3),
                              OCaml.Effect.State.state/3)
                          ],
                            .)),
                        Variable
                          ((85,
                            Effect
                              ([
                              ],
                                .
                                  -[
                                    TypeEffect
                                    (Type
                                      (Z/3),
                                      OCaml.Effect.State.state/3)
                                  ]->
                                  .)),
                            OCaml.Effect.State.read/3),
                        [
                          Variable
                            ((85,
                              Effect
                                ([
                                ],
                                  .)),
                              f4/0)
                        ]),
                    Variable
                      ((85,
                        Effect
                          ([
                          ],
                            .)),
                        s/0)))
            ]))
    ])
