2
Value
  (non_rec, @.,
    [
      ((x, [ ], [ (a, Type (Z)); (b, Type (Z)) ],
        Monad ([ Type (OCaml.Effect.State.state, Type (Z)) ], Type (Z))),
        LetVar (3, Effect ([ Type (OCaml.Effect.State.state, Type (Z)) ], .))
          y =
          Apply
            ((3, Effect ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
              Variable
                ((3,
                  Effect
                    ([ ],
                      .
                        -[
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (Z))
                        ]-> .)), OCaml.Pervasives.ref),
              [ Constant ((3, Effect ([ ], .)), Int(0)) ]) in
        Sequence
          ((4, Effect ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
            For
              ((4,
                Effect
                  ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
                i, true, Variable ((4, Effect ([ ], .)), a),
                Variable ((4, Effect ([ ], .)), b),
                Apply
                  ((5,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (Z))
                      ], .)),
                    Variable
                      ((5,
                        Effect
                          ([ ],
                            . ->
                              .
                                -[
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (Z))
                                ]-> .)),
                        OCaml.Effect.State.write),
                    [
                      Variable ((5, Effect ([ ], .)), y);
                      Apply
                        ((5,
                          Effect
                            ([
                              Type
                                (OCaml.Effect.State.state,
                                  Type
                                    (Z))
                            ],
                              .)),
                          Variable
                            ((5,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .
                                      ->
                                      .)),
                              Z.add),
                          [
                            Apply
                              ((5,
                                Effect
                                  ([
                                    Type
                                      (OCaml.Effect.State.state,
                                        Type
                                          (Z))
                                  ],
                                    .)),
                                Variable
                                  ((5,
                                    Effect
                                      ([
                                      ],
                                        .
                                          -[
                                            Type
                                              (OCaml.Effect.State.state,
                                                Type
                                                  (Z))
                                          ]->
                                          .)),
                                    OCaml.Effect.State.read),
                                [
                                  Variable
                                    ((5,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      y)
                                ]);
                            Constant
                              ((5,
                                Effect
                                  ([
                                  ],
                                    .)),
                                Int(1))
                          ])
                    ])),
            Apply
              ((7,
                Effect
                  ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
                Variable
                  ((7,
                    Effect
                      ([ ],
                        .
                          -[
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (Z))
                          ]-> .)), OCaml.Effect.State.read),
                [ Variable ((7, Effect ([ ], .)), y) ])))
    ])

9
Value
  (non_rec, @.,
    [
      ((nested, [ ], [ (x, Type (Z)); (y, Type (Z)) ],
        Monad
          ([ Type (OCaml.Effect.State.state, Type (list, Type (bool))) ],
            Type (list, Type (bool)))),
        LetVar
          (10,
            Effect
              ([
                Type
                  (OCaml.Effect.State.state,
                    Type
                      (list,
                        Type
                          (bool)))
              ], .)) a =
          Apply
            ((10,
              Effect
                ([
                  Type
                    (OCaml.Effect.State.state,
                      Type
                        (list,
                          Type
                            (bool)))
                ], .)),
              Variable
                ((10,
                  Effect
                    ([ ],
                      .
                        -[
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (list,
                                  Type
                                    (bool)))
                        ]-> .)), OCaml.Pervasives.ref),
              [ Constructor ((10, Effect ([ ], .)), []) ]) in
        Sequence
          ((11,
            Effect
              ([
                Type
                  (OCaml.Effect.State.state,
                    Type
                      (list,
                        Type
                          (bool)))
              ], .)),
            For
              ((11,
                Effect
                  ([
                    Type
                      (OCaml.Effect.State.state,
                        Type
                          (list,
                            Type
                              (bool)))
                  ], .)), i, true,
                Constant ((11, Effect ([ ], .)), Int(0)),
                Variable ((11, Effect ([ ], .)), x),
                Sequence
                  ((12,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (list,
                                Type
                                  (bool)))
                      ], .)),
                    For
                      ((12,
                        Effect
                          ([
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (list,
                                    Type
                                      (bool)))
                          ], .)), j, true,
                        Constant
                          ((12, Effect ([ ], .)), Int(0)),
                        Variable ((12, Effect ([ ], .)), y),
                        Apply
                          ((13,
                            Effect
                              ([
                                Type
                                  (OCaml.Effect.State.state,
                                    Type
                                      (list,
                                        Type
                                          (bool)))
                              ], .)),
                            Variable
                              ((13,
                                Effect
                                  ([ ],
                                    . ->
                                      .
                                        -[
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (list,
                                                  Type
                                                    (bool)))
                                        ]-> .)),
                                OCaml.Effect.State.write),
                            [
                              Variable
                                ((13,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  a);
                              Constructor
                                ((13,
                                  Effect
                                    ([
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (list,
                                              Type
                                                (bool)))
                                    ],
                                      .)),
                                  cons,
                                  Constructor
                                    ((13,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      true),
                                  Apply
                                    ((13,
                                      Effect
                                        ([
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (list,
                                                  Type
                                                    (bool)))
                                        ],
                                          .)),
                                      Variable
                                        ((13,
                                          Effect
                                            ([
                                            ],
                                              .
                                                -[
                                                  Type
                                                    (OCaml.Effect.State.state,
                                                      Type
                                                        (list,
                                                          Type
                                                            (bool)))
                                                ]->
                                                .)),
                                          OCaml.Effect.State.read),
                                      [
                                        Variable
                                          ((13,
                                            Effect
                                              ([
                                              ],
                                                .)),
                                            a)
                                      ]))
                            ])),
                    Apply
                      ((15,
                        Effect
                          ([
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (list,
                                    Type
                                      (bool)))
                          ], .)),
                        Variable
                          ((15,
                            Effect
                              ([ ],
                                . ->
                                  .
                                    -[
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (list,
                                              Type
                                                (bool)))
                                    ]-> .)),
                            OCaml.Effect.State.write),
                        [
                          Variable
                            ((15,
                              Effect
                                ([
                                ],
                                  .)),
                              a);
                          Constructor
                            ((15,
                              Effect
                                ([
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (list,
                                          Type
                                            (bool)))
                                ],
                                  .)),
                              cons,
                              Constructor
                                ((15,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  false),
                              Apply
                                ((15,
                                  Effect
                                    ([
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (list,
                                              Type
                                                (bool)))
                                    ],
                                      .)),
                                  Variable
                                    ((15,
                                      Effect
                                        ([
                                        ],
                                          .
                                            -[
                                              Type
                                                (OCaml.Effect.State.state,
                                                  Type
                                                    (list,
                                                      Type
                                                        (bool)))
                                            ]->
                                            .)),
                                      OCaml.Effect.State.read),
                                  [
                                    Variable
                                      ((15,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        a)
                                  ]))
                        ]))),
            Apply
              ((17,
                Effect
                  ([
                    Type
                      (OCaml.Effect.State.state,
                        Type
                          (list,
                            Type
                              (bool)))
                  ], .)),
                Variable
                  ((17,
                    Effect
                      ([ ],
                        .
                          -[
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (list,
                                    Type
                                      (bool)))
                          ]-> .)), OCaml.Effect.State.read),
                [ Variable ((17, Effect ([ ], .)), a) ])))
    ])

19
Value
  (non_rec, @.,
    [
      ((raises, [ ], [ (x, Type (Z)) ],
        Monad ([ Type (OCaml.Failure) ], Type (unit))),
        For
          ((20, Effect ([ Type (OCaml.Failure) ], .)), i, true,
            Constant ((20, Effect ([ ], .)), Int(0)),
            Variable ((20, Effect ([ ], .)), x),
            Coerce
              ((?, Effect ([ Type (OCaml.Failure) ], .)),
                Apply
                  ((21, Effect ([ Type (OCaml.Failure) ], .)),
                    Variable
                      ((21,
                        Effect
                          ([ ],
                            . -[ Type (OCaml.Failure) ]->
                              .)),
                        OCaml.Pervasives.failwith),
                    [
                      Constant
                        ((21,
                          Effect
                            ([
                            ],
                              .)),
                          String("x is not less than 0"))
                    ]), Monad ([ Type (OCaml.Failure) ], ()))))
    ])

24
Value
  (non_rec, @.,
    [
      ((complex_raises, [ ], [ (x, Type (Z)) ],
        Monad ([ Type (OCaml.Failure) ], Type (unit))),
        LetFun (25, Effect ([ Type (OCaml.Failure) ], .))
          (non_rec, @.,
            [
              ((f, [ A; B ], [ (a, A) ],
                Monad
                  ([
                    Type
                      (OCaml.Failure)
                  ], (A * Type (Z) * B))),
                Tuple
                  ((25,
                    Effect
                      ([
                        Type
                          (OCaml.Failure)
                      ],
                        .)),
                    Variable
                      ((25,
                        Effect
                          ([
                          ],
                            .)),
                        a),
                    Constant
                      ((25,
                        Effect
                          ([
                          ],
                            .)),
                        Int(15)),
                    Apply
                      ((25,
                        Effect
                          ([
                            Type
                              (OCaml.Failure)
                          ],
                            .)),
                        Variable
                          ((25,
                            Effect
                              ([
                              ],
                                .
                                  -[
                                    Type
                                      (OCaml.Failure)
                                  ]->
                                  .)),
                            OCaml.Pervasives.failwith),
                        [
                          Constant
                            ((25,
                              Effect
                                ([
                                ],
                                  .)),
                              String("x is not less than 0"))
                        ])))
            ]) in
        For
          ((26, Effect ([ Type (OCaml.Failure) ], .)), i, true,
            Constant ((26, Effect ([ ], .)), Int(0)),
            Variable ((26, Effect ([ ], .)), x),
            Coerce
              ((?, Effect ([ Type (OCaml.Failure) ], .)),
                Apply
                  ((27, Effect ([ Type (OCaml.Failure) ], .)),
                    Variable
                      ((27,
                        Effect
                          ([ ],
                            . -[ Type (OCaml.Failure) ]->
                              .)), f),
                    [ Constructor ((27, Effect ([ ], .)), true) ]),
                Monad
                  ([ Type (OCaml.Failure) ],
                    (Type (bool) * Type (Z) * ())))))
    ])

30
Value
  (non_rec, @.,
    [
      ((argument_effects, [ ],
        [ (x, Type (OCaml.Effect.State.t, Type (Z))); (y, Type (Z)) ],
        Monad ([ Type (OCaml.Effect.State.state, Type (Z)) ], Type (Z))),
        LetVar (31, Effect ([ Type (OCaml.Effect.State.state, Type (Z)) ], .))
          y =
          Apply
            ((31,
              Effect ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
              Variable
                ((31,
                  Effect
                    ([ ],
                      .
                        -[
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (Z))
                        ]-> .)), OCaml.Pervasives.ref),
              [ Variable ((31, Effect ([ ], .)), y) ]) in
        LetVar (32, Effect ([ Type (OCaml.Effect.State.state, Type (Z)) ], .))
          z =
          Apply
            ((32,
              Effect ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
              Variable
                ((32,
                  Effect
                    ([ ],
                      .
                        -[
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (Z))
                        ]-> .)), OCaml.Pervasives.ref),
              [ Constant ((32, Effect ([ ], .)), Int(0)) ]) in
        Sequence
          ((33, Effect ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
            For
              ((33,
                Effect
                  ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
                i, true, Constant ((33, Effect ([ ], .)), Int(0)),
                Apply
                  ((33,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (Z))
                      ], .)),
                    Variable
                      ((33,
                        Effect
                          ([ ],
                            .
                              -[
                                Type
                                  (OCaml.Effect.State.state,
                                    Type
                                      (Z))
                              ]-> .)),
                        OCaml.Effect.State.read),
                    [ Variable ((33, Effect ([ ], .)), x) ]),
                Sequence
                  ((34,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (Z))
                      ], .)),
                    For
                      ((34,
                        Effect
                          ([
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (Z))
                          ], .)), j, true,
                        Constant
                          ((34, Effect ([ ], .)), Int(0)),
                        Apply
                          ((34,
                            Effect
                              ([
                                Type
                                  (OCaml.Effect.State.state,
                                    Type
                                      (Z))
                              ], .)),
                            Variable
                              ((34,
                                Effect
                                  ([ ],
                                    .
                                      -[
                                        Type
                                          (OCaml.Effect.State.state,
                                            Type
                                              (Z))
                                      ]-> .)),
                                OCaml.Effect.State.read),
                            [
                              Variable
                                ((34,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  y)
                            ]),
                        Apply
                          ((35,
                            Effect
                              ([
                                Type
                                  (OCaml.Effect.State.state,
                                    Type
                                      (Z))
                              ], .)),
                            Variable
                              ((35,
                                Effect
                                  ([ ],
                                    . ->
                                      .
                                        -[
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (Z))
                                        ]-> .)),
                                OCaml.Effect.State.write),
                            [
                              Variable
                                ((35,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  z);
                              Apply
                                ((35,
                                  Effect
                                    ([
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (Z))
                                    ],
                                      .)),
                                  Variable
                                    ((35,
                                      Effect
                                        ([
                                        ],
                                          .
                                            ->
                                            .
                                              ->
                                              .)),
                                      Z.add),
                                  [
                                    Apply
                                      ((35,
                                        Effect
                                          ([
                                            Type
                                              (OCaml.Effect.State.state,
                                                Type
                                                  (Z))
                                          ],
                                            .)),
                                        Variable
                                          ((35,
                                            Effect
                                              ([
                                              ],
                                                .
                                                  -[
                                                    Type
                                                      (OCaml.Effect.State.state,
                                                        Type
                                                          (Z))
                                                  ]->
                                                  .)),
                                            OCaml.Effect.State.read),
                                        [
                                          Variable
                                            ((35,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              z)
                                        ]);
                                    Constant
                                      ((35,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        Int(1))
                                  ])
                            ])),
                    Apply
                      ((37,
                        Effect
                          ([
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (Z))
                          ], .)),
                        Variable
                          ((37,
                            Effect
                              ([ ],
                                . ->
                                  .
                                    -[
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (Z))
                                    ]-> .)),
                            OCaml.Effect.State.write),
                        [
                          Variable
                            ((37,
                              Effect
                                ([
                                ],
                                  .)),
                              y);
                          Apply
                            ((37,
                              Effect
                                ([
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (Z))
                                ],
                                  .)),
                              Variable
                                ((37,
                                  Effect
                                    ([
                                    ],
                                      .
                                        ->
                                        .
                                          ->
                                          .)),
                                  Z.sub),
                              [
                                Apply
                                  ((37,
                                    Effect
                                      ([
                                        Type
                                          (OCaml.Effect.State.state,
                                            Type
                                              (Z))
                                      ],
                                        .)),
                                    Variable
                                      ((37,
                                        Effect
                                          ([
                                          ],
                                            .
                                              -[
                                                Type
                                                  (OCaml.Effect.State.state,
                                                    Type
                                                      (Z))
                                              ]->
                                              .)),
                                        OCaml.Effect.State.read),
                                    [
                                      Variable
                                        ((37,
                                          Effect
                                            ([
                                            ],
                                              .)),
                                          y)
                                    ]);
                                Constant
                                  ((37,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    Int(1))
                              ])
                        ]))),
            Apply
              ((39,
                Effect
                  ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
                Variable
                  ((39,
                    Effect
                      ([ ],
                        .
                          -[
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (Z))
                          ]-> .)), OCaml.Effect.State.read),
                [ Variable ((39, Effect ([ ], .)), z) ])))
    ])
