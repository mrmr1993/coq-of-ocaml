5
Value
  (non_rec, @.,
    [
      ((e_invalid, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml/exception, Type (OCaml/invalid_argument)) ], B)),
        Match
          ((5,
            Effect
              ([ Type (OCaml/exception, Type (OCaml/invalid_argument)) ],
                .)), Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((5,
                    Effect
                      ([
                        Type
                          (OCaml/exception,
                            Type
                              (OCaml/invalid_argument))
                      ],
                        .)),
                    Variable
                      ((5,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml/exception,
                                    Type
                                      (OCaml/invalid_argument))
                              ]->
                              .)),
                        OCaml/Pervasives.invalid_arg),
                    [
                      Constant
                        ((5,
                          Effect
                            ([
                            ],
                              .)),
                          String("error"))
                    ]))
            ]))
    ])

6
Value
  (non_rec, @.,
    [
      ((e_failure, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml/exception, Type (OCaml/failure)) ], B)),
        Match
          ((6, Effect ([ Type (OCaml/exception, Type (OCaml/failure)) ], .)),
            Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((6,
                    Effect
                      ([
                        Type
                          (OCaml/exception,
                            Type
                              (OCaml/failure))
                      ],
                        .)),
                    Variable
                      ((6,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml/exception,
                                    Type
                                      (OCaml/failure))
                              ]->
                              .)),
                        OCaml/Pervasives.failwith),
                    [
                      Constant
                        ((6,
                          Effect
                            ([
                            ],
                              .)),
                          String("error"))
                    ]))
            ]))
    ])

7
Value
  (non_rec, @.,
    [
      ((e_exit1, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml/exception, Type (OCaml/Pervasives.exit)) ], B)),
        Match
          ((7,
            Effect
              ([ Type (OCaml/exception, Type (OCaml/Pervasives.exit)) ],
                .)), Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((7,
                    Effect
                      ([
                        Type
                          (OCaml/exception,
                            Type
                              (OCaml/Pervasives.exit))
                      ],
                        .)),
                    Variable
                      ((7,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml/exception,
                                    Type
                                      (OCaml/Pervasives.exit))
                              ]->
                              .)),
                        OCaml/Pervasives.raise),
                    [
                      Constructor
                        ((7,
                          Effect
                            ([
                            ],
                              .)),
                          OCaml/Pervasives.Exit,
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .))))
                    ]))
            ]))
    ])

8
Value
  (non_rec, @.,
    [
      ((e_exit2, [ A; B ], [ (x, A) ],
        Monad ([ Type (OCaml/exception, Type (OCaml/Pervasives.exit)) ], B)),
        Match
          ((8,
            Effect
              ([ Type (OCaml/exception, Type (OCaml/Pervasives.exit)) ],
                .)), Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((8,
                    Effect
                      ([
                        Type
                          (OCaml/exception,
                            Type
                              (OCaml/Pervasives.exit))
                      ],
                        .)),
                    Variable
                      ((8,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml/exception,
                                    Type
                                      (OCaml/Pervasives.exit))
                              ]->
                              .)),
                        OCaml/Pervasives.raise),
                    [
                      Constructor
                        ((8,
                          Effect
                            ([
                            ],
                              .)),
                          OCaml/Pervasives.Exit,
                          Tuple
                            ((?,
                              Effect
                                ([
                                ],
                                  .))))
                    ]))
            ]))
    ])

11
Value
  (non_rec, @.,
    [
      ((b_eq, [ ], [ ], Type (bool)),
        Apply
          ((11, Effect ([ ], .)),
            Variable ((11, Effect ([ ], . -> . -> .)), equiv_decb),
            [
              Constant ((11, Effect ([ ], .)), Int(1));
              Constant ((11, Effect ([ ], .)), Int(2))
            ]))
    ])

12
Value
  (non_rec, @.,
    [
      ((b_neq1, [ ], [ ], Type (bool)),
        Apply
          ((12, Effect ([ ], .)),
            Variable ((12, Effect ([ ], . -> . -> .)), nequiv_decb),
            [
              Constructor ((12, Effect ([ ], .)), true);
              Constructor ((12, Effect ([ ], .)), false)
            ]))
    ])

13
Value
  (non_rec, @.,
    [
      ((b_neq2, [ ], [ ], Type (bool)),
        Apply
          ((13, Effect ([ ], .)),
            Variable ((13, Effect ([ ], . -> . -> .)), nequiv_decb),
            [
              Constructor ((13, Effect ([ ], .)), tt);
              Constructor ((13, Effect ([ ], .)), tt)
            ]))
    ])

14
Value
  (non_rec, @.,
    [
      ((b_lt, [ ], [ ], Type (bool)),
        Apply
          ((14, Effect ([ ], .)),
            Variable
              ((14, Effect ([ ], . -> . -> .)), OCaml/Pervasives.lt),
            [
              Constant ((14, Effect ([ ], .)), Int(1));
              Constant ((14, Effect ([ ], .)), Int(2))
            ]))
    ])

15
Value
  (non_rec, @.,
    [
      ((b_gt, [ ], [ ], Type (bool)),
        Apply
          ((15, Effect ([ ], .)),
            Variable
              ((15, Effect ([ ], . -> . -> .)), OCaml/Pervasives.gt),
            [
              Constant ((15, Effect ([ ], .)), Int(1));
              Constant ((15, Effect ([ ], .)), Int(2))
            ]))
    ])

16
Value
  (non_rec, @.,
    [
      ((b_le, [ ], [ ], Type (bool)),
        Apply
          ((16, Effect ([ ], .)),
            Variable
              ((16, Effect ([ ], . -> . -> .)), OCaml/Pervasives.le),
            [
              Constructor ((16, Effect ([ ], .)), true);
              Constructor ((16, Effect ([ ], .)), false)
            ]))
    ])

17
Value
  (non_rec, @.,
    [
      ((b_ge, [ ], [ ], Type (bool)),
        Apply
          ((17, Effect ([ ], .)),
            Variable
              ((17, Effect ([ ], . -> . -> .)), OCaml/Pervasives.ge),
            [
              Constructor ((17, Effect ([ ], .)), tt);
              Constructor ((17, Effect ([ ], .)), tt)
            ]))
    ])

18
Value
  (non_rec, @.,
    [
      ((comp, [ ], [ ], Type (Z)),
        Apply
          ((18, Effect ([ ], .)),
            Variable
              ((18, Effect ([ ], . -> . -> .)), OCaml/Pervasives.compare),
            [
              Constant ((18, Effect ([ ], .)), Int(1));
              Constant ((18, Effect ([ ], .)), Int(2))
            ]))
    ])

19
Value
  (non_rec, @.,
    [
      ((n_min, [ ], [ ], Type (Z)),
        Apply
          ((19, Effect ([ ], .)),
            Variable
              ((19, Effect ([ ], . -> . -> .)), OCaml/Pervasives.min),
            [
              Constant ((19, Effect ([ ], .)), Int(1));
              Constant ((19, Effect ([ ], .)), Int(2))
            ]))
    ])

20
Value
  (non_rec, @.,
    [
      ((n_max, [ ], [ ], Type (Z)),
        Apply
          ((20, Effect ([ ], .)),
            Variable
              ((20, Effect ([ ], . -> . -> .)), OCaml/Pervasives.max),
            [
              Constant ((20, Effect ([ ], .)), Int(1));
              Constant ((20, Effect ([ ], .)), Int(2))
            ]))
    ])

25
Value
  (non_rec, @.,
    [
      ((b_not, [ ], [ ], Type (bool)),
        Apply
          ((25, Effect ([ ], .)),
            Variable ((25, Effect ([ ], . -> .)), negb),
            [ Constructor ((25, Effect ([ ], .)), false) ]))
    ])

26
Value
  (non_rec, @.,
    [
      ((b_and, [ ], [ ], Type (bool)),
        Apply
          ((26, Effect ([ ], .)),
            Variable ((26, Effect ([ ], . -> . -> .)), andb),
            [
              Constructor ((26, Effect ([ ], .)), true);
              Constructor ((26, Effect ([ ], .)), false)
            ]))
    ])

27
Value
  (non_rec, @.,
    [
      ((b_and_old, [ ], [ ], Type (bool)),
        Apply
          ((27, Effect ([ ], .)),
            Variable ((27, Effect ([ ], . -> . -> .)), andb),
            [
              Constructor ((27, Effect ([ ], .)), true);
              Constructor ((27, Effect ([ ], .)), false)
            ]))
    ])

28
Value
  (non_rec, @.,
    [
      ((b_or, [ ], [ ], Type (bool)),
        Apply
          ((28, Effect ([ ], .)),
            Variable ((28, Effect ([ ], . -> . -> .)), orb),
            [
              Constructor ((28, Effect ([ ], .)), true);
              Constructor ((28, Effect ([ ], .)), false)
            ]))
    ])

29
Value
  (non_rec, @.,
    [
      ((b_or_old, [ ], [ ], Type (bool)),
        Apply
          ((29, Effect ([ ], .)),
            Variable ((29, Effect ([ ], . -> . -> .)), orb),
            [
              Constructor ((29, Effect ([ ], .)), true);
              Constructor ((29, Effect ([ ], .)), false)
            ]))
    ])

32
Value
  (non_rec, @.,
    [
      ((app1, [ ], [ ], Type (Z)),
        Apply
          ((32, Effect ([ ], .)),
            Variable
              ((32, Effect ([ ], . -> . -> .)),
                OCaml/Pervasives.reverse_apply),
            [
              Constant ((32, Effect ([ ], .)), Int(12));
              Function
                ((32, Effect ([ ], . -> .)), x,
                  Variable
                    ((32,
                      Effect
                        ([
                        ],
                          .)),
                      Ex24/x))
            ]))
    ])

33
Value
  (non_rec, @.,
    [
      ((app2, [ ], [ ], Type (Z)),
        Apply
          ((33, Effect ([ ], .)),
            Variable ((33, Effect ([ ], . -> . -> .)), apply),
            [
              Function
                ((33, Effect ([ ], . -> .)), x,
                  Variable
                    ((33,
                      Effect
                        ([
                        ],
                          .)),
                      Ex24/x));
              Constant ((33, Effect ([ ], .)), Int(12))
            ]))
    ])

36
Value
  (non_rec, @.,
    [
      ((n_neg1, [ ], [ ], Type (Z)),
        Apply
          ((36, Effect ([ ], .)),
            Variable ((36, Effect ([ ], . -> .)), Z.opp),
            [ Constant ((36, Effect ([ ], .)), Int(12)) ]))
    ])

37
Value
  (non_rec, @.,
    [
      ((n_neg2, [ ], [ ], Type (Z)), Constant ((37, Effect ([ ], .)), Int(-12)))
    ])

38
Value
  (non_rec, @.,
    [
      ((n_pos1, [ ], [ ], Type (Z)),
        Apply
          ((38, Effect ([ ], .)), Variable ((38, Effect ([ ], . -> .)), ),
            [ Constant ((38, Effect ([ ], .)), Int(12)) ]))
    ])

39
Value
  (non_rec, @.,
    [ ((n_pos2, [ ], [ ], Type (Z)), Constant ((39, Effect ([ ], .)), Int(12))) ])

40
Value
  (non_rec, @.,
    [
      ((n_succ, [ ], [ ], Type (Z)),
        Apply
          ((40, Effect ([ ], .)),
            Variable ((40, Effect ([ ], . -> .)), Z.succ),
            [ Constant ((40, Effect ([ ], .)), Int(1)) ]))
    ])

41
Value
  (non_rec, @.,
    [
      ((n_pred, [ ], [ ], Type (Z)),
        Apply
          ((41, Effect ([ ], .)),
            Variable ((41, Effect ([ ], . -> .)), Z.pred),
            [ Constant ((41, Effect ([ ], .)), Int(1)) ]))
    ])

42
Value
  (non_rec, @.,
    [
      ((n_plus, [ ], [ ], Type (Z)),
        Apply
          ((42, Effect ([ ], .)),
            Variable ((42, Effect ([ ], . -> . -> .)), Z.add),
            [
              Constant ((42, Effect ([ ], .)), Int(1));
              Constant ((42, Effect ([ ], .)), Int(2))
            ]))
    ])

43
Value
  (non_rec, @.,
    [
      ((n_minus, [ ], [ ], Type (Z)),
        Apply
          ((43, Effect ([ ], .)),
            Variable ((43, Effect ([ ], . -> . -> .)), Z.sub),
            [
              Constant ((43, Effect ([ ], .)), Int(1));
              Constant ((43, Effect ([ ], .)), Int(2))
            ]))
    ])

44
Value
  (non_rec, @.,
    [
      ((n_times, [ ], [ ], Type (Z)),
        Apply
          ((44, Effect ([ ], .)),
            Variable ((44, Effect ([ ], . -> . -> .)), Z.mul),
            [
              Constant ((44, Effect ([ ], .)), Int(1));
              Constant ((44, Effect ([ ], .)), Int(2))
            ]))
    ])

45
Value
  (non_rec, @.,
    [
      ((n_div, [ ], [ ], Type (Z)),
        Apply
          ((45, Effect ([ ], .)),
            Variable ((45, Effect ([ ], . -> . -> .)), Z.div),
            [
              Constant ((45, Effect ([ ], .)), Int(1));
              Constant ((45, Effect ([ ], .)), Int(2))
            ]))
    ])

46
Value
  (non_rec, @.,
    [
      ((n_mod, [ ], [ ], Type (Z)),
        Apply
          ((46, Effect ([ ], .)),
            Variable ((46, Effect ([ ], . -> . -> .)), Z.modulo),
            [
              Constant ((46, Effect ([ ], .)), Int(1));
              Constant ((46, Effect ([ ], .)), Int(2))
            ]))
    ])

47
Value
  (non_rec, @.,
    [
      ((n_abs, [ ], [ ], Type (Z)),
        Apply
          ((47, Effect ([ ], .)),
            Variable ((47, Effect ([ ], . -> .)), Z.abs),
            [ Constant ((47, Effect ([ ], .)), Int(1)) ]))
    ])

52
Value
  (non_rec, @.,
    [
      ((n_land, [ ], [ ], Type (Z)),
        Apply
          ((52, Effect ([ ], .)),
            Variable ((52, Effect ([ ], . -> . -> .)), Z.land),
            [
              Constant ((52, Effect ([ ], .)), Int(12));
              Constant ((52, Effect ([ ], .)), Int(13))
            ]))
    ])

53
Value
  (non_rec, @.,
    [
      ((n_lor, [ ], [ ], Type (Z)),
        Apply
          ((53, Effect ([ ], .)),
            Variable ((53, Effect ([ ], . -> . -> .)), Z.lor),
            [
              Constant ((53, Effect ([ ], .)), Int(12));
              Constant ((53, Effect ([ ], .)), Int(13))
            ]))
    ])

54
Value
  (non_rec, @.,
    [
      ((n_lxor, [ ], [ ], Type (Z)),
        Apply
          ((54, Effect ([ ], .)),
            Variable ((54, Effect ([ ], . -> . -> .)), Z.lxor),
            [
              Constant ((54, Effect ([ ], .)), Int(12));
              Constant ((54, Effect ([ ], .)), Int(13))
            ]))
    ])

56
Value
  (non_rec, @.,
    [
      ((n_lsl, [ ], [ ], Type (Z)),
        Apply
          ((56, Effect ([ ], .)),
            Variable ((56, Effect ([ ], . -> . -> .)), Z.shiftl),
            [
              Constant ((56, Effect ([ ], .)), Int(12));
              Constant ((56, Effect ([ ], .)), Int(13))
            ]))
    ])

57
Value
  (non_rec, @.,
    [
      ((n_lsr, [ ], [ ], Type (Z)),
        Apply
          ((57, Effect ([ ], .)),
            Variable ((57, Effect ([ ], . -> . -> .)), Z.shiftr),
            [
              Constant ((57, Effect ([ ], .)), Int(12));
              Constant ((57, Effect ([ ], .)), Int(13))
            ]))
    ])

64
Value
  (non_rec, @.,
    [
      ((ss, [ ], [ ], Type (string)),
        Apply
          ((64, Effect ([ ], .)),
            Variable ((64, Effect ([ ], . -> . -> .)), String.append),
            [
              Constant ((64, Effect ([ ], .)), String("begin"));
              Constant ((64, Effect ([ ], .)), String("end"))
            ]))
    ])

67
Value
  (non_rec, @.,
    [
      ((n_char, [ ], [ ], Type (Z)),
        Apply
          ((67, Effect ([ ], .)),
            Variable
              ((67, Effect ([ ], . -> .)), OCaml/Pervasives.int_of_char),
            [ Constant ((67, Effect ([ ], .)), Char("c")) ]))
    ])

68
Value
  (non_rec, @.,
    [
      ((char_n, [ A ], [ (x, A) ],
        Monad
          ([ Type (OCaml/exception, Type (invalid_argument)) ], Type (ascii))),
        Match
          ((68,
            Effect
              ([ Type (OCaml/exception, Type (invalid_argument)) ], .)),
            Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((68,
                    Effect
                      ([
                        Type
                          (OCaml/exception,
                            Type
                              (invalid_argument))
                      ],
                        .)),
                    Variable
                      ((68,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml/exception,
                                    Type
                                      (invalid_argument))
                              ]->
                              .)),
                        OCaml/Pervasives.char_of_int),
                    [
                      Constant
                        ((68,
                          Effect
                            ([
                            ],
                              .)),
                          Int(23))
                    ]))
            ]))
    ])

71
Value
  (non_rec, @.,
    [
      ((i, [ ], [ ], Type (unit)),
        Apply
          ((71, Effect ([ ], .)),
            Variable ((71, Effect ([ ], . -> .)), OCaml/Pervasives.ignore),
            [ Constant ((71, Effect ([ ], .)), Int(12)) ]))
    ])

74
Value
  (non_rec, @.,
    [
      ((s_bool, [ ], [ ], Type (string)),
        Apply
          ((74, Effect ([ ], .)),
            Variable
              ((74, Effect ([ ], . -> .)),
                OCaml/Pervasives.string_of_bool),
            [ Constructor ((74, Effect ([ ], .)), false) ]))
    ])

75
Value
  (non_rec, @.,
    [
      ((bool_s, [ ], [ ], Type (bool)),
        Apply
          ((75, Effect ([ ], .)),
            Variable
              ((75, Effect ([ ], . -> .)),
                OCaml/Pervasives.bool_of_string),
            [ Constant ((75, Effect ([ ], .)), String("false")) ]))
    ])

76
Value
  (non_rec, @.,
    [
      ((s_n, [ ], [ ], Type (string)),
        Apply
          ((76, Effect ([ ], .)),
            Variable
              ((76, Effect ([ ], . -> .)),
                OCaml/Pervasives.string_of_int),
            [ Constant ((76, Effect ([ ], .)), Int(12)) ]))
    ])

77
Value
  (non_rec, @.,
    [
      ((n_s, [ ], [ ], Type (Z)),
        Apply
          ((77, Effect ([ ], .)),
            Variable
              ((77, Effect ([ ], . -> .)),
                OCaml/Pervasives.int_of_string),
            [ Constant ((77, Effect ([ ], .)), String("12")) ]))
    ])

82
Value
  (non_rec, @.,
    [
      ((n1, [ ], [ ], Type (Z)),
        Apply
          ((82, Effect ([ ], .)),
            Variable ((82, Effect ([ ], . -> .)), fst),
            [
              Tuple
                ((82, Effect ([ ], .)),
                  Constant
                    ((82,
                      Effect
                        ([
                        ],
                          .)),
                      Int(12)),
                  Constant
                    ((82,
                      Effect
                        ([
                        ],
                          .)),
                      Int(13)))
            ]))
    ])

83
Value
  (non_rec, @.,
    [
      ((n2, [ ], [ ], Type (Z)),
        Apply
          ((83, Effect ([ ], .)),
            Variable ((83, Effect ([ ], . -> .)), snd),
            [
              Tuple
                ((83, Effect ([ ], .)),
                  Constant
                    ((83,
                      Effect
                        ([
                        ],
                          .)),
                      Int(12)),
                  Constant
                    ((83,
                      Effect
                        ([
                        ],
                          .)),
                      Int(13)))
            ]))
    ])

86
Value
  (non_rec, @.,
    [
      ((ll, [ ], [ ], Type (list, Type (Z))),
        Apply
          ((86, Effect ([ ], .)),
            Variable
              ((86, Effect ([ ], . -> . -> .)), OCaml/Pervasives.app),
            [
              Constructor
                ((86, Effect ([ ], .)), cons,
                  Constant
                    ((86,
                      Effect
                        ([
                        ],
                          .)),
                      Int(1)),
                  Constructor
                    ((86,
                      Effect
                        ([
                        ],
                          .)),
                      cons,
                      Constant
                        ((86,
                          Effect
                            ([
                            ],
                              .)),
                          Int(2)),
                      Constructor
                        ((86,
                          Effect
                            ([
                            ],
                              .)),
                          [])));
              Constructor
                ((86, Effect ([ ], .)), cons,
                  Constant
                    ((86,
                      Effect
                        ([
                        ],
                          .)),
                      Int(3)),
                  Constructor
                    ((86,
                      Effect
                        ([
                        ],
                          .)),
                      cons,
                      Constant
                        ((86,
                          Effect
                            ([
                            ],
                              .)),
                          Int(4)),
                      Constructor
                        ((86,
                          Effect
                            ([
                            ],
                              .)),
                          [])))
            ]))
    ])

94
Value
  (non_rec, @.,
    [
      ((p_c, [ A ], [ (x, A) ], Monad ([ Type (IO) ], Type (unit))),
        Match
          ((94, Effect ([ Type (IO) ], .)),
            Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((94,
                    Effect
                      ([
                        Type
                          (IO)
                      ],
                        .)),
                    Variable
                      ((94,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (IO)
                              ]->
                              .)),
                        OCaml/Pervasives.print_char),
                    [
                      Constant
                        ((94,
                          Effect
                            ([
                            ],
                              .)),
                          Char("c"))
                    ]))
            ]))
    ])

95
Value
  (non_rec, @.,
    [
      ((p_s, [ A ], [ (x, A) ], Monad ([ Type (IO) ], Type (unit))),
        Match
          ((95, Effect ([ Type (IO) ], .)),
            Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((95,
                    Effect
                      ([
                        Type
                          (IO)
                      ],
                        .)),
                    Variable
                      ((95,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (IO)
                              ]->
                              .)),
                        OCaml/Pervasives.print_string),
                    [
                      Constant
                        ((95,
                          Effect
                            ([
                            ],
                              .)),
                          String("str"))
                    ]))
            ]))
    ])

96
Value
  (non_rec, @.,
    [
      ((p_n, [ A ], [ (x, A) ], Monad ([ Type (IO) ], Type (unit))),
        Match
          ((96, Effect ([ Type (IO) ], .)),
            Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((96,
                    Effect
                      ([
                        Type
                          (IO)
                      ],
                        .)),
                    Variable
                      ((96,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (IO)
                              ]->
                              .)),
                        OCaml/Pervasives.print_int),
                    [
                      Constant
                        ((96,
                          Effect
                            ([
                            ],
                              .)),
                          Int(12))
                    ]))
            ]))
    ])

98
Value
  (non_rec, @.,
    [
      ((p_endline, [ A ], [ (x, A) ], Monad ([ Type (IO) ], Type (unit))),
        Match
          ((98, Effect ([ Type (IO) ], .)),
            Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((98,
                    Effect
                      ([
                        Type
                          (IO)
                      ],
                        .)),
                    Variable
                      ((98,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (IO)
                              ]->
                              .)),
                        OCaml/Pervasives.print_endline),
                    [
                      Constant
                        ((98,
                          Effect
                            ([
                            ],
                              .)),
                          String("str"))
                    ]))
            ]))
    ])

99
Value
  (non_rec, @.,
    [
      ((p_newline, [ A ], [ (x, A) ], Monad ([ Type (IO) ], Type (unit))),
        Match
          ((99, Effect ([ Type (IO) ], .)),
            Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((99,
                    Effect
                      ([
                        Type
                          (IO)
                      ],
                        .)),
                    Variable
                      ((99,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (IO)
                              ]->
                              .)),
                        OCaml/Pervasives.print_newline),
                    [
                      Constructor
                        ((99,
                          Effect
                            ([
                            ],
                              .)),
                          tt)
                    ]))
            ]))
    ])

102
Value
  (non_rec, @.,
    [
      ((perr_c, [ A ], [ (x, A) ], Monad ([ Type (IO) ], Type (unit))),
        Match
          ((102, Effect ([ Type (IO) ], .)),
            Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((102,
                    Effect
                      ([
                        Type
                          (IO)
                      ],
                        .)),
                    Variable
                      ((102,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (IO)
                              ]->
                              .)),
                        OCaml/Pervasives.prerr_char),
                    [
                      Constant
                        ((102,
                          Effect
                            ([
                            ],
                              .)),
                          Char("c"))
                    ]))
            ]))
    ])

103
Value
  (non_rec, @.,
    [
      ((perr_s, [ A ], [ (x, A) ], Monad ([ Type (IO) ], Type (unit))),
        Match
          ((103, Effect ([ Type (IO) ], .)),
            Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((103,
                    Effect
                      ([
                        Type
                          (IO)
                      ],
                        .)),
                    Variable
                      ((103,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (IO)
                              ]->
                              .)),
                        OCaml/Pervasives.prerr_string),
                    [
                      Constant
                        ((103,
                          Effect
                            ([
                            ],
                              .)),
                          String("str"))
                    ]))
            ]))
    ])

104
Value
  (non_rec, @.,
    [
      ((perr_n, [ A ], [ (x, A) ], Monad ([ Type (IO) ], Type (unit))),
        Match
          ((104, Effect ([ Type (IO) ], .)),
            Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((104,
                    Effect
                      ([
                        Type
                          (IO)
                      ],
                        .)),
                    Variable
                      ((104,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (IO)
                              ]->
                              .)),
                        OCaml/Pervasives.prerr_int),
                    [
                      Constant
                        ((104,
                          Effect
                            ([
                            ],
                              .)),
                          Int(12))
                    ]))
            ]))
    ])

106
Value
  (non_rec, @.,
    [
      ((perr_endline, [ A ], [ (x, A) ], Monad ([ Type (IO) ], Type (unit))),
        Match
          ((106, Effect ([ Type (IO) ], .)),
            Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((106,
                    Effect
                      ([
                        Type
                          (IO)
                      ],
                        .)),
                    Variable
                      ((106,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (IO)
                              ]->
                              .)),
                        OCaml/Pervasives.prerr_endline),
                    [
                      Constant
                        ((106,
                          Effect
                            ([
                            ],
                              .)),
                          String("str"))
                    ]))
            ]))
    ])

107
Value
  (non_rec, @.,
    [
      ((perr_newline, [ A ], [ (x, A) ], Monad ([ Type (IO) ], Type (unit))),
        Match
          ((107, Effect ([ Type (IO) ], .)),
            Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((107,
                    Effect
                      ([
                        Type
                          (IO)
                      ],
                        .)),
                    Variable
                      ((107,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (IO)
                              ]->
                              .)),
                        OCaml/Pervasives.prerr_newline),
                    [
                      Constructor
                        ((107,
                          Effect
                            ([
                            ],
                              .)),
                          tt)
                    ]))
            ]))
    ])

110
Value
  (non_rec, @.,
    [
      ((r_s, [ A ], [ (x, A) ], Monad ([ Type (IO) ], Type (string))),
        Match
          ((110, Effect ([ Type (IO) ], .)),
            Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((110,
                    Effect
                      ([
                        Type
                          (IO)
                      ],
                        .)),
                    Variable
                      ((110,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (IO)
                              ]->
                              .)),
                        OCaml/Pervasives.read_line),
                    [
                      Constructor
                        ((110,
                          Effect
                            ([
                            ],
                              .)),
                          tt)
                    ]))
            ]))
    ])

111
Value
  (non_rec, @.,
    [
      ((r_n, [ A ], [ (x, A) ], Monad ([ Type (IO) ], Type (Z))),
        Match
          ((111, Effect ([ Type (IO) ], .)),
            Variable ((?, Effect ([ ], .)), Ex24/x),
            [
              (Any,
                Apply
                  ((111,
                    Effect
                      ([
                        Type
                          (IO)
                      ],
                        .)),
                    Variable
                      ((111,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (IO)
                              ]->
                              .)),
                        OCaml/Pervasives.read_int),
                    [
                      Constructor
                        ((111,
                          Effect
                            ([
                            ],
                              .)),
                          tt)
                    ]))
            ]))
    ])
