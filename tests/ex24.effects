5
Value
  (non_rec, @.,
    [
      ((e_invalid, [ A; B ], [ (x, A) ], B),
        Match
          ((?, Effect ([ OCaml.Invalid_argument/1 ], .)),
            Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((5,
                    Effect
                      ([
                        OCaml.Invalid_argument/1
                      ],
                        .)),
                    Variable
                      ((5,
                        Effect
                          ([
                          ],
                            .
                              -[
                                OCaml.Invalid_argument/1
                              ]->
                              .)),
                        OCaml.Pervasives.invalid_arg/1),
                    [
                      Constant
                        ((5,
                          Effect
                            ([
                            ],
                              .)),
                          String("error"))
                    ]))
            ]))
    ])

6
Value
  (non_rec, @.,
    [
      ((e_failure, [ A; B ], [ (x, A) ], B),
        Match
          ((?, Effect ([ OCaml.Failure/1 ], .)),
            Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((6,
                    Effect
                      ([
                        OCaml.Failure/1
                      ],
                        .)),
                    Variable
                      ((6,
                        Effect
                          ([
                          ],
                            .
                              -[
                                OCaml.Failure/1
                              ]->
                              .)),
                        OCaml.Pervasives.failwith/1),
                    [
                      Constant
                        ((6,
                          Effect
                            ([
                            ],
                              .)),
                          String("error"))
                    ]))
            ]))
    ])

7
Value
  (non_rec, @.,
    [
      ((e_exit1, [ A; B ], [ (x, A) ], B),
        Match
          ((?, Effect ([ OCaml.Pervasives.Exit/1 ], .)),
            Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((7,
                    Effect
                      ([
                        OCaml.Pervasives.Exit/1
                      ],
                        .)),
                    Variable
                      ((7,
                        Effect
                          ([
                          ],
                            .
                              -[
                                OCaml.Pervasives.Exit/1
                              ]->
                              .)),
                        OCaml.Pervasives.raise_Exit/1),
                    [
                      Tuple
                        ((?,
                          Effect
                            ([
                            ],
                              .)))
                    ]))
            ]))
    ])

8
Value
  (non_rec, @.,
    [
      ((e_exit2, [ A; B ], [ (x, A) ], B),
        Match
          ((?, Effect ([ OCaml.Pervasives.Exit/1 ], .)),
            Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((8,
                    Effect
                      ([
                        OCaml.Pervasives.Exit/1
                      ],
                        .)),
                    Variable
                      ((8,
                        Effect
                          ([
                          ],
                            .
                              -[
                                OCaml.Pervasives.Exit/1
                              ]->
                              .)),
                        OCaml.Pervasives.raise_Exit/1),
                    [
                      Tuple
                        ((?,
                          Effect
                            ([
                            ],
                              .)))
                    ]))
            ]))
    ])

11
Value
  (non_rec, @.,
    [
      ((b_eq, [ ], [ ], Type (bool/1)),
        Apply
          ((11, Effect ([ ], .)),
            Variable ((11, Effect ([ ], .)), equiv_decb/1),
            [
              Constant ((11, Effect ([ ], .)), Int(1));
              Constant ((11, Effect ([ ], .)), Int(2))
            ]))
    ])

12
Value
  (non_rec, @.,
    [
      ((b_neq1, [ ], [ ], Type (bool/1)),
        Apply
          ((12, Effect ([ ], .)),
            Variable ((12, Effect ([ ], .)), nequiv_decb/1),
            [
              Constructor ((12, Effect ([ ], .)), true/1);
              Constructor ((12, Effect ([ ], .)), false/1)
            ]))
    ])

13
Value
  (non_rec, @.,
    [
      ((b_neq2, [ ], [ ], Type (bool/1)),
        Apply
          ((13, Effect ([ ], .)),
            Variable ((13, Effect ([ ], .)), nequiv_decb/1),
            [
              Constructor ((13, Effect ([ ], .)), tt/1);
              Constructor ((13, Effect ([ ], .)), tt/1)
            ]))
    ])

14
Value
  (non_rec, @.,
    [
      ((b_lt, [ ], [ ], Type (bool/1)),
        Apply
          ((14, Effect ([ ], .)),
            Variable ((14, Effect ([ ], .)), OCaml.Pervasives.lt/1),
            [
              Constant ((14, Effect ([ ], .)), Int(1));
              Constant ((14, Effect ([ ], .)), Int(2))
            ]))
    ])

15
Value
  (non_rec, @.,
    [
      ((b_gt, [ ], [ ], Type (bool/1)),
        Apply
          ((15, Effect ([ ], .)),
            Variable ((15, Effect ([ ], .)), OCaml.Pervasives.gt/1),
            [
              Constant ((15, Effect ([ ], .)), Int(1));
              Constant ((15, Effect ([ ], .)), Int(2))
            ]))
    ])

16
Value
  (non_rec, @.,
    [
      ((b_le, [ ], [ ], Type (bool/1)),
        Apply
          ((16, Effect ([ ], .)),
            Variable ((16, Effect ([ ], .)), OCaml.Pervasives.le/1),
            [
              Constructor ((16, Effect ([ ], .)), true/1);
              Constructor ((16, Effect ([ ], .)), false/1)
            ]))
    ])

17
Value
  (non_rec, @.,
    [
      ((b_ge, [ ], [ ], Type (bool/1)),
        Apply
          ((17, Effect ([ ], .)),
            Variable ((17, Effect ([ ], .)), OCaml.Pervasives.ge/1),
            [
              Constructor ((17, Effect ([ ], .)), tt/1);
              Constructor ((17, Effect ([ ], .)), tt/1)
            ]))
    ])

18
Value
  (non_rec, @.,
    [
      ((comp, [ ], [ ], Type (Z/1)),
        Apply
          ((18, Effect ([ ], .)),
            Variable ((18, Effect ([ ], .)), OCaml.Pervasives.compare/1),
            [
              Constant ((18, Effect ([ ], .)), Int(1));
              Constant ((18, Effect ([ ], .)), Int(2))
            ]))
    ])

19
Value
  (non_rec, @.,
    [
      ((n_min, [ ], [ ], Type (Z/1)),
        Apply
          ((19, Effect ([ ], .)),
            Variable ((19, Effect ([ ], .)), OCaml.Pervasives.min/1),
            [
              Constant ((19, Effect ([ ], .)), Int(1));
              Constant ((19, Effect ([ ], .)), Int(2))
            ]))
    ])

20
Value
  (non_rec, @.,
    [
      ((n_max, [ ], [ ], Type (Z/1)),
        Apply
          ((20, Effect ([ ], .)),
            Variable ((20, Effect ([ ], .)), OCaml.Pervasives.max/1),
            [
              Constant ((20, Effect ([ ], .)), Int(1));
              Constant ((20, Effect ([ ], .)), Int(2))
            ]))
    ])

25
Value
  (non_rec, @.,
    [
      ((b_not, [ ], [ ], Type (bool/1)),
        Apply
          ((25, Effect ([ ], .)), Variable ((25, Effect ([ ], .)), negb/1),
            [ Constructor ((25, Effect ([ ], .)), false/1) ]))
    ])

26
Value
  (non_rec, @.,
    [
      ((b_and, [ ], [ ], Type (bool/1)),
        Apply
          ((26, Effect ([ ], .)), Variable ((26, Effect ([ ], .)), andb/1),
            [
              Constructor ((26, Effect ([ ], .)), true/1);
              Constructor ((26, Effect ([ ], .)), false/1)
            ]))
    ])

27
Value
  (non_rec, @.,
    [
      ((b_and_old, [ ], [ ], Type (bool/1)),
        Apply
          ((27, Effect ([ ], .)), Variable ((27, Effect ([ ], .)), andb/1),
            [
              Constructor ((27, Effect ([ ], .)), true/1);
              Constructor ((27, Effect ([ ], .)), false/1)
            ]))
    ])

28
Value
  (non_rec, @.,
    [
      ((b_or, [ ], [ ], Type (bool/1)),
        Apply
          ((28, Effect ([ ], .)), Variable ((28, Effect ([ ], .)), orb/1),
            [
              Constructor ((28, Effect ([ ], .)), true/1);
              Constructor ((28, Effect ([ ], .)), false/1)
            ]))
    ])

29
Value
  (non_rec, @.,
    [
      ((b_or_old, [ ], [ ], Type (bool/1)),
        Apply
          ((29, Effect ([ ], .)), Variable ((29, Effect ([ ], .)), orb/1),
            [
              Constructor ((29, Effect ([ ], .)), true/1);
              Constructor ((29, Effect ([ ], .)), false/1)
            ]))
    ])

32
Value
  (non_rec, @.,
    [
      ((app1, [ ], [ ], Type (Z/1)),
        Apply
          ((32, Effect ([ ], .)),
            Variable
              ((32, Effect ([ ], .)), OCaml.Pervasives.reverse_apply/1),
            [
              Constant ((32, Effect ([ ], .)), Int(12));
              Function
                ((32, Effect ([ ], . -> .)), x,
                  Variable
                    ((32,
                      Effect
                        ([
                        ],
                          .)),
                      x/0))
            ]))
    ])

33
Value
  (non_rec, @.,
    [
      ((app2, [ ], [ ], Type (Z/1)),
        Apply
          ((33, Effect ([ ], .)), Variable ((33, Effect ([ ], .)), apply/1),
            [
              Function
                ((33, Effect ([ ], . -> .)), x,
                  Variable
                    ((33,
                      Effect
                        ([
                        ],
                          .)),
                      x/0));
              Constant ((33, Effect ([ ], .)), Int(12))
            ]))
    ])

36
Value
  (non_rec, @.,
    [
      ((n_neg1, [ ], [ ], Type (Z/1)),
        Apply
          ((36, Effect ([ ], .)), Variable ((36, Effect ([ ], .)), Z.opp/1),
            [ Constant ((36, Effect ([ ], .)), Int(12)) ]))
    ])

37
Value
  (non_rec, @.,
    [
      ((n_neg2, [ ], [ ], Type (Z/1)),
        Constant ((37, Effect ([ ], .)), Int(-12)))
    ])

38
Value
  (non_rec, @.,
    [
      ((n_pos1, [ ], [ ], Type (Z/1)),
        Apply
          ((38, Effect ([ ], .)), Variable ((38, Effect ([ ], .)), /1),
            [ Constant ((38, Effect ([ ], .)), Int(12)) ]))
    ])

39
Value
  (non_rec, @.,
    [
      ((n_pos2, [ ], [ ], Type (Z/1)), Constant ((39, Effect ([ ], .)), Int(12)))
    ])

40
Value
  (non_rec, @.,
    [
      ((n_succ, [ ], [ ], Type (Z/1)),
        Apply
          ((40, Effect ([ ], .)),
            Variable ((40, Effect ([ ], .)), Z.succ/1),
            [ Constant ((40, Effect ([ ], .)), Int(1)) ]))
    ])

41
Value
  (non_rec, @.,
    [
      ((n_pred, [ ], [ ], Type (Z/1)),
        Apply
          ((41, Effect ([ ], .)),
            Variable ((41, Effect ([ ], .)), Z.pred/1),
            [ Constant ((41, Effect ([ ], .)), Int(1)) ]))
    ])

42
Value
  (non_rec, @.,
    [
      ((n_plus, [ ], [ ], Type (Z/1)),
        Apply
          ((42, Effect ([ ], .)), Variable ((42, Effect ([ ], .)), Z.add/1),
            [
              Constant ((42, Effect ([ ], .)), Int(1));
              Constant ((42, Effect ([ ], .)), Int(2))
            ]))
    ])

43
Value
  (non_rec, @.,
    [
      ((n_minus, [ ], [ ], Type (Z/1)),
        Apply
          ((43, Effect ([ ], .)), Variable ((43, Effect ([ ], .)), Z.sub/1),
            [
              Constant ((43, Effect ([ ], .)), Int(1));
              Constant ((43, Effect ([ ], .)), Int(2))
            ]))
    ])

44
Value
  (non_rec, @.,
    [
      ((n_times, [ ], [ ], Type (Z/1)),
        Apply
          ((44, Effect ([ ], .)), Variable ((44, Effect ([ ], .)), Z.mul/1),
            [
              Constant ((44, Effect ([ ], .)), Int(1));
              Constant ((44, Effect ([ ], .)), Int(2))
            ]))
    ])

45
Value
  (non_rec, @.,
    [
      ((n_div, [ ], [ ], Type (Z/1)),
        Apply
          ((45, Effect ([ ], .)), Variable ((45, Effect ([ ], .)), Z.div/1),
            [
              Constant ((45, Effect ([ ], .)), Int(1));
              Constant ((45, Effect ([ ], .)), Int(2))
            ]))
    ])

46
Value
  (non_rec, @.,
    [
      ((n_mod, [ ], [ ], Type (Z/1)),
        Apply
          ((46, Effect ([ ], .)),
            Variable ((46, Effect ([ ], .)), Z.modulo/1),
            [
              Constant ((46, Effect ([ ], .)), Int(1));
              Constant ((46, Effect ([ ], .)), Int(2))
            ]))
    ])

47
Value
  (non_rec, @.,
    [
      ((n_abs, [ ], [ ], Type (Z/1)),
        Apply
          ((47, Effect ([ ], .)), Variable ((47, Effect ([ ], .)), Z.abs/1),
            [ Constant ((47, Effect ([ ], .)), Int(1)) ]))
    ])

52
Value
  (non_rec, @.,
    [
      ((n_land, [ ], [ ], Type (Z/1)),
        Apply
          ((52, Effect ([ ], .)),
            Variable ((52, Effect ([ ], .)), Z.land/1),
            [
              Constant ((52, Effect ([ ], .)), Int(12));
              Constant ((52, Effect ([ ], .)), Int(13))
            ]))
    ])

53
Value
  (non_rec, @.,
    [
      ((n_lor, [ ], [ ], Type (Z/1)),
        Apply
          ((53, Effect ([ ], .)), Variable ((53, Effect ([ ], .)), Z.lor/1),
            [
              Constant ((53, Effect ([ ], .)), Int(12));
              Constant ((53, Effect ([ ], .)), Int(13))
            ]))
    ])

54
Value
  (non_rec, @.,
    [
      ((n_lxor, [ ], [ ], Type (Z/1)),
        Apply
          ((54, Effect ([ ], .)),
            Variable ((54, Effect ([ ], .)), Z.lxor/1),
            [
              Constant ((54, Effect ([ ], .)), Int(12));
              Constant ((54, Effect ([ ], .)), Int(13))
            ]))
    ])

56
Value
  (non_rec, @.,
    [
      ((n_lsl, [ ], [ ], Type (Z/1)),
        Apply
          ((56, Effect ([ ], .)),
            Variable ((56, Effect ([ ], .)), Z.shiftl/1),
            [
              Constant ((56, Effect ([ ], .)), Int(12));
              Constant ((56, Effect ([ ], .)), Int(13))
            ]))
    ])

57
Value
  (non_rec, @.,
    [
      ((n_lsr, [ ], [ ], Type (Z/1)),
        Apply
          ((57, Effect ([ ], .)),
            Variable ((57, Effect ([ ], .)), Z.shiftr/1),
            [
              Constant ((57, Effect ([ ], .)), Int(12));
              Constant ((57, Effect ([ ], .)), Int(13))
            ]))
    ])

64
Value
  (non_rec, @.,
    [
      ((ss, [ ], [ ], Type (string/1)),
        Apply
          ((64, Effect ([ ], .)),
            Variable ((64, Effect ([ ], .)), String.append/1),
            [
              Constant ((64, Effect ([ ], .)), String("begin"));
              Constant ((64, Effect ([ ], .)), String("end"))
            ]))
    ])

67
Value
  (non_rec, @.,
    [
      ((n_char, [ ], [ ], Type (Z/1)),
        Apply
          ((67, Effect ([ ], .)),
            Variable
              ((67, Effect ([ ], .)), OCaml.Pervasives.int_of_char/1),
            [ Constant ((67, Effect ([ ], .)), Char("c")) ]))
    ])

68
Value
  (non_rec, @.,
    [
      ((char_n, [ A ], [ (x, A) ], Type (ascii/1)),
        Match
          ((?, Effect ([ OCaml.Invalid_argument/1 ], .)),
            Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((68,
                    Effect
                      ([
                        OCaml.Invalid_argument/1
                      ],
                        .)),
                    Variable
                      ((68,
                        Effect
                          ([
                          ],
                            .
                              -[
                                OCaml.Invalid_argument/1
                              ]->
                              .)),
                        OCaml.Pervasives.char_of_int/1),
                    [
                      Constant
                        ((68,
                          Effect
                            ([
                            ],
                              .)),
                          Int(23))
                    ]))
            ]))
    ])

71
Value
  (non_rec, @.,
    [
      ((i, [ ], [ ], Type (unit/1)),
        Apply
          ((71, Effect ([ ], .)),
            Variable ((71, Effect ([ ], .)), OCaml.Pervasives.ignore/1),
            [ Constant ((71, Effect ([ ], .)), Int(12)) ]))
    ])

74
Value
  (non_rec, @.,
    [
      ((s_bool, [ ], [ ], Type (string/1)),
        Apply
          ((74, Effect ([ ], .)),
            Variable
              ((74, Effect ([ ], .)), OCaml.Pervasives.string_of_bool/1),
            [ Constructor ((74, Effect ([ ], .)), false/1) ]))
    ])

75
Value
  (non_rec, @.,
    [
      ((bool_s, [ ], [ ], Type (bool/1)),
        Apply
          ((75, Effect ([ ], .)),
            Variable
              ((75, Effect ([ ], .)), OCaml.Pervasives.bool_of_string/1),
            [ Constant ((75, Effect ([ ], .)), String("false")) ]))
    ])

76
Value
  (non_rec, @.,
    [
      ((s_n, [ ], [ ], Type (string/1)),
        Apply
          ((76, Effect ([ ], .)),
            Variable
              ((76, Effect ([ ], .)), OCaml.Pervasives.string_of_int/1),
            [ Constant ((76, Effect ([ ], .)), Int(12)) ]))
    ])

77
Value
  (non_rec, @.,
    [
      ((n_s, [ ], [ ], Type (Z/1)),
        Apply
          ((77, Effect ([ ], .)),
            Variable
              ((77, Effect ([ ], .)), OCaml.Pervasives.int_of_string/1),
            [ Constant ((77, Effect ([ ], .)), String("12")) ]))
    ])

82
Value
  (non_rec, @.,
    [
      ((n1, [ ], [ ], Type (Z/1)),
        Apply
          ((82, Effect ([ ], .)), Variable ((82, Effect ([ ], .)), fst/1),
            [
              Tuple
                ((82, Effect ([ ], .)),
                  Constant
                    ((82,
                      Effect
                        ([
                        ],
                          .)),
                      Int(12)),
                  Constant
                    ((82,
                      Effect
                        ([
                        ],
                          .)),
                      Int(13)))
            ]))
    ])

83
Value
  (non_rec, @.,
    [
      ((n2, [ ], [ ], Type (Z/1)),
        Apply
          ((83, Effect ([ ], .)), Variable ((83, Effect ([ ], .)), snd/1),
            [
              Tuple
                ((83, Effect ([ ], .)),
                  Constant
                    ((83,
                      Effect
                        ([
                        ],
                          .)),
                      Int(12)),
                  Constant
                    ((83,
                      Effect
                        ([
                        ],
                          .)),
                      Int(13)))
            ]))
    ])

86
Value
  (non_rec, @.,
    [
      ((ll, [ ], [ ], Type (list/1, Type (Z/1))),
        Apply
          ((86, Effect ([ ], .)),
            Variable ((86, Effect ([ ], .)), OCaml.Pervasives.app/1),
            [
              Constructor
                ((86, Effect ([ ], .)), cons/1,
                  Constant
                    ((86,
                      Effect
                        ([
                        ],
                          .)),
                      Int(1)),
                  Constructor
                    ((86,
                      Effect
                        ([
                        ],
                          .)),
                      cons/1,
                      Constant
                        ((86,
                          Effect
                            ([
                            ],
                              .)),
                          Int(2)),
                      Constructor
                        ((86,
                          Effect
                            ([
                            ],
                              .)),
                          []/1)));
              Constructor
                ((86, Effect ([ ], .)), cons/1,
                  Constant
                    ((86,
                      Effect
                        ([
                        ],
                          .)),
                      Int(3)),
                  Constructor
                    ((86,
                      Effect
                        ([
                        ],
                          .)),
                      cons/1,
                      Constant
                        ((86,
                          Effect
                            ([
                            ],
                              .)),
                          Int(4)),
                      Constructor
                        ((86,
                          Effect
                            ([
                            ],
                              .)),
                          []/1)))
            ]))
    ])

94
Value
  (non_rec, @.,
    [
      ((p_c, [ A ], [ (x, A) ], Type (unit/1)),
        Match
          ((?, Effect ([ IO/1 ], .)), Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((94,
                    Effect
                      ([
                        IO/1
                      ],
                        .)),
                    Variable
                      ((94,
                        Effect
                          ([
                          ],
                            .
                              -[
                                IO/1
                              ]->
                              .)),
                        OCaml.Pervasives.print_char/1),
                    [
                      Constant
                        ((94,
                          Effect
                            ([
                            ],
                              .)),
                          Char("c"))
                    ]))
            ]))
    ])

95
Value
  (non_rec, @.,
    [
      ((p_s, [ A ], [ (x, A) ], Type (unit/1)),
        Match
          ((?, Effect ([ IO/1 ], .)), Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((95,
                    Effect
                      ([
                        IO/1
                      ],
                        .)),
                    Variable
                      ((95,
                        Effect
                          ([
                          ],
                            .
                              -[
                                IO/1
                              ]->
                              .)),
                        OCaml.Pervasives.print_string/1),
                    [
                      Constant
                        ((95,
                          Effect
                            ([
                            ],
                              .)),
                          String("str"))
                    ]))
            ]))
    ])

96
Value
  (non_rec, @.,
    [
      ((p_n, [ A ], [ (x, A) ], Type (unit/1)),
        Match
          ((?, Effect ([ IO/1 ], .)), Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((96,
                    Effect
                      ([
                        IO/1
                      ],
                        .)),
                    Variable
                      ((96,
                        Effect
                          ([
                          ],
                            .
                              -[
                                IO/1
                              ]->
                              .)),
                        OCaml.Pervasives.print_int/1),
                    [
                      Constant
                        ((96,
                          Effect
                            ([
                            ],
                              .)),
                          Int(12))
                    ]))
            ]))
    ])

98
Value
  (non_rec, @.,
    [
      ((p_endline, [ A ], [ (x, A) ], Type (unit/1)),
        Match
          ((?, Effect ([ IO/1 ], .)), Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((98,
                    Effect
                      ([
                        IO/1
                      ],
                        .)),
                    Variable
                      ((98,
                        Effect
                          ([
                          ],
                            .
                              -[
                                IO/1
                              ]->
                              .)),
                        OCaml.Pervasives.print_endline/1),
                    [
                      Constant
                        ((98,
                          Effect
                            ([
                            ],
                              .)),
                          String("str"))
                    ]))
            ]))
    ])

99
Value
  (non_rec, @.,
    [
      ((p_newline, [ A ], [ (x, A) ], Type (unit/1)),
        Match
          ((?, Effect ([ IO/1 ], .)), Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((99,
                    Effect
                      ([
                        IO/1
                      ],
                        .)),
                    Variable
                      ((99,
                        Effect
                          ([
                          ],
                            .
                              -[
                                IO/1
                              ]->
                              .)),
                        OCaml.Pervasives.print_newline/1),
                    [
                      Constructor
                        ((99,
                          Effect
                            ([
                            ],
                              .)),
                          tt/1)
                    ]))
            ]))
    ])

102
Value
  (non_rec, @.,
    [
      ((perr_c, [ A ], [ (x, A) ], Type (unit/1)),
        Match
          ((?, Effect ([ IO/1 ], .)), Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((102,
                    Effect
                      ([
                        IO/1
                      ],
                        .)),
                    Variable
                      ((102,
                        Effect
                          ([
                          ],
                            .
                              -[
                                IO/1
                              ]->
                              .)),
                        OCaml.Pervasives.prerr_char/1),
                    [
                      Constant
                        ((102,
                          Effect
                            ([
                            ],
                              .)),
                          Char("c"))
                    ]))
            ]))
    ])

103
Value
  (non_rec, @.,
    [
      ((perr_s, [ A ], [ (x, A) ], Type (unit/1)),
        Match
          ((?, Effect ([ IO/1 ], .)), Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((103,
                    Effect
                      ([
                        IO/1
                      ],
                        .)),
                    Variable
                      ((103,
                        Effect
                          ([
                          ],
                            .
                              -[
                                IO/1
                              ]->
                              .)),
                        OCaml.Pervasives.prerr_string/1),
                    [
                      Constant
                        ((103,
                          Effect
                            ([
                            ],
                              .)),
                          String("str"))
                    ]))
            ]))
    ])

104
Value
  (non_rec, @.,
    [
      ((perr_n, [ A ], [ (x, A) ], Type (unit/1)),
        Match
          ((?, Effect ([ IO/1 ], .)), Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((104,
                    Effect
                      ([
                        IO/1
                      ],
                        .)),
                    Variable
                      ((104,
                        Effect
                          ([
                          ],
                            .
                              -[
                                IO/1
                              ]->
                              .)),
                        OCaml.Pervasives.prerr_int/1),
                    [
                      Constant
                        ((104,
                          Effect
                            ([
                            ],
                              .)),
                          Int(12))
                    ]))
            ]))
    ])

106
Value
  (non_rec, @.,
    [
      ((perr_endline, [ A ], [ (x, A) ], Type (unit/1)),
        Match
          ((?, Effect ([ IO/1 ], .)), Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((106,
                    Effect
                      ([
                        IO/1
                      ],
                        .)),
                    Variable
                      ((106,
                        Effect
                          ([
                          ],
                            .
                              -[
                                IO/1
                              ]->
                              .)),
                        OCaml.Pervasives.prerr_endline/1),
                    [
                      Constant
                        ((106,
                          Effect
                            ([
                            ],
                              .)),
                          String("str"))
                    ]))
            ]))
    ])

107
Value
  (non_rec, @.,
    [
      ((perr_newline, [ A ], [ (x, A) ], Type (unit/1)),
        Match
          ((?, Effect ([ IO/1 ], .)), Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((107,
                    Effect
                      ([
                        IO/1
                      ],
                        .)),
                    Variable
                      ((107,
                        Effect
                          ([
                          ],
                            .
                              -[
                                IO/1
                              ]->
                              .)),
                        OCaml.Pervasives.prerr_newline/1),
                    [
                      Constructor
                        ((107,
                          Effect
                            ([
                            ],
                              .)),
                          tt/1)
                    ]))
            ]))
    ])

110
Value
  (non_rec, @.,
    [
      ((r_s, [ A ], [ (x, A) ], Type (string/1)),
        Match
          ((?, Effect ([ IO/1 ], .)), Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((110,
                    Effect
                      ([
                        IO/1
                      ],
                        .)),
                    Variable
                      ((110,
                        Effect
                          ([
                          ],
                            .
                              -[
                                IO/1
                              ]->
                              .)),
                        OCaml.Pervasives.read_line/1),
                    [
                      Constructor
                        ((110,
                          Effect
                            ([
                            ],
                              .)),
                          tt/1)
                    ]))
            ]))
    ])

111
Value
  (non_rec, @.,
    [
      ((r_n, [ A ], [ (x, A) ], Type (Z/1)),
        Match
          ((?, Effect ([ IO/1 ], .)), Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((111,
                    Effect
                      ([
                        IO/1
                      ],
                        .)),
                    Variable
                      ((111,
                        Effect
                          ([
                          ],
                            .
                              -[
                                IO/1
                              ]->
                              .)),
                        OCaml.Pervasives.read_int/1),
                    [
                      Constructor
                        ((111,
                          Effect
                            ([
                            ],
                              .)),
                          tt/1)
                    ]))
            ]))
    ])
