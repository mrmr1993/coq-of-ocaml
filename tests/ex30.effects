3 Module M:
  4
  Value
    (non_rec, @.,
      [
        ((f, [ A; B ], [ (x, A) ],
          Monad ([ Type (OCaml/exception, Type (OCaml/failure)) ], B)),
          Match
            ((4,
              Effect
                ([ Type (OCaml/exception, Type (OCaml/failure)) ],
                  .)),
              Variable ((?, Effect ([ ], .)), Ex30.M/x),
              [
                (Any,
                  Apply
                    ((4,
                      Effect
                        ([
                          Type
                            (OCaml/exception,
                              Type
                                (OCaml/failure))
                        ],
                          .)),
                      Variable
                        ((4,
                          Effect
                            ([
                            ],
                              .
                                -[
                                  Type
                                    (OCaml/exception,
                                      Type
                                        (OCaml/failure))
                                ]->
                                .)),
                          OCaml/Pervasives.failwith),
                      [
                        Constant
                          ((4,
                            Effect
                              ([
                              ],
                                .)),
                            String("failure"))
                      ]))
              ]))
      ])

7 Module N:
  8
  Value
    (non_rec, @.,
      [
        ((f, [ A; B ], [ (x, A) ],
          Monad ([ Type (OCaml/exception, Type (OCaml/assert_failure)) ], B)),
          Match
            ((8,
              Effect
                ([
                  Type
                    (OCaml/exception,
                      Type
                        (OCaml/assert_failure))
                ], .)),
              Variable ((?, Effect ([ ], .)), Ex30.N/x),
              [
                (Any,
                  Apply
                    ((8,
                      Effect
                        ([
                          Type
                            (OCaml/exception,
                              Type
                                (OCaml/assert_failure))
                        ],
                          .)),
                      Variable
                        ((8,
                          Effect
                            ([
                            ],
                              .
                                -[
                                  Type
                                    (OCaml/exception,
                                      Type
                                        (OCaml/assert_failure))
                                ]->
                                .)),
                          OCaml/assert),
                      [
                        Constructor
                          ((8,
                            Effect
                              ([
                              ],
                                .)),
                            false)
                      ]))
              ]))
      ])
  
  9
  Value
    (non_rec, @.,
      [
        ((x, [ ], [ ], Type (unit)),
          Match
            ((9, Effect ([ ], .)),
              Run
                ((?, Effect ([ ], .)),
                  Type
                    (OCaml/exception,
                      Type (OCaml/assert_failure)),
                  [ ],
                  Apply
                    ((9,
                      Effect
                        ([
                          Type
                            (OCaml/exception,
                              Type
                                (OCaml/assert_failure))
                        ], .)),
                      Variable
                        ((9,
                          Effect
                            ([ ],
                              .
                                -[
                                  Type
                                    (OCaml/exception,
                                      Type
                                        (OCaml/assert_failure))
                                ]->
                                .)),
                          Ex30.N/f),
                      [
                        Constructor
                          ((9,
                            Effect
                              ([
                              ],
                                .)),
                            tt)
                      ])),
              [
                (Constructor (inl, x),
                  Variable
                    ((?,
                      Effect
                        ([
                        ],
                          .)),
                      Ex30.N/x));
                (Constructor
                  (inr,
                    Constructor
                      (OCaml/Assert_failure,
                        Tuple
                          (Any))),
                  Constructor
                    ((9,
                      Effect
                        ([
                        ],
                          .)),
                      tt))
              ]))
      ])
  
  10 Open Ex30/M
  
  11
  Value
    (non_rec, @.,
      [
        ((y, [ ], [ ], Type (unit)),
          Match
            ((11, Effect ([ ], .)),
              Run
                ((?, Effect ([ ], .)),
                  Type
                    (OCaml/exception,
                      Type (OCaml/failure)), [ ],
                  Apply
                    ((11,
                      Effect
                        ([
                          Type
                            (OCaml/exception,
                              Type
                                (OCaml/failure))
                        ], .)),
                      Variable
                        ((11,
                          Effect
                            ([ ],
                              .
                                -[
                                  Type
                                    (OCaml/exception,
                                      Type
                                        (OCaml/failure))
                                ]->
                                .)),
                          Ex30/M.f),
                      [
                        Constructor
                          ((11,
                            Effect
                              ([
                              ],
                                .)),
                            tt)
                      ])),
              [
                (Constructor (inl, x (= x_1)),
                  Variable
                    ((?,
                      Effect
                        ([
                        ],
                          .)),
                      Ex30.N/x_1));
                (Constructor
                  (inr,
                    Constructor
                      (OCaml/Failure,
                        Tuple
                          (Any))),
                  Constructor
                    ((11,
                      Effect
                        ([
                        ],
                          .)),
                      tt))
              ]))
      ])

14
Value
  (non_rec, @.,
    [
      ((b, [ ], [ ], Type (unit)),
        Match
          ((14, Effect ([ ], .)),
            Run
              ((?, Effect ([ ], .)),
                Type (OCaml/exception, Type (OCaml/assert_failure)),
                [ ],
                Apply
                  ((14,
                    Effect
                      ([
                        Type
                          (OCaml/exception,
                            Type
                              (OCaml/assert_failure))
                      ], .)),
                    Variable
                      ((14,
                        Effect
                          ([ ],
                            .
                              -[
                                Type
                                  (OCaml/exception,
                                    Type
                                      (OCaml/assert_failure))
                              ]-> .)), Ex30/N.f),
                    [ Constructor ((14, Effect ([ ], .)), tt) ])),
            [
              (Constructor (inl, x),
                Variable ((?, Effect ([ ], .)), Ex30/x));
              (Constructor
                (inr,
                  Constructor
                    (OCaml/Assert_failure,
                      Tuple
                        (Any))),
                Constructor ((14, Effect ([ ], .)), tt))
            ]))
    ])

15 Open Ex30/N

16
Value
  (non_rec, @.,
    [
      ((b', [ ], [ ], Type (unit)),
        Match
          ((16, Effect ([ ], .)),
            Run
              ((?, Effect ([ ], .)),
                Type (OCaml/exception, Type (OCaml/assert_failure)),
                [ ],
                Apply
                  ((16,
                    Effect
                      ([
                        Type
                          (OCaml/exception,
                            Type
                              (OCaml/assert_failure))
                      ], .)),
                    Variable
                      ((16,
                        Effect
                          ([ ],
                            .
                              -[
                                Type
                                  (OCaml/exception,
                                    Type
                                      (OCaml/assert_failure))
                              ]-> .)), Ex30/N.f),
                    [ Constructor ((16, Effect ([ ], .)), tt) ])),
            [
              (Constructor (inl, x),
                Variable ((?, Effect ([ ], .)), Ex30/x));
              (Constructor
                (inr,
                  Constructor
                    (OCaml/Assert_failure,
                      Tuple
                        (Any))),
                Constructor ((16, Effect ([ ], .)), tt))
            ]))
    ])

18
Value
  (non_rec, @.,
    [ ((x, [ ], [ ], Type (Z)), Constant ((18, Effect ([ ], .)), Int(15))) ])

20 Module A:
  21
  Value
    (non_rec, @.,
      [
        ((x, [ A; B ], [ (x, A) ],
          Monad ([ Type (OCaml/exception, Type (OCaml/assert_failure)) ], B)),
          Match
            ((21,
              Effect
                ([
                  Type
                    (OCaml/exception,
                      Type
                        (OCaml/assert_failure))
                ], .)),
              Variable ((?, Effect ([ ], .)), Ex30.A/x),
              [
                (Any,
                  Apply
                    ((21,
                      Effect
                        ([
                          Type
                            (OCaml/exception,
                              Type
                                (OCaml/assert_failure))
                        ],
                          .)),
                      Variable
                        ((21,
                          Effect
                            ([
                            ],
                              .
                                -[
                                  Type
                                    (OCaml/exception,
                                      Type
                                        (OCaml/assert_failure))
                                ]->
                                .)),
                          OCaml/assert),
                      [
                        Constructor
                          ((21,
                            Effect
                              ([
                              ],
                                .)),
                            false)
                      ]))
              ]))
      ])

24 Module B:
  25
  Value
    (non_rec, @.,
      [ ((a, [ ], [ ], Type (Z)), Variable ((25, Effect ([ ], .)), Ex30/x)) ])
  
  26 Open Ex30/A
  
  27
  Value
    (non_rec, @.,
      [
        ((b, [ A; B ], [ ],
          (A ->
            Monad
              ([
                Type
                  (OCaml/exception,
                    Type
                      (OCaml/assert_failure))
              ], B))),
          Variable
            ((27,
              Effect
                ([ ],
                  .
                    -[
                      Type
                        (OCaml/exception,
                          Type
                            (OCaml/assert_failure))
                    ]-> .)), Ex30.A/x))
      ])
  
  28
  Value
    (non_rec, @.,
      [
        ((x, [ A; B ], [ (x, A) ],
          Monad ([ Type (OCaml/exception, Type (OCaml/failure)) ], B)),
          Match
            ((28,
              Effect
                ([ Type (OCaml/exception, Type (OCaml/failure)) ],
                  .)),
              Variable ((?, Effect ([ ], .)), Ex30.B/x),
              [
                (Any,
                  Apply
                    ((28,
                      Effect
                        ([
                          Type
                            (OCaml/exception,
                              Type
                                (OCaml/failure))
                        ],
                          .)),
                      Variable
                        ((28,
                          Effect
                            ([
                            ],
                              .
                                -[
                                  Type
                                    (OCaml/exception,
                                      Type
                                        (OCaml/failure))
                                ]->
                                .)),
                          OCaml/Pervasives.failwith),
                      [
                        Constant
                          ((28,
                            Effect
                              ([
                              ],
                                .)),
                            String("failure"))
                      ]))
              ]))
      ])
  
  29
  Value
    (non_rec, @.,
      [
        ((c, [ A; B ], [ ],
          (A -> Monad ([ Type (OCaml/exception, Type (OCaml/failure)) ], B))),
          Variable
            ((29,
              Effect
                ([ ],
                  .
                    -[
                      Type
                        (OCaml/exception,
                          Type
                            (OCaml/failure))
                    ]-> .)), Ex30.B/x))
      ])

32 Module C:
  33
  Value
    (non_rec, @.,
      [ ((a, [ ], [ ], Type (Z)), Variable ((33, Effect ([ ], .)), Ex30/x)) ])
  
  34
  Value
    (non_rec, @.,
      [
        ((x, [ A; B ], [ (x, A) ],
          Monad ([ Type (OCaml/exception, Type (OCaml/failure)) ], B)),
          Match
            ((34,
              Effect
                ([ Type (OCaml/exception, Type (OCaml/failure)) ],
                  .)),
              Variable ((?, Effect ([ ], .)), Ex30.C/x),
              [
                (Any,
                  Apply
                    ((34,
                      Effect
                        ([
                          Type
                            (OCaml/exception,
                              Type
                                (OCaml/failure))
                        ],
                          .)),
                      Variable
                        ((34,
                          Effect
                            ([
                            ],
                              .
                                -[
                                  Type
                                    (OCaml/exception,
                                      Type
                                        (OCaml/failure))
                                ]->
                                .)),
                          OCaml/Pervasives.failwith),
                      [
                        Constant
                          ((34,
                            Effect
                              ([
                              ],
                                .)),
                            String("failure"))
                      ]))
              ]))
      ])
  
  35
  Value
    (non_rec, @.,
      [
        ((b, [ A; B ], [ ],
          (A -> Monad ([ Type (OCaml/exception, Type (OCaml/failure)) ], B))),
          Variable
            ((35,
              Effect
                ([ ],
                  .
                    -[
                      Type
                        (OCaml/exception,
                          Type
                            (OCaml/failure))
                    ]-> .)), Ex30.C/x))
      ])
  
  36 Open Ex30/A
  
  37
  Value
    (non_rec, @.,
      [
        ((c, [ A; B ], [ ],
          (A ->
            Monad
              ([
                Type
                  (OCaml/exception,
                    Type
                      (OCaml/assert_failure))
              ], B))),
          Variable
            ((37,
              Effect
                ([ ],
                  .
                    -[
                      Type
                        (OCaml/exception,
                          Type
                            (OCaml/assert_failure))
                    ]-> .)), Ex30/A.x))
      ])

40 Module D:
  41 Module A:
    42
    Value
      (non_rec, @.,
        [ ((a, [ ], [ ], Type (Z)), Constant ((42, Effect ([ ], .)), Int(2))) ])
  
  44
  Value
    (non_rec, @.,
      [ ((b, [ ], [ ], Type (Z)), Variable ((44, Effect ([ ], .)), Ex30/x)) ])
  
  45 Open Ex30.D/A
  
  46
  Value
    (non_rec, @.,
      [ ((c, [ ], [ ], Type (Z)), Variable ((46, Effect ([ ], .)), Ex30.D/A.a)) ])
  
  47
  Value
    (non_rec, @.,
      [ ((d, [ ], [ ], Type (Z)), Variable ((47, Effect ([ ], .)), Ex30/x)) ])
