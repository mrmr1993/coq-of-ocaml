Require [ OCaml.List ]

2
Value
  (non_rec, @.,
    [
      ((slow_div, [ ], [ (a, Type (Z)); (b, Type (Z)) ], Type (Z)),
        LetVar 3 y =
          Apply
            (3, Variable (3, OCaml/Pervasives.ref),
              [ Constant (3, Int(0)) ]) in
        LetVar 4 c =
          Apply
            (4, Variable (4, OCaml/Pervasives.ref),
              [ Constant (4, Int(0)) ]) in
        Sequence
          (5,
            While
              (5,
                Apply
                  (5, Variable (5, OCaml/Pervasives.le),
                    [
                      Apply
                        (5,
                          Variable
                            (5,
                              Z.add),
                          [
                            Apply
                              (5,
                                Variable
                                  (5,
                                    OCaml/Effect.State.read),
                                [
                                  Variable
                                    (5,
                                      Ex43/y)
                                ]);
                            Variable
                              (5,
                                Ex43/b)
                          ]);
                      Variable (5, Ex43/a)
                    ]),
                Sequence
                  (6,
                    Apply
                      (6,
                        Variable (6, OCaml/Effect.State.write),
                        [
                          Variable (6, Ex43/y);
                          Apply
                            (6,
                              Variable
                                (6,
                                  Z.add),
                              [
                                Apply
                                  (6,
                                    Variable
                                      (6,
                                        OCaml/Effect.State.read),
                                    [
                                      Variable
                                        (6,
                                          Ex43/y)
                                    ]);
                                Variable
                                  (6,
                                    Ex43/b)
                              ])
                        ]),
                    Apply
                      (7,
                        Variable (7, OCaml/Effect.State.write),
                        [
                          Variable (7, Ex43/c);
                          Apply
                            (7,
                              Variable
                                (7,
                                  Z.add),
                              [
                                Apply
                                  (7,
                                    Variable
                                      (7,
                                        OCaml/Effect.State.read),
                                    [
                                      Variable
                                        (7,
                                          Ex43/c)
                                    ]);
                                Constant
                                  (7,
                                    Int(1))
                              ])
                        ]))),
            Apply
              (9, Variable (9, OCaml/Effect.State.read),
                [ Variable (9, Ex43/c) ])))
    ])

11
Value
  (non_rec, @.,
    [
      ((nested, [ ], [ (x, Type (unit)) ], Type (list, Type (Z))),
        Match
          (11, Variable (?, Ex43/x),
            [
              (Constructor (tt),
                LetVar 12 a =
                  Apply
                    (12,
                      Variable
                        (12,
                          OCaml/Pervasives.ref),
                      [
                        Constructor
                          (12,
                            cons,
                            Apply
                              (12,
                                Variable
                                  (12,
                                    OCaml/Pervasives.ref),
                                [
                                  Constructor
                                    (12,
                                      cons,
                                      Constant
                                        (12,
                                          Int(1)),
                                      Constructor
                                        (12,
                                          cons,
                                          Constant
                                            (12,
                                              Int(2)),
                                          Constructor
                                            (12,
                                              [])))
                                ]),
                            Constructor
                              (12,
                                cons,
                                Apply
                                  (12,
                                    Variable
                                      (12,
                                        OCaml/Pervasives.ref),
                                    [
                                      Constructor
                                        (12,
                                          cons,
                                          Constant
                                            (12,
                                              Int(3)),
                                          Constructor
                                            (12,
                                              cons,
                                              Constant
                                                (12,
                                                  Int(4)),
                                              Constructor
                                                (12,
                                                  cons,
                                                  Constant
                                                    (12,
                                                      Int(5)),
                                                  Constructor
                                                    (12,
                                                      []))))
                                    ]),
                                Constructor
                                  (12,
                                    cons,
                                    Apply
                                      (12,
                                        Variable
                                          (12,
                                            OCaml/Pervasives.ref),
                                        [
                                          Constructor
                                            (12,
                                              cons,
                                              Constant
                                                (12,
                                                  Int(6)),
                                              Constructor
                                                (12,
                                                  cons,
                                                  Constant
                                                    (12,
                                                      Int(7)),
                                                  Constructor
                                                    (12,
                                                      [])))
                                        ]),
                                    Constructor
                                      (12,
                                        []))))
                      ])
                  in
                LetVar 13 b =
                  Apply
                    (13,
                      Variable
                        (13,
                          OCaml/Pervasives.ref),
                      [
                        Constructor
                          (13,
                            [])
                      ])
                  in
                Sequence
                  (14,
                    While
                      (14,
                        Apply
                          (14,
                            Variable
                              (14,
                                OCaml/Pervasives.gt),
                            [
                              Apply
                                (14,
                                  Variable
                                    (14,
                                      List.length),
                                  [
                                    Apply
                                      (14,
                                        Variable
                                          (14,
                                            OCaml/Effect.State.read),
                                        [
                                          Variable
                                            (14,
                                              Ex43/a)
                                        ])
                                  ]);
                              Constant
                                (14,
                                  Int(0))
                            ]),
                        Match
                          (15,
                            Apply
                              (15,
                                Variable
                                  (15,
                                    OCaml/Effect.State.read),
                                [
                                  Variable
                                    (15,
                                      Ex43/a)
                                ]),
                            [
                              (Constructor
                                ([]),
                                Constructor
                                  (16,
                                    tt));
                              (Constructor
                                (cons,
                                  x,
                                  a'),
                                Sequence
                                  (18,
                                    While
                                      (18,
                                        Apply
                                          (18,
                                            Variable
                                              (18,
                                                OCaml/Pervasives.gt),
                                            [
                                              Apply
                                                (18,
                                                  Variable
                                                    (18,
                                                      List.length),
                                                  [
                                                    Apply
                                                      (18,
                                                        Variable
                                                          (18,
                                                            OCaml/Effect.State.read),
                                                        [
                                                          Variable
                                                            (18,
                                                              Ex43/x)
                                                        ])
                                                  ]);
                                              Constant
                                                (18,
                                                  Int(0))
                                            ]),
                                        Match
                                          (19,
                                            Apply
                                              (19,
                                                Variable
                                                  (19,
                                                    OCaml/Effect.State.read),
                                                [
                                                  Variable
                                                    (19,
                                                      Ex43/x)
                                                ]),
                                            [
                                              (Constructor
                                                ([]),
                                                Constructor
                                                  (20,
                                                    tt));
                                              (Constructor
                                                (cons,
                                                  y,
                                                  x'),
                                                Sequence
                                                  (22,
                                                    Apply
                                                      (22,
                                                        Variable
                                                          (22,
                                                            OCaml/Effect.State.write),
                                                        [
                                                          Variable
                                                            (22,
                                                              Ex43/b);
                                                          Constructor
                                                            (22,
                                                              cons,
                                                              Variable
                                                                (22,
                                                                  Ex43/y),
                                                              Apply
                                                                (22,
                                                                  Variable
                                                                    (22,
                                                                      OCaml/Effect.State.read),
                                                                  [
                                                                    Variable
                                                                      (22,
                                                                        Ex43/b)
                                                                  ]))
                                                        ]),
                                                    Apply
                                                      (23,
                                                        Variable
                                                          (23,
                                                            OCaml/Effect.State.write),
                                                        [
                                                          Variable
                                                            (23,
                                                              Ex43/x);
                                                          Variable
                                                            (23,
                                                              Ex43/x')
                                                        ])))
                                            ])),
                                    Apply
                                      (25,
                                        Variable
                                          (25,
                                            OCaml/Effect.State.write),
                                        [
                                          Variable
                                            (25,
                                              Ex43/a);
                                          Variable
                                            (25,
                                              Ex43/a')
                                        ])))
                            ])),
                    Apply
                      (27,
                        Variable
                          (27,
                            OCaml/Effect.State.read),
                        [
                          Variable
                            (27,
                              Ex43/b)
                        ])))
            ]))
    ])

29
Value
  (non_rec, @.,
    [
      ((raises, [ ], [ (b, Type (bool)) ], Type (unit)),
        While
          (30, Variable (30, Ex43/b),
            Apply
              (31, Variable (31, OCaml/Pervasives.failwith),
                [ Constant (31, String("b is true")) ])))
    ])

34
Value
  (non_rec, @.,
    [
      ((complex_raises, [ ], [ (b, Type (bool)) ], Type (unit)),
        LetFun 35
          (non_rec, @.,
            [
              ((f, [ A; B ], [ (a, A) ], (A * Type (Z) * B)),
                Tuple
                  (35,
                    Variable
                      (35,
                        Ex43/a),
                    Constant
                      (35,
                        Int(15)),
                    Apply
                      (35,
                        Variable
                          (35,
                            OCaml/Pervasives.failwith),
                        [
                          Constant
                            (35,
                              String("b is true"))
                        ])))
            ]) in
        While
          (36, Variable (36, Ex43/b),
            Apply (37, Variable (37, Ex43/f), [ Constructor (37, true) ])))
    ])

40
Value
  (non_rec, @.,
    [
      ((argument_effects, [ ],
        [ (x, Type (OCaml/Effect.State.t, Type (Z))); (y, Type (Z)) ],
        Type (Z)),
        LetVar 41 y =
          Apply
            (41, Variable (41, OCaml/Pervasives.ref),
              [ Variable (41, Ex43/y) ]) in
        LetVar 42 z =
          Apply
            (42, Variable (42, OCaml/Pervasives.ref),
              [ Constant (42, Int(0)) ]) in
        LetVar 43 i =
          Apply
            (43, Variable (43, OCaml/Pervasives.ref),
              [ Constant (43, Int(0)) ]) in
        Sequence
          (44,
            While
              (44,
                Apply
                  (44, Variable (44, OCaml/Pervasives.le),
                    [
                      Apply
                        (44,
                          Variable
                            (44,
                              OCaml/Effect.State.read),
                          [
                            Variable
                              (44,
                                Ex43/i)
                          ]);
                      Apply
                        (44,
                          Variable
                            (44,
                              OCaml/Effect.State.read),
                          [
                            Variable
                              (44,
                                Ex43/x)
                          ])
                    ]),
                LetVar 45 j =
                  Apply
                    (45, Variable (45, OCaml/Pervasives.ref),
                      [ Constant (45, Int(0)) ]) in
                Sequence
                  (46,
                    While
                      (46,
                        Apply
                          (46,
                            Variable
                              (46, OCaml/Pervasives.le),
                            [
                              Apply
                                (46,
                                  Variable
                                    (46,
                                      OCaml/Effect.State.read),
                                  [
                                    Variable
                                      (46,
                                        Ex43/j)
                                  ]);
                              Apply
                                (46,
                                  Variable
                                    (46,
                                      OCaml/Effect.State.read),
                                  [
                                    Variable
                                      (46,
                                        Ex43/y)
                                  ])
                            ]),
                        Sequence
                          (47,
                            Apply
                              (47,
                                Variable
                                  (47,
                                    OCaml/Effect.State.write),
                                [
                                  Variable
                                    (47,
                                      Ex43/z);
                                  Apply
                                    (47,
                                      Variable
                                        (47,
                                          Z.add),
                                      [
                                        Apply
                                          (47,
                                            Variable
                                              (47,
                                                OCaml/Effect.State.read),
                                            [
                                              Variable
                                                (47,
                                                  Ex43/z)
                                            ]);
                                        Constant
                                          (47,
                                            Int(1))
                                      ])
                                ]),
                            Apply
                              (48,
                                Variable
                                  (48,
                                    OCaml/Effect.State.write),
                                [
                                  Variable
                                    (48,
                                      Ex43/j);
                                  Apply
                                    (48,
                                      Variable
                                        (48,
                                          Z.add),
                                      [
                                        Apply
                                          (48,
                                            Variable
                                              (48,
                                                OCaml/Effect.State.read),
                                            [
                                              Variable
                                                (48,
                                                  Ex43/j)
                                            ]);
                                        Constant
                                          (48,
                                            Int(1))
                                      ])
                                ]))),
                    Sequence
                      (50,
                        Apply
                          (50,
                            Variable
                              (50,
                                OCaml/Effect.State.write),
                            [
                              Variable (50, Ex43/y);
                              Apply
                                (50,
                                  Variable
                                    (50,
                                      Z.sub),
                                  [
                                    Apply
                                      (50,
                                        Variable
                                          (50,
                                            OCaml/Effect.State.read),
                                        [
                                          Variable
                                            (50,
                                              Ex43/y)
                                        ]);
                                    Constant
                                      (50,
                                        Int(1))
                                  ])
                            ]),
                        Apply
                          (51,
                            Variable
                              (51,
                                OCaml/Effect.State.write),
                            [
                              Variable (51, Ex43/i);
                              Apply
                                (51,
                                  Variable
                                    (51,
                                      Z.add),
                                  [
                                    Apply
                                      (51,
                                        Variable
                                          (51,
                                            OCaml/Effect.State.read),
                                        [
                                          Variable
                                            (51,
                                              Ex43/i)
                                        ]);
                                    Constant
                                      (51,
                                        Int(1))
                                  ])
                            ])))),
            Apply
              (53, Variable (53, OCaml/Effect.State.read),
                [ Variable (53, Ex43/z) ])))
    ])
