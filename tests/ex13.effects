3
Value
  (non_rec, @.,
    [
      ((tail, [ A ], [ (l, Type (list, A)) ],
        Monad
          ([ Type (OCaml.exception, Type (OCaml.Failure)) ], Type (list, A))),
        Match
          ((4, Effect ([ Type (OCaml.exception, Type (OCaml.Failure)) ], .)),
            Variable ((4, Effect ([ ], .)), l),
            [
              (Constructor (cons, Any, xs),
                Variable ((5, Effect ([ ], .)), xs));
              (Constructor ([]),
                Apply
                  ((6,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.Failure))
                      ],
                        .)),
                    Variable
                      ((6,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.Failure))
                              ]->
                              .)),
                        OCaml.Pervasives.failwith),
                    [
                      Constant
                        ((6,
                          Effect
                            ([
                            ],
                              .)),
                          String("Cannot take the tail of an empty list."))
                    ]))
            ]))
    ])

8
Value
  (rec, @.,
    [
      ((print_list_rec, [ ],
        [ (counter, Type (nat)); (x, Type (list, Type (string))) ],
        Monad ([ Type (IO); Type (NonTermination) ], Type (unit))),
        Match
          ((?, Effect ([ Type (IO); Type (NonTermination) ], .)),
            Variable ((?, Effect ([ ], .)), counter),
            [
              (Constructor (O),
                Apply
                  ((?,
                    Effect
                      ([
                        Type
                          (NonTermination)
                      ],
                        .)),
                    Variable
                      ((?,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (NonTermination)
                              ]->
                              .)),
                        not_terminated),
                    [
                      Tuple
                        ((?,
                          Effect
                            ([
                            ],
                              .)))
                    ]));
              (Constructor (S, counter),
                Match
                  ((9,
                    Effect
                      ([
                        Type
                          (IO);
                        Type
                          (NonTermination)
                      ],
                        .)),
                    Variable
                      ((?,
                        Effect
                          ([
                          ],
                            .)),
                        x),
                    [
                      (Constructor
                        ([]),
                        Constructor
                          ((9,
                            Effect
                              ([
                              ],
                                .)),
                            tt));
                      (Constructor
                        (cons,
                          x,
                          xs),
                        Sequence
                          ((11,
                            Effect
                              ([
                                Type
                                  (IO);
                                Type
                                  (NonTermination)
                              ],
                                .)),
                            Apply
                              ((11,
                                Effect
                                  ([
                                    Type
                                      (IO)
                                  ],
                                    .)),
                                Variable
                                  ((11,
                                    Effect
                                      ([
                                      ],
                                        .
                                          -[
                                            Type
                                              (IO)
                                          ]->
                                          .)),
                                    OCaml.Pervasives.print_string),
                                [
                                  Variable
                                    ((11,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      x)
                                ]),
                            Apply
                              ((12,
                                Effect
                                  ([
                                    Type
                                      (IO);
                                    Type
                                      (NonTermination)
                                  ],
                                    .)),
                                Apply
                                  ((?,
                                    Effect
                                      ([
                                      ],
                                        .
                                          -[
                                            Type
                                              (IO);
                                            Type
                                              (NonTermination)
                                          ]->
                                          .)),
                                    Variable
                                      ((?,
                                        Effect
                                          ([
                                          ],
                                            .
                                              ->
                                              .
                                                -[
                                                  Type
                                                    (IO);
                                                  Type
                                                    (NonTermination)
                                                ]->
                                                .)),
                                        print_list_rec),
                                    [
                                      Variable
                                        ((?,
                                          Effect
                                            ([
                                            ],
                                              .)),
                                          counter)
                                    ]),
                                [
                                  Variable
                                    ((12,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      xs)
                                ])))
                    ]))
            ]))
    ])

8
Value
  (non_rec, @.,
    [
      ((print_list, [ ], [ (x, Type (list, Type (string))) ],
        Monad
          ([ Type (Counter); Type (IO); Type (NonTermination) ], Type (unit))),
        Apply
          ((?,
            Effect
              ([ Type (Counter); Type (IO); Type (NonTermination) ], .)),
            Variable
              ((?,
                Effect
                  ([ ],
                    . ->
                      . -[ Type (IO); Type (NonTermination) ]->
                        .)), print_list_rec),
            [
              Apply
                ((?, Effect ([ Type (Counter) ], .)),
                  Variable
                    ((?,
                      Effect
                        ([
                        ],
                          .
                            -[
                              Type
                                (Counter)
                            ]->
                            .)),
                      read_counter),
                  [
                    Tuple
                      ((?,
                        Effect
                          ([
                          ],
                            .)))
                  ]);
              Variable ((?, Effect ([ ], .)), x)
            ]))
    ])

14
Value
  (non_rec, @.,
    [
      ((f, [ ], [ ],
        (Type (list, Type (string)) ->
          Monad
            ([ Type (Counter); Type (IO); Type (NonTermination) ],
              Type (unit)))),
        Variable
          ((14,
            Effect
              ([ ],
                .
                  -[
                    Type (Counter);
                    Type (IO);
                    Type (NonTermination)
                  ]-> .)), print_list))
    ])

16
Value
  (non_rec, @.,
    [
      ((x, [ A ], [ (z, A) ],
        Monad
          ([
            Type (Counter);
            Type (IO);
            Type (NonTermination);
            Type (OCaml.exception, Type (OCaml.Failure))
          ], Type (unit))),
        Apply
          ((16,
            Effect
              ([
                Type (Counter);
                Type (IO);
                Type (NonTermination);
                Type (OCaml.exception, Type (OCaml.Failure))
              ], .)),
            Variable
              ((16,
                Effect
                  ([ ],
                    .
                      -[
                        Type (Counter);
                        Type (IO);
                        Type (NonTermination)
                      ]-> .)), f),
            [
              Apply
                ((16,
                  Effect
                    ([
                      Type
                        (OCaml.exception,
                          Type
                            (OCaml.Failure))
                    ], .)),
                  Variable
                    ((16,
                      Effect
                        ([
                        ],
                          .
                            -[
                              Type
                                (OCaml.exception,
                                  Type
                                    (OCaml.Failure))
                            ]->
                            .)),
                      tail),
                  [
                    Constructor
                      ((16,
                        Effect
                          ([
                          ],
                            .)),
                        cons,
                        Constant
                          ((16,
                            Effect
                              ([
                              ],
                                .)),
                            String("Stop")),
                        Constructor
                          ((16,
                            Effect
                              ([
                              ],
                                .)),
                            cons,
                            Constant
                              ((16,
                                Effect
                                  ([
                                  ],
                                    .)),
                                String("Hello")),
                            Constructor
                              ((16,
                                Effect
                                  ([
                                  ],
                                    .)),
                                cons,
                                Constant
                                  ((16,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    String(" ")),
                                Constructor
                                  ((16,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    cons,
                                    Constant
                                      ((16,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        String("world")),
                                    Constructor
                                      ((16,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        [])))))
                  ])
            ]))
    ])
