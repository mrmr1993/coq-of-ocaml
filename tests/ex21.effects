3
Value
  (non_rec, @.,
    [
      ((f, [ A; B; C ], [ (x, A) ], (B -> C)),
        Sequence
          ((4, Effect ([ IO/1 ], . -[ OCaml.Failure/1 ]-> .)),
            Apply
              ((4, Effect ([ IO/1 ], .)),
                Variable
                  ((4, Effect ([ ], . -[ IO/1 ]-> .)),
                    OCaml.Pervasives.print_string/1),
                [ Constant ((4, Effect ([ ], .)), String("Hi")) ]),
            Function
              ((5, Effect ([ ], . -[ OCaml.Failure/1 ]-> .)), y,
                Apply
                  ((5, Effect ([ OCaml.Failure/1 ], .)),
                    Variable
                      ((5,
                        Effect
                          ([ ], . -[ OCaml.Failure/1 ]-> .)),
                        OCaml.Pervasives.failwith/1),
                    [
                      Constant
                        ((5,
                          Effect
                            ([
                            ],
                              .)),
                          String("Bye"))
                    ]))))
    ])

7
Value
  (non_rec, @.,
    [
      ((r, [ A; B ], [ (x, A) ], B),
        Match
          ((?, Effect ([ IO/1; OCaml.Failure/1 ], .)),
            Variable ((?, Effect ([ ], .)), x/0),
            [
              (Any,
                Apply
                  ((7,
                    Effect
                      ([
                        IO/1;
                        OCaml.Failure/1
                      ],
                        .)),
                    Apply
                      ((7,
                        Effect
                          ([
                            IO/1
                          ],
                            .
                              -[
                                OCaml.Failure/1
                              ]->
                              .)),
                        Variable
                          ((7,
                            Effect
                              ([
                              ],
                                .
                                  -[
                                    IO/1
                                  ]->
                                  .
                                    -[
                                      OCaml.Failure/1
                                    ]->
                                    .)),
                            f/0),
                        [
                          Constant
                            ((7,
                              Effect
                                ([
                                ],
                                  .)),
                              Int(1))
                        ]),
                    [
                      Constant
                        ((7,
                          Effect
                            ([
                            ],
                              .)),
                          Int(2))
                    ]))
            ]))
    ])
