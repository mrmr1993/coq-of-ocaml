3 Module A:
  4
  Value
    (non_rec, @.,
      [ ((a, [ ], [ ], Type (Z/2)), Constant ((4, Effect ([ ], .)), Int(5))) ])
  
  6
  Value
    (non_rec, @.,
      [
        ((c, [ A ], [ (x, Type (string/2)) ], A),
          Apply
            ((6, Effect ([ OCaml.Failure/2 ], .)),
              Variable
                ((6, Effect ([ ], . -[ OCaml.Failure/2 ]-> .)),
                  OCaml.Pervasives.failwith/2),
              [ Variable ((6, Effect ([ ], .)), x/0) ]))
      ])

9 Include A

11
Value
  (non_rec, @.,
    [
      ((b, [ ], [ ], Type (Z/1)),
        Apply
          ((11, Effect ([ ], .)), Variable ((11, Effect ([ ], .)), Z.add/1),
            [
              Variable ((11, Effect ([ ], .)), a/0);
              Constant ((11, Effect ([ ], .)), Int(2))
            ]))
    ])

13
Value
  (non_rec, @.,
    [
      ((d, [ A ], [ (b, Type (bool/1)) ], A),
        IfThenElse
          ((13, Effect ([ OCaml.Failure/2 ], .)),
            Variable ((13, Effect ([ ], .)), b/0),
            Apply
              ((13, Effect ([ OCaml.Failure/2 ], .)),
                Variable
                  ((13, Effect ([ ], . -[ OCaml.Failure/2 ]-> .)),
                    c/0),
                [ Constant ((13, Effect ([ ], .)), String("true")) ]),
            Apply
              ((13, Effect ([ OCaml.Failure/2 ], .)),
                Variable
                  ((13, Effect ([ ], . -[ OCaml.Failure/2 ]-> .)),
                    c/0),
                [ Constant ((13, Effect ([ ], .)), String("false")) ])))
    ])
