3 Module A:
  4
  Value
    (non_rec, @.,
      [ ((a, [ ], [ ], Type (Z)), Constant ((4, Effect ([ ], .)), Int(5))) ])
  
  6
  Value
    (non_rec, @.,
      [
        ((c, [ A ], [ (x, Type (string)) ], Monad ([ Type (OCaml.Failure) ], A)),
          Apply
            ((6, Effect ([ Type (OCaml.Failure) ], .)),
              Variable
                ((6,
                  Effect
                    ([ ],
                      . -[ Type (OCaml.Failure) ]->
                        .)),
                  OCaml.Pervasives.failwith),
              [ Variable ((6, Effect ([ ], .)), A/x) ]))
      ])

9 Include A

11
Value
  (non_rec, @.,
    [
      ((b, [ ], [ ], Type (Z)),
        Apply
          ((11, Effect ([ ], .)),
            Variable ((11, Effect ([ ], . -> . -> .)), Z.add),
            [
              Variable ((11, Effect ([ ], .)), a);
              Constant ((11, Effect ([ ], .)), Int(2))
            ]))
    ])

13
Value
  (non_rec, @.,
    [
      ((d, [ A ], [ (b, Type (bool)) ], Monad ([ Type (OCaml.Failure) ], A)),
        IfThenElse
          ((13, Effect ([ Type (OCaml.Failure) ], .)),
            Variable ((13, Effect ([ ], .)), b),
            Apply
              ((13, Effect ([ Type (OCaml.Failure) ], .)),
                Variable
                  ((13,
                    Effect ([ ], . -[ Type (OCaml.Failure) ]-> .)),
                    c),
                [ Constant ((13, Effect ([ ], .)), String("true")) ]),
            Apply
              ((13, Effect ([ Type (OCaml.Failure) ], .)),
                Variable
                  ((13,
                    Effect ([ ], . -[ Type (OCaml.Failure) ]-> .)),
                    c),
                [ Constant ((13, Effect ([ ], .)), String("false")) ])))
    ])
