1 Reference (r, Type (Z/1), Constant (1, Int(12)))

3
Value
  (non_rec, @.,
    [
      ((plus_one, [ A ], [ (x, A) ], Monad ([ r/0 ], Type (Z/1))),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Bind
                  (?,
                    Apply
                      (4,
                        Variable
                          (4,
                            OCaml.Effect.State.read/1),
                        [
                          Variable
                            (4,
                              r/0)
                        ]),
                    Some
                      x_1,
                    Return
                      (?,
                        Apply
                          (4,
                            Variable
                              (4,
                                Z.add/1),
                            [
                              Variable
                                (?,
                                  x_1/0);
                              Constant
                                (4,
                                  Int(1))
                            ]))))
            ]))
    ])

6 Reference (s, Type (string/1), Constant (6, String("Hi")))

8
Value
  (non_rec, @.,
    [
      ((fail, [ A; B ], [ (x, A) ], Monad ([ s/0; OCaml.Failure/1 ], B)),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Bind
                  (?,
                    Lift
                      (?,
                        [
                          s/0
                        ],
                        [
                          s/0;
                          OCaml.Failure/1
                        ],
                        Apply
                          (8,
                            Variable
                              (8,
                                OCaml.Effect.State.read/1),
                            [
                              Variable
                                (8,
                                  s/0)
                            ])),
                    Some
                      x_1,
                    Lift
                      (?,
                        [
                          OCaml.Failure/1
                        ],
                        [
                          s/0;
                          OCaml.Failure/1
                        ],
                        Apply
                          (8,
                            Variable
                              (8,
                                OCaml.Pervasives.failwith/1),
                            [
                              Variable
                                (?,
                                  x_1/0)
                            ]))))
            ]))
    ])

10
Value
  (non_rec, @.,
    [
      ((reset, [ A ], [ (x, A) ], Monad ([ r/0 ], Type (unit/1))),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Apply
                  (11,
                    Variable
                      (11,
                        OCaml.Effect.State.write/1),
                    [
                      Variable
                        (11,
                          r/0);
                      Constant
                        (11,
                          Int(0))
                    ]))
            ]))
    ])

13
Value
  (non_rec, @.,
    [
      ((incr, [ A ], [ (x, A) ], Monad ([ r/0 ], Type (unit/1))),
        Match
          (?, Variable (?, x/0),
            [
              (Any,
                Bind
                  (?,
                    Bind
                      (?,
                        Apply
                          (14,
                            Variable
                              (14,
                                OCaml.Effect.State.read/1),
                            [
                              Variable
                                (14,
                                  r/0)
                            ]),
                        Some
                          x_1,
                        Return
                          (?,
                            Apply
                              (14,
                                Variable
                                  (14,
                                    Z.add/1),
                                [
                                  Variable
                                    (?,
                                      x_1/0);
                                  Constant
                                    (14,
                                      Int(1))
                                ]))),
                    Some
                      x_1,
                    Apply
                      (14,
                        Variable
                          (14,
                            OCaml.Effect.State.write/1),
                        [
                          Variable
                            (14,
                              r/0);
                          Variable
                            (?,
                              x_1/0)
                        ])))
            ]))
    ])
