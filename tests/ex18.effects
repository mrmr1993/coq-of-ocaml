1 Reference (r, r_state, Type (Z), Constant ((1, Effect ([ ], .)), Int(12)))

3
Value
  (non_rec, @.,
    [
      ((plus_one, [ A ], [ (x, A) ],
        Monad
          ([ Type (OCaml.Effect.State.state, Type (Z)); Type (r_state) ],
            Type (Z))),
        Match
          ((3,
            Effect
              ([
                Type (OCaml.Effect.State.state, Type (Z));
                Type (r_state)
              ], .)), Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((4,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (Z));
                        Type
                          (r_state)
                      ],
                        .)),
                    Variable
                      ((4,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                ->
                                .)),
                        Z.add),
                    [
                      Apply
                        ((4,
                          Effect
                            ([
                              Type
                                (OCaml.Effect.State.state,
                                  Type
                                    (Z));
                              Type
                                (r_state)
                            ],
                              .)),
                          Variable
                            ((4,
                              Effect
                                ([
                                ],
                                  .
                                    -[
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (Z))
                                    ]->
                                    .)),
                              OCaml.Effect.State.read),
                          [
                            Variable
                              ((4,
                                Effect
                                  ([
                                    Type
                                      (OCaml.Effect.State.state,
                                        Type
                                          (Z));
                                    Type
                                      (r_state)
                                  ],
                                    .)),
                                r)
                          ]);
                      Constant
                        ((4,
                          Effect
                            ([
                            ],
                              .)),
                          Int(1))
                    ]))
            ]))
    ])

6
Reference
  (s, s_state, Type (string), Constant ((6, Effect ([ ], .)), String("Hi")))

8
Value
  (non_rec, @.,
    [
      ((fail, [ A; B ], [ (x, A) ],
        Monad
          ([
            Type (OCaml.Effect.State.state, Type (string));
            Type (s_state);
            Type (OCaml.exception, Type (OCaml.failure))
          ], B)),
        Match
          ((8,
            Effect
              ([
                Type (OCaml.Effect.State.state, Type (string));
                Type (s_state);
                Type (OCaml.exception, Type (OCaml.failure))
              ], .)), Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((8,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (string));
                        Type
                          (s_state);
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.failure))
                      ],
                        .)),
                    Variable
                      ((8,
                        Effect
                          ([
                          ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.failure))
                              ]->
                              .)),
                        OCaml.Pervasives.failwith),
                    [
                      Apply
                        ((8,
                          Effect
                            ([
                              Type
                                (OCaml.Effect.State.state,
                                  Type
                                    (string));
                              Type
                                (s_state)
                            ],
                              .)),
                          Variable
                            ((8,
                              Effect
                                ([
                                ],
                                  .
                                    -[
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (string))
                                    ]->
                                    .)),
                              OCaml.Effect.State.read),
                          [
                            Variable
                              ((8,
                                Effect
                                  ([
                                    Type
                                      (OCaml.Effect.State.state,
                                        Type
                                          (string));
                                    Type
                                      (s_state)
                                  ],
                                    .)),
                                s)
                          ])
                    ]))
            ]))
    ])

10
Value
  (non_rec, @.,
    [
      ((reset, [ A ], [ (x, A) ],
        Monad
          ([ Type (OCaml.Effect.State.state, Type (Z)); Type (r_state) ],
            Type (unit))),
        Match
          ((10,
            Effect
              ([
                Type (OCaml.Effect.State.state, Type (Z));
                Type (r_state)
              ], .)), Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((11,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (Z));
                        Type
                          (r_state)
                      ],
                        .)),
                    Variable
                      ((11,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                -[
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (Z))
                                ]->
                                .)),
                        OCaml.Effect.State.write),
                    [
                      Variable
                        ((11,
                          Effect
                            ([
                              Type
                                (OCaml.Effect.State.state,
                                  Type
                                    (Z));
                              Type
                                (r_state)
                            ],
                              .)),
                          r);
                      Constant
                        ((11,
                          Effect
                            ([
                            ],
                              .)),
                          Int(0))
                    ]))
            ]))
    ])

13
Value
  (non_rec, @.,
    [
      ((incr, [ A ], [ (x, A) ],
        Monad
          ([ Type (OCaml.Effect.State.state, Type (Z)); Type (r_state) ],
            Type (unit))),
        Match
          ((13,
            Effect
              ([
                Type (OCaml.Effect.State.state, Type (Z));
                Type (r_state)
              ], .)), Variable ((?, Effect ([ ], .)), x),
            [
              (Any,
                Apply
                  ((14,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (Z));
                        Type
                          (r_state)
                      ],
                        .)),
                    Variable
                      ((14,
                        Effect
                          ([
                          ],
                            .
                              ->
                              .
                                -[
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (Z))
                                ]->
                                .)),
                        OCaml.Effect.State.write),
                    [
                      Variable
                        ((14,
                          Effect
                            ([
                              Type
                                (OCaml.Effect.State.state,
                                  Type
                                    (Z));
                              Type
                                (r_state)
                            ],
                              .)),
                          r);
                      Apply
                        ((14,
                          Effect
                            ([
                              Type
                                (OCaml.Effect.State.state,
                                  Type
                                    (Z));
                              Type
                                (r_state)
                            ],
                              .)),
                          Variable
                            ((14,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .
                                      ->
                                      .)),
                              Z.add),
                          [
                            Apply
                              ((14,
                                Effect
                                  ([
                                    Type
                                      (OCaml.Effect.State.state,
                                        Type
                                          (Z));
                                    Type
                                      (r_state)
                                  ],
                                    .)),
                                Variable
                                  ((14,
                                    Effect
                                      ([
                                      ],
                                        .
                                          -[
                                            Type
                                              (OCaml.Effect.State.state,
                                                Type
                                                  (Z))
                                          ]->
                                          .)),
                                    OCaml.Effect.State.read),
                                [
                                  Variable
                                    ((14,
                                      Effect
                                        ([
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (Z));
                                          Type
                                            (r_state)
                                        ],
                                          .)),
                                      r)
                                ]);
                            Constant
                              ((14,
                                Effect
                                  ([
                                  ],
                                    .)),
                                Int(1))
                          ])
                    ]))
            ]))
    ])
