Require [ OCaml.List ]

2
Value
  (non_rec, @.,
    [
      ((slow_div, [ ], [ (a, Type (Z)); (b, Type (Z)) ],
        Monad
          ([
            Type (OCaml.Effect.State.state, Type (Z));
            Type (Counter);
            Type (NonTermination)
          ], Type (Z))),
        LetVar
          (3,
            Effect
              ([
                Type (OCaml.Effect.State.state, Type (Z));
                Type (Counter);
                Type (NonTermination)
              ], .)) y =
          Apply
            ((3, Effect ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
              Variable
                ((3,
                  Effect
                    ([ ],
                      .
                        -[
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (Z))
                        ]-> .)), OCaml/Pervasives.ref),
              [ Constant ((3, Effect ([ ], .)), Int(0)) ]) in
        LetVar
          (4,
            Effect
              ([
                Type (OCaml.Effect.State.state, Type (Z));
                Type (Counter);
                Type (NonTermination)
              ], .)) c =
          Apply
            ((4, Effect ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
              Variable
                ((4,
                  Effect
                    ([ ],
                      .
                        -[
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (Z))
                        ]-> .)), OCaml/Pervasives.ref),
              [ Constant ((4, Effect ([ ], .)), Int(0)) ]) in
        Sequence
          ((5,
            Effect
              ([
                Type (OCaml.Effect.State.state, Type (Z));
                Type (Counter);
                Type (NonTermination)
              ], .)),
            While
              ((5,
                Effect
                  ([
                    Type (OCaml.Effect.State.state, Type (Z));
                    Type (Counter);
                    Type (NonTermination)
                  ], .)),
                Apply
                  ((5,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (Z))
                      ], .)),
                    Variable
                      ((5, Effect ([ ], . -> . -> .)),
                        OCaml/Pervasives.le),
                    [
                      Apply
                        ((5,
                          Effect
                            ([
                              Type
                                (OCaml.Effect.State.state,
                                  Type
                                    (Z))
                            ],
                              .)),
                          Variable
                            ((5,
                              Effect
                                ([
                                ],
                                  .
                                    ->
                                    .
                                      ->
                                      .)),
                              Z.add),
                          [
                            Apply
                              ((5,
                                Effect
                                  ([
                                    Type
                                      (OCaml.Effect.State.state,
                                        Type
                                          (Z))
                                  ],
                                    .)),
                                Variable
                                  ((5,
                                    Effect
                                      ([
                                      ],
                                        .
                                          -[
                                            Type
                                              (OCaml.Effect.State.state,
                                                Type
                                                  (Z))
                                          ]->
                                          .)),
                                    OCaml/Effect.State.read),
                                [
                                  Variable
                                    ((5,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Ex43/y)
                                ]);
                            Variable
                              ((5,
                                Effect
                                  ([
                                  ],
                                    .)),
                                Ex43/b)
                          ]);
                      Variable ((5, Effect ([ ], .)), Ex43/a)
                    ]),
                Sequence
                  ((6,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (Z))
                      ], .)),
                    Apply
                      ((6,
                        Effect
                          ([
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (Z))
                          ], .)),
                        Variable
                          ((6,
                            Effect
                              ([ ],
                                . ->
                                  .
                                    -[
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (Z))
                                    ]-> .)),
                            OCaml/Effect.State.write),
                        [
                          Variable
                            ((6,
                              Effect
                                ([
                                ],
                                  .)),
                              Ex43/y);
                          Apply
                            ((6,
                              Effect
                                ([
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (Z))
                                ],
                                  .)),
                              Variable
                                ((6,
                                  Effect
                                    ([
                                    ],
                                      .
                                        ->
                                        .
                                          ->
                                          .)),
                                  Z.add),
                              [
                                Apply
                                  ((6,
                                    Effect
                                      ([
                                        Type
                                          (OCaml.Effect.State.state,
                                            Type
                                              (Z))
                                      ],
                                        .)),
                                    Variable
                                      ((6,
                                        Effect
                                          ([
                                          ],
                                            .
                                              -[
                                                Type
                                                  (OCaml.Effect.State.state,
                                                    Type
                                                      (Z))
                                              ]->
                                              .)),
                                        OCaml/Effect.State.read),
                                    [
                                      Variable
                                        ((6,
                                          Effect
                                            ([
                                            ],
                                              .)),
                                          Ex43/y)
                                    ]);
                                Variable
                                  ((6,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    Ex43/b)
                              ])
                        ]),
                    Apply
                      ((7,
                        Effect
                          ([
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (Z))
                          ], .)),
                        Variable
                          ((7,
                            Effect
                              ([ ],
                                . ->
                                  .
                                    -[
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (Z))
                                    ]-> .)),
                            OCaml/Effect.State.write),
                        [
                          Variable
                            ((7,
                              Effect
                                ([
                                ],
                                  .)),
                              Ex43/c);
                          Apply
                            ((7,
                              Effect
                                ([
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (Z))
                                ],
                                  .)),
                              Variable
                                ((7,
                                  Effect
                                    ([
                                    ],
                                      .
                                        ->
                                        .
                                          ->
                                          .)),
                                  Z.add),
                              [
                                Apply
                                  ((7,
                                    Effect
                                      ([
                                        Type
                                          (OCaml.Effect.State.state,
                                            Type
                                              (Z))
                                      ],
                                        .)),
                                    Variable
                                      ((7,
                                        Effect
                                          ([
                                          ],
                                            .
                                              -[
                                                Type
                                                  (OCaml.Effect.State.state,
                                                    Type
                                                      (Z))
                                              ]->
                                              .)),
                                        OCaml/Effect.State.read),
                                    [
                                      Variable
                                        ((7,
                                          Effect
                                            ([
                                            ],
                                              .)),
                                          Ex43/c)
                                    ]);
                                Constant
                                  ((7,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    Int(1))
                              ])
                        ]))),
            Apply
              ((9,
                Effect
                  ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
                Variable
                  ((9,
                    Effect
                      ([ ],
                        .
                          -[
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (Z))
                          ]-> .)), OCaml/Effect.State.read),
                [ Variable ((9, Effect ([ ], .)), Ex43/c) ])))
    ])

11
Value
  (non_rec, @.,
    [
      ((nested, [ ], [ (x, Type (unit)) ],
        Monad
          ([
            Type (OCaml.Effect.State.state, Type (list, Type (Z)));
            Type
              (OCaml.Effect.State.state,
                Type
                  (list,
                    Type
                      (OCaml/Effect.State.t,
                        Type
                          (list,
                            Type
                              (Z)))));
            Type (Counter);
            Type (NonTermination)
          ], Type (list, Type (Z)))),
        Match
          ((11,
            Effect
              ([
                Type (OCaml.Effect.State.state, Type (list, Type (Z)));
                Type
                  (OCaml.Effect.State.state,
                    Type
                      (list,
                        Type
                          (OCaml/Effect.State.t,
                            Type
                              (list,
                                Type
                                  (Z)))));
                Type (Counter);
                Type (NonTermination)
              ], .)), Variable ((?, Effect ([ ], .)), Ex43/x),
            [
              (Constructor (tt),
                LetVar
                  (12,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (list,
                                Type
                                  (Z)));
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (list,
                                Type
                                  (OCaml/Effect.State.t,
                                    Type
                                      (list,
                                        Type
                                          (Z)))));
                        Type
                          (Counter);
                        Type
                          (NonTermination)
                      ],
                        .))
                  a =
                  Apply
                    ((12,
                      Effect
                        ([
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (list,
                                  Type
                                    (Z)));
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (list,
                                  Type
                                    (OCaml/Effect.State.t,
                                      Type
                                        (list,
                                          Type
                                            (Z)))))
                        ],
                          .)),
                      Variable
                        ((12,
                          Effect
                            ([
                            ],
                              .
                                -[
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (list,
                                          Type
                                            (OCaml/Effect.State.t,
                                              Type
                                                (list,
                                                  Type
                                                    (Z)))))
                                ]->
                                .)),
                          OCaml/Pervasives.ref),
                      [
                        Constructor
                          ((12,
                            Effect
                              ([
                                Type
                                  (OCaml.Effect.State.state,
                                    Type
                                      (list,
                                        Type
                                          (Z)))
                              ],
                                .)),
                            cons,
                            Apply
                              ((12,
                                Effect
                                  ([
                                    Type
                                      (OCaml.Effect.State.state,
                                        Type
                                          (list,
                                            Type
                                              (Z)))
                                  ],
                                    .)),
                                Variable
                                  ((12,
                                    Effect
                                      ([
                                      ],
                                        .
                                          -[
                                            Type
                                              (OCaml.Effect.State.state,
                                                Type
                                                  (list,
                                                    Type
                                                      (Z)))
                                          ]->
                                          .)),
                                    OCaml/Pervasives.ref),
                                [
                                  Constructor
                                    ((12,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      cons,
                                      Constant
                                        ((12,
                                          Effect
                                            ([
                                            ],
                                              .)),
                                          Int(1)),
                                      Constructor
                                        ((12,
                                          Effect
                                            ([
                                            ],
                                              .)),
                                          cons,
                                          Constant
                                            ((12,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              Int(2)),
                                          Constructor
                                            ((12,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              [])))
                                ]),
                            Constructor
                              ((12,
                                Effect
                                  ([
                                    Type
                                      (OCaml.Effect.State.state,
                                        Type
                                          (list,
                                            Type
                                              (Z)))
                                  ],
                                    .)),
                                cons,
                                Apply
                                  ((12,
                                    Effect
                                      ([
                                        Type
                                          (OCaml.Effect.State.state,
                                            Type
                                              (list,
                                                Type
                                                  (Z)))
                                      ],
                                        .)),
                                    Variable
                                      ((12,
                                        Effect
                                          ([
                                          ],
                                            .
                                              -[
                                                Type
                                                  (OCaml.Effect.State.state,
                                                    Type
                                                      (list,
                                                        Type
                                                          (Z)))
                                              ]->
                                              .)),
                                        OCaml/Pervasives.ref),
                                    [
                                      Constructor
                                        ((12,
                                          Effect
                                            ([
                                            ],
                                              .)),
                                          cons,
                                          Constant
                                            ((12,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              Int(3)),
                                          Constructor
                                            ((12,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              cons,
                                              Constant
                                                ((12,
                                                  Effect
                                                    ([
                                                    ],
                                                      .)),
                                                  Int(4)),
                                              Constructor
                                                ((12,
                                                  Effect
                                                    ([
                                                    ],
                                                      .)),
                                                  cons,
                                                  Constant
                                                    ((12,
                                                      Effect
                                                        ([
                                                        ],
                                                          .)),
                                                      Int(5)),
                                                  Constructor
                                                    ((12,
                                                      Effect
                                                        ([
                                                        ],
                                                          .)),
                                                      []))))
                                    ]),
                                Constructor
                                  ((12,
                                    Effect
                                      ([
                                        Type
                                          (OCaml.Effect.State.state,
                                            Type
                                              (list,
                                                Type
                                                  (Z)))
                                      ],
                                        .)),
                                    cons,
                                    Apply
                                      ((12,
                                        Effect
                                          ([
                                            Type
                                              (OCaml.Effect.State.state,
                                                Type
                                                  (list,
                                                    Type
                                                      (Z)))
                                          ],
                                            .)),
                                        Variable
                                          ((12,
                                            Effect
                                              ([
                                              ],
                                                .
                                                  -[
                                                    Type
                                                      (OCaml.Effect.State.state,
                                                        Type
                                                          (list,
                                                            Type
                                                              (Z)))
                                                  ]->
                                                  .)),
                                            OCaml/Pervasives.ref),
                                        [
                                          Constructor
                                            ((12,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              cons,
                                              Constant
                                                ((12,
                                                  Effect
                                                    ([
                                                    ],
                                                      .)),
                                                  Int(6)),
                                              Constructor
                                                ((12,
                                                  Effect
                                                    ([
                                                    ],
                                                      .)),
                                                  cons,
                                                  Constant
                                                    ((12,
                                                      Effect
                                                        ([
                                                        ],
                                                          .)),
                                                      Int(7)),
                                                  Constructor
                                                    ((12,
                                                      Effect
                                                        ([
                                                        ],
                                                          .)),
                                                      [])))
                                        ]),
                                    Constructor
                                      ((12,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        []))))
                      ])
                  in
                LetVar
                  (13,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (list,
                                Type
                                  (Z)));
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (list,
                                Type
                                  (OCaml/Effect.State.t,
                                    Type
                                      (list,
                                        Type
                                          (Z)))));
                        Type
                          (Counter);
                        Type
                          (NonTermination)
                      ],
                        .))
                  b =
                  Apply
                    ((13,
                      Effect
                        ([
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (list,
                                  Type
                                    (Z)))
                        ],
                          .)),
                      Variable
                        ((13,
                          Effect
                            ([
                            ],
                              .
                                -[
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (list,
                                          Type
                                            (Z)))
                                ]->
                                .)),
                          OCaml/Pervasives.ref),
                      [
                        Constructor
                          ((13,
                            Effect
                              ([
                              ],
                                .)),
                            [])
                      ])
                  in
                Sequence
                  ((14,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (list,
                                Type
                                  (Z)));
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (list,
                                Type
                                  (OCaml/Effect.State.t,
                                    Type
                                      (list,
                                        Type
                                          (Z)))));
                        Type
                          (Counter);
                        Type
                          (NonTermination)
                      ],
                        .)),
                    While
                      ((14,
                        Effect
                          ([
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (list,
                                    Type
                                      (Z)));
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (list,
                                    Type
                                      (OCaml/Effect.State.t,
                                        Type
                                          (list,
                                            Type
                                              (Z)))));
                            Type
                              (Counter);
                            Type
                              (NonTermination)
                          ],
                            .)),
                        Apply
                          ((14,
                            Effect
                              ([
                                Type
                                  (OCaml.Effect.State.state,
                                    Type
                                      (list,
                                        Type
                                          (OCaml/Effect.State.t,
                                            Type
                                              (list,
                                                Type
                                                  (Z)))))
                              ],
                                .)),
                            Variable
                              ((14,
                                Effect
                                  ([
                                  ],
                                    .
                                      ->
                                      .
                                        ->
                                        .)),
                                OCaml/Pervasives.gt),
                            [
                              Apply
                                ((14,
                                  Effect
                                    ([
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (list,
                                              Type
                                                (OCaml/Effect.State.t,
                                                  Type
                                                    (list,
                                                      Type
                                                        (Z)))))
                                    ],
                                      .)),
                                  Variable
                                    ((14,
                                      Effect
                                        ([
                                        ],
                                          .
                                            ->
                                            .)),
                                      List.length),
                                  [
                                    Apply
                                      ((14,
                                        Effect
                                          ([
                                            Type
                                              (OCaml.Effect.State.state,
                                                Type
                                                  (list,
                                                    Type
                                                      (OCaml/Effect.State.t,
                                                        Type
                                                          (list,
                                                            Type
                                                              (Z)))))
                                          ],
                                            .)),
                                        Variable
                                          ((14,
                                            Effect
                                              ([
                                              ],
                                                .
                                                  -[
                                                    Type
                                                      (OCaml.Effect.State.state,
                                                        Type
                                                          (list,
                                                            Type
                                                              (OCaml/Effect.State.t,
                                                                Type
                                                                  (list,
                                                                    Type
                                                                      (Z)))))
                                                  ]->
                                                  .)),
                                            OCaml/Effect.State.read),
                                        [
                                          Variable
                                            ((14,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              Ex43/a)
                                        ])
                                  ]);
                              Constant
                                ((14,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Int(0))
                            ]),
                        Match
                          ((15,
                            Effect
                              ([
                                Type
                                  (OCaml.Effect.State.state,
                                    Type
                                      (list,
                                        Type
                                          (Z)));
                                Type
                                  (OCaml.Effect.State.state,
                                    Type
                                      (list,
                                        Type
                                          (OCaml/Effect.State.t,
                                            Type
                                              (list,
                                                Type
                                                  (Z)))));
                                Type
                                  (Counter);
                                Type
                                  (NonTermination)
                              ],
                                .)),
                            Apply
                              ((15,
                                Effect
                                  ([
                                    Type
                                      (OCaml.Effect.State.state,
                                        Type
                                          (list,
                                            Type
                                              (OCaml/Effect.State.t,
                                                Type
                                                  (list,
                                                    Type
                                                      (Z)))))
                                  ],
                                    .)),
                                Variable
                                  ((15,
                                    Effect
                                      ([
                                      ],
                                        .
                                          -[
                                            Type
                                              (OCaml.Effect.State.state,
                                                Type
                                                  (list,
                                                    Type
                                                      (OCaml/Effect.State.t,
                                                        Type
                                                          (list,
                                                            Type
                                                              (Z)))))
                                          ]->
                                          .)),
                                    OCaml/Effect.State.read),
                                [
                                  Variable
                                    ((15,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Ex43/a)
                                ]),
                            [
                              (Constructor
                                ([]),
                                Constructor
                                  ((16,
                                    Effect
                                      ([
                                      ],
                                        .)),
                                    tt));
                              (Constructor
                                (cons,
                                  x,
                                  a'),
                                Sequence
                                  ((18,
                                    Effect
                                      ([
                                        Type
                                          (OCaml.Effect.State.state,
                                            Type
                                              (list,
                                                Type
                                                  (Z)));
                                        Type
                                          (OCaml.Effect.State.state,
                                            Type
                                              (list,
                                                Type
                                                  (OCaml/Effect.State.t,
                                                    Type
                                                      (list,
                                                        Type
                                                          (Z)))));
                                        Type
                                          (Counter);
                                        Type
                                          (NonTermination)
                                      ],
                                        .)),
                                    While
                                      ((18,
                                        Effect
                                          ([
                                            Type
                                              (OCaml.Effect.State.state,
                                                Type
                                                  (list,
                                                    Type
                                                      (Z)));
                                            Type
                                              (Counter);
                                            Type
                                              (NonTermination)
                                          ],
                                            .)),
                                        Apply
                                          ((18,
                                            Effect
                                              ([
                                                Type
                                                  (OCaml.Effect.State.state,
                                                    Type
                                                      (list,
                                                        Type
                                                          (Z)))
                                              ],
                                                .)),
                                            Variable
                                              ((18,
                                                Effect
                                                  ([
                                                  ],
                                                    .
                                                      ->
                                                      .
                                                        ->
                                                        .)),
                                                OCaml/Pervasives.gt),
                                            [
                                              Apply
                                                ((18,
                                                  Effect
                                                    ([
                                                      Type
                                                        (OCaml.Effect.State.state,
                                                          Type
                                                            (list,
                                                              Type
                                                                (Z)))
                                                    ],
                                                      .)),
                                                  Variable
                                                    ((18,
                                                      Effect
                                                        ([
                                                        ],
                                                          .
                                                            ->
                                                            .)),
                                                      List.length),
                                                  [
                                                    Apply
                                                      ((18,
                                                        Effect
                                                          ([
                                                            Type
                                                              (OCaml.Effect.State.state,
                                                                Type
                                                                  (list,
                                                                    Type
                                                                      (Z)))
                                                          ],
                                                            .)),
                                                        Variable
                                                          ((18,
                                                            Effect
                                                              ([
                                                              ],
                                                                .
                                                                  -[
                                                                    Type
                                                                      (OCaml.Effect.State.state,
                                                                        Type
                                                                          (list,
                                                                            Type
                                                                              (Z)))
                                                                  ]->
                                                                  .)),
                                                            OCaml/Effect.State.read),
                                                        [
                                                          Variable
                                                            ((18,
                                                              Effect
                                                                ([
                                                                ],
                                                                  .)),
                                                              Ex43/x)
                                                        ])
                                                  ]);
                                              Constant
                                                ((18,
                                                  Effect
                                                    ([
                                                    ],
                                                      .)),
                                                  Int(0))
                                            ]),
                                        Match
                                          ((19,
                                            Effect
                                              ([
                                                Type
                                                  (OCaml.Effect.State.state,
                                                    Type
                                                      (list,
                                                        Type
                                                          (Z)))
                                              ],
                                                .)),
                                            Apply
                                              ((19,
                                                Effect
                                                  ([
                                                    Type
                                                      (OCaml.Effect.State.state,
                                                        Type
                                                          (list,
                                                            Type
                                                              (Z)))
                                                  ],
                                                    .)),
                                                Variable
                                                  ((19,
                                                    Effect
                                                      ([
                                                      ],
                                                        .
                                                          -[
                                                            Type
                                                              (OCaml.Effect.State.state,
                                                                Type
                                                                  (list,
                                                                    Type
                                                                      (Z)))
                                                          ]->
                                                          .)),
                                                    OCaml/Effect.State.read),
                                                [
                                                  Variable
                                                    ((19,
                                                      Effect
                                                        ([
                                                        ],
                                                          .)),
                                                      Ex43/x)
                                                ]),
                                            [
                                              (Constructor
                                                ([]),
                                                Constructor
                                                  ((20,
                                                    Effect
                                                      ([
                                                      ],
                                                        .)),
                                                    tt));
                                              (Constructor
                                                (cons,
                                                  y,
                                                  x'),
                                                Sequence
                                                  ((22,
                                                    Effect
                                                      ([
                                                        Type
                                                          (OCaml.Effect.State.state,
                                                            Type
                                                              (list,
                                                                Type
                                                                  (Z)))
                                                      ],
                                                        .)),
                                                    Apply
                                                      ((22,
                                                        Effect
                                                          ([
                                                            Type
                                                              (OCaml.Effect.State.state,
                                                                Type
                                                                  (list,
                                                                    Type
                                                                      (Z)))
                                                          ],
                                                            .)),
                                                        Variable
                                                          ((22,
                                                            Effect
                                                              ([
                                                              ],
                                                                .
                                                                  ->
                                                                  .
                                                                    -[
                                                                      Type
                                                                        (OCaml.Effect.State.state,
                                                                          Type
                                                                            (list,
                                                                              Type
                                                                                (Z)))
                                                                    ]->
                                                                    .)),
                                                            OCaml/Effect.State.write),
                                                        [
                                                          Variable
                                                            ((22,
                                                              Effect
                                                                ([
                                                                ],
                                                                  .)),
                                                              Ex43/b);
                                                          Constructor
                                                            ((22,
                                                              Effect
                                                                ([
                                                                  Type
                                                                    (OCaml.Effect.State.state,
                                                                      Type
                                                                        (list,
                                                                          Type
                                                                            (Z)))
                                                                ],
                                                                  .)),
                                                              cons,
                                                              Variable
                                                                ((22,
                                                                  Effect
                                                                    ([
                                                                    ],
                                                                      .)),
                                                                  Ex43/y),
                                                              Apply
                                                                ((22,
                                                                  Effect
                                                                    ([
                                                                      Type
                                                                        (OCaml.Effect.State.state,
                                                                          Type
                                                                            (list,
                                                                              Type
                                                                                (Z)))
                                                                    ],
                                                                      .)),
                                                                  Variable
                                                                    ((22,
                                                                      Effect
                                                                        ([
                                                                        ],
                                                                          .
                                                                            -[
                                                                              Type
                                                                                (OCaml.Effect.State.state,
                                                                                  Type
                                                                                    (list,
                                                                                      Type
                                                                                        (Z)))
                                                                            ]->
                                                                            .)),
                                                                      OCaml/Effect.State.read),
                                                                  [
                                                                    Variable
                                                                      ((22,
                                                                        Effect
                                                                          ([
                                                                          ],
                                                                            .)),
                                                                        Ex43/b)
                                                                  ]))
                                                        ]),
                                                    Apply
                                                      ((23,
                                                        Effect
                                                          ([
                                                            Type
                                                              (OCaml.Effect.State.state,
                                                                Type
                                                                  (list,
                                                                    Type
                                                                      (Z)))
                                                          ],
                                                            .)),
                                                        Variable
                                                          ((23,
                                                            Effect
                                                              ([
                                                              ],
                                                                .
                                                                  ->
                                                                  .
                                                                    -[
                                                                      Type
                                                                        (OCaml.Effect.State.state,
                                                                          Type
                                                                            (list,
                                                                              Type
                                                                                (Z)))
                                                                    ]->
                                                                    .)),
                                                            OCaml/Effect.State.write),
                                                        [
                                                          Variable
                                                            ((23,
                                                              Effect
                                                                ([
                                                                ],
                                                                  .)),
                                                              Ex43/x);
                                                          Variable
                                                            ((23,
                                                              Effect
                                                                ([
                                                                ],
                                                                  .)),
                                                              Ex43/x')
                                                        ])))
                                            ])),
                                    Apply
                                      ((25,
                                        Effect
                                          ([
                                            Type
                                              (OCaml.Effect.State.state,
                                                Type
                                                  (list,
                                                    Type
                                                      (OCaml/Effect.State.t,
                                                        Type
                                                          (list,
                                                            Type
                                                              (Z)))))
                                          ],
                                            .)),
                                        Variable
                                          ((25,
                                            Effect
                                              ([
                                              ],
                                                .
                                                  ->
                                                  .
                                                    -[
                                                      Type
                                                        (OCaml.Effect.State.state,
                                                          Type
                                                            (list,
                                                              Type
                                                                (OCaml/Effect.State.t,
                                                                  Type
                                                                    (list,
                                                                      Type
                                                                        (Z)))))
                                                    ]->
                                                    .)),
                                            OCaml/Effect.State.write),
                                        [
                                          Variable
                                            ((25,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              Ex43/a);
                                          Variable
                                            ((25,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              Ex43/a')
                                        ])))
                            ])),
                    Apply
                      ((27,
                        Effect
                          ([
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (list,
                                    Type
                                      (Z)))
                          ],
                            .)),
                        Variable
                          ((27,
                            Effect
                              ([
                              ],
                                .
                                  -[
                                    Type
                                      (OCaml.Effect.State.state,
                                        Type
                                          (list,
                                            Type
                                              (Z)))
                                  ]->
                                  .)),
                            OCaml/Effect.State.read),
                        [
                          Variable
                            ((27,
                              Effect
                                ([
                                ],
                                  .)),
                              Ex43/b)
                        ])))
            ]))
    ])

29
Value
  (non_rec, @.,
    [
      ((raises, [ ], [ (b, Type (bool)) ],
        Monad
          ([
            Type (Counter);
            Type (NonTermination);
            Type (OCaml.exception, Type (OCaml.failure))
          ], Type (unit))),
        While
          ((30,
            Effect
              ([
                Type (Counter);
                Type (NonTermination);
                Type (OCaml.exception, Type (OCaml.failure))
              ], .)), Variable ((30, Effect ([ ], .)), Ex43/b),
            Coerce
              ((?,
                Effect
                  ([ Type (OCaml.exception, Type (OCaml.failure)) ],
                    .)),
                Apply
                  ((31,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.failure))
                      ], .)),
                    Variable
                      ((31,
                        Effect
                          ([ ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.failure))
                              ]-> .)),
                        OCaml/Pervasives.failwith),
                    [
                      Constant
                        ((31,
                          Effect
                            ([
                            ],
                              .)),
                          String("b is true"))
                    ]),
                Monad
                  ([ Type (OCaml.exception, Type (OCaml.failure)) ],
                    ()))))
    ])

34
Value
  (non_rec, @.,
    [
      ((complex_raises, [ ], [ (b, Type (bool)) ],
        Monad
          ([
            Type (Counter);
            Type (NonTermination);
            Type (OCaml.exception, Type (OCaml.failure))
          ], Type (unit))),
        LetFun
          (35,
            Effect
              ([
                Type (Counter);
                Type (NonTermination);
                Type (OCaml.exception, Type (OCaml.failure))
              ], .))
          (non_rec, @.,
            [
              ((f, [ A; B ], [ (a, A) ],
                Monad
                  ([
                    Type
                      (OCaml.exception,
                        Type
                          (OCaml.failure))
                  ], (A * Type (Z) * B))),
                Tuple
                  ((35,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.failure))
                      ],
                        .)),
                    Variable
                      ((35,
                        Effect
                          ([
                          ],
                            .)),
                        Ex43/a),
                    Constant
                      ((35,
                        Effect
                          ([
                          ],
                            .)),
                        Int(15)),
                    Apply
                      ((35,
                        Effect
                          ([
                            Type
                              (OCaml.exception,
                                Type
                                  (OCaml.failure))
                          ],
                            .)),
                        Variable
                          ((35,
                            Effect
                              ([
                              ],
                                .
                                  -[
                                    Type
                                      (OCaml.exception,
                                        Type
                                          (OCaml.failure))
                                  ]->
                                  .)),
                            OCaml/Pervasives.failwith),
                        [
                          Constant
                            ((35,
                              Effect
                                ([
                                ],
                                  .)),
                              String("b is true"))
                        ])))
            ]) in
        While
          ((36,
            Effect
              ([
                Type (Counter);
                Type (NonTermination);
                Type (OCaml.exception, Type (OCaml.failure))
              ], .)), Variable ((36, Effect ([ ], .)), Ex43/b),
            Coerce
              ((?,
                Effect
                  ([ Type (OCaml.exception, Type (OCaml.failure)) ],
                    .)),
                Apply
                  ((37,
                    Effect
                      ([
                        Type
                          (OCaml.exception,
                            Type
                              (OCaml.failure))
                      ], .)),
                    Variable
                      ((37,
                        Effect
                          ([ ],
                            .
                              -[
                                Type
                                  (OCaml.exception,
                                    Type
                                      (OCaml.failure))
                              ]-> .)), Ex43/f),
                    [ Constructor ((37, Effect ([ ], .)), true) ]),
                Monad
                  ([ Type (OCaml.exception, Type (OCaml.failure)) ],
                    (Type (bool) * Type (Z) * ())))))
    ])

40
Value
  (non_rec, @.,
    [
      ((argument_effects, [ ],
        [ (x, Type (OCaml/Effect.State.t, Type (Z))); (y, Type (Z)) ],
        Monad
          ([
            Type (OCaml.Effect.State.state, Type (Z));
            Type (Counter);
            Type (NonTermination)
          ], Type (Z))),
        LetVar
          (41,
            Effect
              ([
                Type (OCaml.Effect.State.state, Type (Z));
                Type (Counter);
                Type (NonTermination)
              ], .)) y =
          Apply
            ((41,
              Effect ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
              Variable
                ((41,
                  Effect
                    ([ ],
                      .
                        -[
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (Z))
                        ]-> .)), OCaml/Pervasives.ref),
              [ Variable ((41, Effect ([ ], .)), Ex43/y) ]) in
        LetVar
          (42,
            Effect
              ([
                Type (OCaml.Effect.State.state, Type (Z));
                Type (Counter);
                Type (NonTermination)
              ], .)) z =
          Apply
            ((42,
              Effect ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
              Variable
                ((42,
                  Effect
                    ([ ],
                      .
                        -[
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (Z))
                        ]-> .)), OCaml/Pervasives.ref),
              [ Constant ((42, Effect ([ ], .)), Int(0)) ]) in
        LetVar
          (43,
            Effect
              ([
                Type (OCaml.Effect.State.state, Type (Z));
                Type (Counter);
                Type (NonTermination)
              ], .)) i =
          Apply
            ((43,
              Effect ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
              Variable
                ((43,
                  Effect
                    ([ ],
                      .
                        -[
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (Z))
                        ]-> .)), OCaml/Pervasives.ref),
              [ Constant ((43, Effect ([ ], .)), Int(0)) ]) in
        Sequence
          ((44,
            Effect
              ([
                Type (OCaml.Effect.State.state, Type (Z));
                Type (Counter);
                Type (NonTermination)
              ], .)),
            While
              ((44,
                Effect
                  ([
                    Type (OCaml.Effect.State.state, Type (Z));
                    Type (Counter);
                    Type (NonTermination)
                  ], .)),
                Apply
                  ((44,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (Z))
                      ], .)),
                    Variable
                      ((44, Effect ([ ], . -> . -> .)),
                        OCaml/Pervasives.le),
                    [
                      Apply
                        ((44,
                          Effect
                            ([
                              Type
                                (OCaml.Effect.State.state,
                                  Type
                                    (Z))
                            ],
                              .)),
                          Variable
                            ((44,
                              Effect
                                ([
                                ],
                                  .
                                    -[
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (Z))
                                    ]->
                                    .)),
                              OCaml/Effect.State.read),
                          [
                            Variable
                              ((44,
                                Effect
                                  ([
                                  ],
                                    .)),
                                Ex43/i)
                          ]);
                      Apply
                        ((44,
                          Effect
                            ([
                              Type
                                (OCaml.Effect.State.state,
                                  Type
                                    (Z))
                            ],
                              .)),
                          Variable
                            ((44,
                              Effect
                                ([
                                ],
                                  .
                                    -[
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (Z))
                                    ]->
                                    .)),
                              OCaml/Effect.State.read),
                          [
                            Variable
                              ((44,
                                Effect
                                  ([
                                  ],
                                    .)),
                                Ex43/x)
                          ])
                    ]),
                LetVar
                  (45,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (Z));
                        Type (Counter);
                        Type (NonTermination)
                      ], .)) j =
                  Apply
                    ((45,
                      Effect
                        ([
                          Type
                            (OCaml.Effect.State.state,
                              Type
                                (Z))
                        ], .)),
                      Variable
                        ((45,
                          Effect
                            ([ ],
                              .
                                -[
                                  Type
                                    (OCaml.Effect.State.state,
                                      Type
                                        (Z))
                                ]-> .)),
                          OCaml/Pervasives.ref),
                      [
                        Constant
                          ((45,
                            Effect
                              ([
                              ],
                                .)),
                            Int(0))
                      ]) in
                Sequence
                  ((46,
                    Effect
                      ([
                        Type
                          (OCaml.Effect.State.state,
                            Type
                              (Z));
                        Type (Counter);
                        Type (NonTermination)
                      ], .)),
                    While
                      ((46,
                        Effect
                          ([
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (Z));
                            Type (Counter);
                            Type (NonTermination)
                          ], .)),
                        Apply
                          ((46,
                            Effect
                              ([
                                Type
                                  (OCaml.Effect.State.state,
                                    Type
                                      (Z))
                              ], .)),
                            Variable
                              ((46,
                                Effect
                                  ([ ], . -> . -> .)),
                                OCaml/Pervasives.le),
                            [
                              Apply
                                ((46,
                                  Effect
                                    ([
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (Z))
                                    ],
                                      .)),
                                  Variable
                                    ((46,
                                      Effect
                                        ([
                                        ],
                                          .
                                            -[
                                              Type
                                                (OCaml.Effect.State.state,
                                                  Type
                                                    (Z))
                                            ]->
                                            .)),
                                      OCaml/Effect.State.read),
                                  [
                                    Variable
                                      ((46,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        Ex43/j)
                                  ]);
                              Apply
                                ((46,
                                  Effect
                                    ([
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (Z))
                                    ],
                                      .)),
                                  Variable
                                    ((46,
                                      Effect
                                        ([
                                        ],
                                          .
                                            -[
                                              Type
                                                (OCaml.Effect.State.state,
                                                  Type
                                                    (Z))
                                            ]->
                                            .)),
                                      OCaml/Effect.State.read),
                                  [
                                    Variable
                                      ((46,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        Ex43/y)
                                  ])
                            ]),
                        Sequence
                          ((47,
                            Effect
                              ([
                                Type
                                  (OCaml.Effect.State.state,
                                    Type
                                      (Z))
                              ], .)),
                            Apply
                              ((47,
                                Effect
                                  ([
                                    Type
                                      (OCaml.Effect.State.state,
                                        Type
                                          (Z))
                                  ], .)),
                                Variable
                                  ((47,
                                    Effect
                                      ([ ],
                                        . ->
                                          .
                                            -[
                                              Type
                                                (OCaml.Effect.State.state,
                                                  Type
                                                    (Z))
                                            ]->
                                            .)),
                                    OCaml/Effect.State.write),
                                [
                                  Variable
                                    ((47,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Ex43/z);
                                  Apply
                                    ((47,
                                      Effect
                                        ([
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (Z))
                                        ],
                                          .)),
                                      Variable
                                        ((47,
                                          Effect
                                            ([
                                            ],
                                              .
                                                ->
                                                .
                                                  ->
                                                  .)),
                                          Z.add),
                                      [
                                        Apply
                                          ((47,
                                            Effect
                                              ([
                                                Type
                                                  (OCaml.Effect.State.state,
                                                    Type
                                                      (Z))
                                              ],
                                                .)),
                                            Variable
                                              ((47,
                                                Effect
                                                  ([
                                                  ],
                                                    .
                                                      -[
                                                        Type
                                                          (OCaml.Effect.State.state,
                                                            Type
                                                              (Z))
                                                      ]->
                                                      .)),
                                                OCaml/Effect.State.read),
                                            [
                                              Variable
                                                ((47,
                                                  Effect
                                                    ([
                                                    ],
                                                      .)),
                                                  Ex43/z)
                                            ]);
                                        Constant
                                          ((47,
                                            Effect
                                              ([
                                              ],
                                                .)),
                                            Int(1))
                                      ])
                                ]),
                            Apply
                              ((48,
                                Effect
                                  ([
                                    Type
                                      (OCaml.Effect.State.state,
                                        Type
                                          (Z))
                                  ], .)),
                                Variable
                                  ((48,
                                    Effect
                                      ([ ],
                                        . ->
                                          .
                                            -[
                                              Type
                                                (OCaml.Effect.State.state,
                                                  Type
                                                    (Z))
                                            ]->
                                            .)),
                                    OCaml/Effect.State.write),
                                [
                                  Variable
                                    ((48,
                                      Effect
                                        ([
                                        ],
                                          .)),
                                      Ex43/j);
                                  Apply
                                    ((48,
                                      Effect
                                        ([
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (Z))
                                        ],
                                          .)),
                                      Variable
                                        ((48,
                                          Effect
                                            ([
                                            ],
                                              .
                                                ->
                                                .
                                                  ->
                                                  .)),
                                          Z.add),
                                      [
                                        Apply
                                          ((48,
                                            Effect
                                              ([
                                                Type
                                                  (OCaml.Effect.State.state,
                                                    Type
                                                      (Z))
                                              ],
                                                .)),
                                            Variable
                                              ((48,
                                                Effect
                                                  ([
                                                  ],
                                                    .
                                                      -[
                                                        Type
                                                          (OCaml.Effect.State.state,
                                                            Type
                                                              (Z))
                                                      ]->
                                                      .)),
                                                OCaml/Effect.State.read),
                                            [
                                              Variable
                                                ((48,
                                                  Effect
                                                    ([
                                                    ],
                                                      .)),
                                                  Ex43/j)
                                            ]);
                                        Constant
                                          ((48,
                                            Effect
                                              ([
                                              ],
                                                .)),
                                            Int(1))
                                      ])
                                ]))),
                    Sequence
                      ((50,
                        Effect
                          ([
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (Z))
                          ], .)),
                        Apply
                          ((50,
                            Effect
                              ([
                                Type
                                  (OCaml.Effect.State.state,
                                    Type
                                      (Z))
                              ], .)),
                            Variable
                              ((50,
                                Effect
                                  ([ ],
                                    . ->
                                      .
                                        -[
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (Z))
                                        ]-> .)),
                                OCaml/Effect.State.write),
                            [
                              Variable
                                ((50,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Ex43/y);
                              Apply
                                ((50,
                                  Effect
                                    ([
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (Z))
                                    ],
                                      .)),
                                  Variable
                                    ((50,
                                      Effect
                                        ([
                                        ],
                                          .
                                            ->
                                            .
                                              ->
                                              .)),
                                      Z.sub),
                                  [
                                    Apply
                                      ((50,
                                        Effect
                                          ([
                                            Type
                                              (OCaml.Effect.State.state,
                                                Type
                                                  (Z))
                                          ],
                                            .)),
                                        Variable
                                          ((50,
                                            Effect
                                              ([
                                              ],
                                                .
                                                  -[
                                                    Type
                                                      (OCaml.Effect.State.state,
                                                        Type
                                                          (Z))
                                                  ]->
                                                  .)),
                                            OCaml/Effect.State.read),
                                        [
                                          Variable
                                            ((50,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              Ex43/y)
                                        ]);
                                    Constant
                                      ((50,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        Int(1))
                                  ])
                            ]),
                        Apply
                          ((51,
                            Effect
                              ([
                                Type
                                  (OCaml.Effect.State.state,
                                    Type
                                      (Z))
                              ], .)),
                            Variable
                              ((51,
                                Effect
                                  ([ ],
                                    . ->
                                      .
                                        -[
                                          Type
                                            (OCaml.Effect.State.state,
                                              Type
                                                (Z))
                                        ]-> .)),
                                OCaml/Effect.State.write),
                            [
                              Variable
                                ((51,
                                  Effect
                                    ([
                                    ],
                                      .)),
                                  Ex43/i);
                              Apply
                                ((51,
                                  Effect
                                    ([
                                      Type
                                        (OCaml.Effect.State.state,
                                          Type
                                            (Z))
                                    ],
                                      .)),
                                  Variable
                                    ((51,
                                      Effect
                                        ([
                                        ],
                                          .
                                            ->
                                            .
                                              ->
                                              .)),
                                      Z.add),
                                  [
                                    Apply
                                      ((51,
                                        Effect
                                          ([
                                            Type
                                              (OCaml.Effect.State.state,
                                                Type
                                                  (Z))
                                          ],
                                            .)),
                                        Variable
                                          ((51,
                                            Effect
                                              ([
                                              ],
                                                .
                                                  -[
                                                    Type
                                                      (OCaml.Effect.State.state,
                                                        Type
                                                          (Z))
                                                  ]->
                                                  .)),
                                            OCaml/Effect.State.read),
                                        [
                                          Variable
                                            ((51,
                                              Effect
                                                ([
                                                ],
                                                  .)),
                                              Ex43/i)
                                        ]);
                                    Constant
                                      ((51,
                                        Effect
                                          ([
                                          ],
                                            .)),
                                        Int(1))
                                  ])
                            ])))),
            Apply
              ((53,
                Effect
                  ([ Type (OCaml.Effect.State.state, Type (Z)) ], .)),
                Variable
                  ((53,
                    Effect
                      ([ ],
                        .
                          -[
                            Type
                              (OCaml.Effect.State.state,
                                Type
                                  (Z))
                          ]-> .)), OCaml/Effect.State.read),
                [ Variable ((53, Effect ([ ], .)), Ex43/z) ])))
    ])
